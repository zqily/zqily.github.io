<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IO方式比较：磁盘IO：缓存IO、直接IO、内存映射</title>
      <link href="/IO%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83%EF%BC%9A%E7%A3%81%E7%9B%98IO%EF%BC%9A%E7%BC%93%E5%AD%98IO%E3%80%81%E7%9B%B4%E6%8E%A5IO%E3%80%81%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/"/>
      <url>/IO%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83%EF%BC%9A%E7%A3%81%E7%9B%98IO%EF%BC%9A%E7%BC%93%E5%AD%98IO%E3%80%81%E7%9B%B4%E6%8E%A5IO%E3%80%81%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>磁盘IO的几种访问方式如下：</p><p><strong></strong></p><p><strong>缓存IO</strong></p><pre><code>缓存I/O又被称作标准I/O，大多数文件系统的默认I/O操作都是缓存I/O。在Linux的缓存I/O机制中，数据先从磁盘复制到内核空间的缓冲区，然后从内核空间缓冲区复制到应用程序的地址空间。读操作：操作系统检查内核的缓冲区有没有需要的数据，如果已经缓存了，那么就直接从缓存中返回；否则从磁盘中读取，然后缓存在操作系统的缓存中。写操作：将数据从用户空间复制到内核空间的缓存中。这时对用户程序来说写操作就已经完成，至于什么时候再写到磁盘中由操作系统决定，除非显示地调用了sync同步命令。缓存I/O的优点：1）在一定程度上分离了内核空间和用户空间，保护系统本身的运行安全；2）可以减少读盘的次数，从而提高性能。缓存I/O的缺点：数据在传输过程中需要在应用程序地址空间和缓存之间进行多次数据拷贝操作，这些数据拷贝操作所带来的CPU以及内存开销是非常大的。</code></pre><p>图 1. 以标准的方式对文件进行读写</p><p> <img src="http://www.ibm.com/developerworks/cn/linux/l-cn-directio/image001.jpg" alt></p><p><strong>直接IO</strong></p><pre><code>直接IO就是应用程序直接访问磁盘数据，而不经过内核缓冲区，这样做的目的是减少一次从内核缓冲区到用户程序缓存的数据复制。比如说数据库管理系统这类应用，它们更倾向于选择它们自己的缓存机制，因为数据库管理系统往往比操作系统更了解数据库中存放的数据，数据库管理系统可以提供一种更加有效的缓存机制来提高数据库中数据的存取性能。直接IO的缺点：如果访问的数据不在应用程序缓存中，那么每次数据都会直接从磁盘加载，这种直接加载会非常缓存。通常直接IO与异步IO结合使用，会得到比较好的性能。（异步IO：当访问数据的线程发出请求之后，线程会接着去处理其他事，而不是阻塞等待）</code></pre><p> 图2. 数据传输不经过操作系统内核缓冲区</p><p><img src="http://www.ibm.com/developerworks/cn/linux/l-cn-directio/image004.jpg" alt></p><p><strong>内存映射</strong></p><pre><code>内存映射是指将硬盘上文件的位置与进程逻辑地址空间中一块大小相同的区域一一对应，当要访问内存中一段数据时，转换为访问文件的某一段数据。这种方式的目的同样是减少数据在用户空间和内核空间之间的拷贝操作。当大量数据需要传输的时候，采用内存映射方式去访问文件会获得比较好的效率。使用内存映射文件处理存储于磁盘上的文件时，将不必再对文件执行I/O操作，这意味着在对文件进行处理时将不必再为文件申请并分配缓存，所有的文件缓存操作均由系统直接管理，由于取消了将文件数据加载到内存、数据从内存到文件的回写以及释放内存块等步骤，使得内存映射文件在处理大数据量的文件时能起到相当重要的作用。</code></pre><p>图 3. 内存映射方式访问</p><p><img src="http://www.ibm.com/developerworks/cn/linux/l-cn-directio/image003.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 原理学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 计算机组成 </tag>
            
            <tag> io方式比较 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xrdp配置文件详解</title>
      <link href="/xrdp%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/xrdp%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>xrdp的配置文档在/etc/xrdp目录下的xrdp.ini和sesman.ini</p><ul><li><p>xrdp.ini 关键部分在globals<br><code>[globals]</code></p><p><code>bitmap_cache=`</code>yes<code></code>#位图缓存`</p><p><code>bitmap_compression=`</code>yes<code></code>#位图压缩`</p><p><code>port=3389</code> <code>#监听端口</code></p><p><code>crypt_level=low</code> <code>#加密程度（low为40位，high为128位，medium为双40位）</code></p><p><code>channel_code=1</code> <code>#不知道是什么</code></p></li><li><p>sesman.ini<br><code>[Globals]</code></p><p><code>ListenAddress=127.0.0.1</code> <code>#监听ip地址(默认即可)</code></p><p><code>ListenPort=3350</code> <code>#监听端口(默认即可)</code></p><p><code>EnableUserWindowManager=1</code> <code>#1为开启,可让用户自定义自己的启动脚本</code></p><p><code>UserWindowManager=startwm.sh</code></p><p><code>DefaultWindowManager=startwm.sh</code></p><p><code>[Security]</code></p><p><code>AllowRootLogin=1</code> <code>#允许root登陆</code></p><p><code>MaxLoginRetry=4</code> <code>#最大重试次数</code></p><p><code>TerminalServerUsers=tSUSErs</code> <code>#允许连接的用户组(如果不存在则默认全部用户允许连接)</code></p><p><code>TerminalServerAdmins=tsadmins</code> <code>#允许连接的超级用户(如果不存在则默认全部用户允许连接)</code></p><p><code>[Sessions]</code></p><p><code>MaxSessions=10</code> <code>#最大会话数</code></p><p><code>KillDisconnected=0</code> <code>#是否立即关闭断开的连接(如果为1,则断开连接后会自动注销)</code></p><p><code>IdleTimeLimit=0</code> <code>#空闲会话时间限制(0为没有限制)</code></p><p><code>DisconnectedTimeLimit=0</code> <code>#断开连接的存活时间(0为没有限制)</code></p><p><code>[Logging]</code></p><p><code>LogFile=.`</code>/sesman<code></code>.log<code></code>#登陆日志文件`</p><p><code>LogLevel=DEBUG</code> <code>#登陆日志记录等级(级别分别为,core,error,warn,info,debug)</code></p><p><code>EnableSyslog=0</code> <code>#是否开启日志</code></p><p><code>SyslogLevel=DEBUG</code> <code>#系统日志记录等级</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> xrdp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络网络层题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BD%91%E7%BB%9C%E5%B1%82%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BD%91%E7%BB%9C%E5%B1%82%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>下列关于路由器的说法错误的是：</p><p>A、路由器工作在网络层</p><p>B、路由器针对网络层地址协议（如IP地址）进行选择与判断</p><p>C、路由器是一种用来连接两个运行相同/不同协议的通信子网的硬件设备</p><p><strong>D、路由器能分隔冲突域，但不能分隔广播域</strong></p><p><strong>2、</strong>在网络互连体系中，从上至下，哪一层是处理端-端数据传输的最底层？</p><p><strong>A、网络层</strong></p><p>B、传输层</p><p>C、应用层</p><p>D、链路层</p><p><strong>3、</strong>在路由器互联的多个局域网中，通常要求每个局域网的：</p><p>A、数据链路层协议可以不同，而物理层协议必须相同</p><p>B、数据链路层协议和物理层协议必须相同</p><p><strong>C、数据链路层协议和物理层协议都可以不同</strong></p><p>D、数据链路层协议必须相同，而物理层协议可以不同</p><p><strong>4、</strong>网络层的包必须被封装在端口所连网络协议规定的帧中才能真正被发送。<strong>（T）</strong></p><p><strong>5、</strong>在链路状态路由算法中，链路状态的获取分为4步，正确的顺序是：</p><p>A、发现邻接节点，广播链路状态信息，测量链路成本，封装链路状态包</p><p><strong>B、发现邻接节点，测量链路成本，封装链路状态包，广播链路状态信息</strong></p><p>C、测量链路成本，发现邻接节点，封装链路状态包，广播链路状态信息</p><p>D、发现邻接节点，封装链路状态包，测量链路成本，广播链路状态信息</p><p><strong>6、</strong>逐跳路由是指每个路由器只有从本地出发前往目的地的下一站路由，没有完整的路由表。<strong>（T）</strong></p><p><strong>7、</strong>下列属于距离矢量算法的特点的有:</p><p><strong>A、当各节点的路由稳定后，算法收敛</strong></p><p>B、节点向网络中所有其他节点广播自己和邻居的连接信息</p><p><strong>C、通过和邻居节点交换路由信息来计算全网的路由</strong></p><p>D、每个节点都有网络完整拓扑图</p><p><strong>8、</strong>下列说法错误的是：</p><p>A、链路状态路由算法为了可靠性，一般采用广播方式</p><p>B、距离矢量算法收敛较慢，可能会出现无穷迭代问题</p><p><strong>C、距离矢量算法有很好的健壮性</strong></p><p>D、链路状态路由算法中，只要一条链路成本发生变化，新链路成本必须通知所有节点</p><p><strong>9、</strong>严格源路由允许相邻两个地址之间跳过多个网络。<strong>（F）</strong></p><p><strong>10、</strong>在一条点对点的链路上，为了减少地址的浪费，子网掩码应该制定为（）</p><p>A、255.255.255.248</p><p>B、255.255.255.240</p><p><strong>C、255.255.255.252</strong></p><p>D、255.255.255.196</p><p><strong>11、</strong>123.35.113.43是C类地址，给定子网掩码255.255.255.192，该ip地址的子网地址是：<strong>123.35.113.0</strong></p><p><strong>12、</strong>在子网192.168.4.0/30中，能接收目的地址为192.168.4.3的IP分组的最大主机数是</p><p>A、1</p><p>B、0</p><p>C、4</p><p><strong>D、2</strong></p><p><strong>13、</strong>有4个B类网络地址：130.57.16.254, 130.57.17.01, 130.57.32.254和130.57.33.01，如果子网掩码为255.255.240.0，则以下说法中正确的是：</p><p>A、130.57.17.254和130.57.32.254属于同一子网</p><p>B、130.57.16.254和130.57.32.254属于同一子网</p><p><strong>C、130.57.16.254和130.57.17.01属于同一子网</strong></p><p>D、130.57.16.254和130.57.33.01属于同一子网</p><p><strong>14、</strong>若路由器R丢弃一个TTL=0的IP分组，则此时R可向发出该IP分组的源主机发送的ICMP报文类型是</p><p>A、源抑制报文</p><p><strong>B、超时报文</strong></p><p>C、目的不可达报文</p><p>D、路由重定向报文</p><p><strong>15、</strong>在TCP/IP体系结构中，直接为DHCP提供服务的协议是</p><p>A、IP</p><p><strong>B、UDP</strong></p><p>C、TCP</p><p>D、PPP</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络传输层题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>传输层协议处理主机之间通信的事务，网络层协议处理应用进程之间通信的事务。<strong>（F）</strong></p><p><strong>2、</strong>传输层协议能提供应用的多路复用/分用服务、可靠数据传送、带宽及延迟保证等服务质量保障。<strong>（T）</strong></p><p><strong>3、</strong>面向连接的传输层服务总是优于无连接的传输层服务。<strong>（F）</strong></p><p><strong>4、</strong>下列哪一项不是虚电路的特点</p><p>A、分组开销少</p><p><strong>B、**</strong>支持广播**</p><p>C、分组按照同一路由转发</p><p>D、顺序到达</p><p><strong>5、</strong>下列哪种交换技术可能导致失序</p><p><strong>A、数据报分组交换</strong></p><p>B、报文交换</p><p>C、虚电路分组交换</p><p>D、电路交换</p><p><strong>6、</strong>以下哪些是并发型客户-服务器模型的特点</p><p>A、所有客户的请求在一个队列中排队</p><p>B、服务器在任何时刻只能为一个客户服务</p><p><strong>C、服务器需要多个端口同时为客户服务</strong></p><p><strong>D、服务器可以同时为多个客户机服务</strong></p><p><strong>7、</strong>三次握手中，出了最后一个确认，中间报文的丢失，无论是请求还是相应，都可通过计时器来予以发现。<strong>（T）</strong></p><p><strong>8、</strong>关于可靠数据传输协议rdt2.2，说法正确的是</p><p><strong>A、发送端必须检查收到的ACK号</strong></p><p><strong>B、使用一种只有肯定确认机制完成可靠传输</strong></p><p><strong>C、接收端必须给出ACK号</strong></p><p><strong>9、</strong>流量控制只与接收方与发送方之间的端-端通信有关。<strong>（T）</strong></p><p><strong>10、</strong>DNS服务器端口号为：</p><p>A、80</p><p>B、21</p><p><strong>C、53</strong></p><p>D、20</p><p><strong>11、</strong>如果本地域名服务无缓存，当采用迭代方法解析另一网络某主机域名时，用户主机和本地域名服务器发送的域名请求条数分别为</p><p>A、多条，1条</p><p>B、1条，1条</p><p>C、多条，多条</p><p><strong>D、1条，多条</strong></p><p><strong>12、</strong>一个DNS资源记录为(mail.pku.edu.cn, pku.edu.cn, MX, 250)，则mail.pku.edu.cn是</p><p>A、授权域名服务器的域名</p><p>B、本地域名服务器的域名</p><p>C、邮件服务器的域名</p><p><strong>D、邮件服务器的别名</strong></p><p><strong>13、</strong>因特网的传输层通过端口号实现应用进程的多路复用和多路分用。（T）</p><p><strong>14、</strong>当发送方向接收方发出多个TCP最大段后，接受到3个重复ACK，则拥塞窗口大小（），并以（）速度增大</p><p>A、减为1，指数</p><p>B、减半，指数</p><p><strong>C、减半，线性</strong></p><p>D、减为1，线性</p><p><strong>15、</strong>TCP慢启动阶段按<strong>_</strong>加大发送速率</p><p>未答题</p><p>A、多项式速度</p><p>B、对数速度</p><p><strong>C、**</strong>指数速度**</p><p>D、线性速度</p><p><strong>16、</strong>主机甲和主机乙之间已建立一个TCP连接，TCP最大段长度为1000字节，若主机甲的当前拥塞窗口为5000字节，在主机甲向主机乙连接发送2个最大段后，成功收到主机乙发送的第一段的确认段，确认段中通告的接收窗口大小为3000字节，则此时主机甲还可以向主机乙发送的最大字节数是</p><p><strong>A、2000</strong></p><p>B、3000</p><p>C、1000</p><p>D、4000</p><p><strong>17、</strong>主机甲和乙已建立了TCP连接，甲始终以MSS=1KB大小的段发送数据，并一直有数据发送；乙每收到一个数据段都会发出一个接收窗口为10KB的确认段。若甲在t时刻发生超时时拥塞窗口为8KB，则从t时刻起，不再发生超时的情况下，经过10个RTT后，甲的发送窗口是</p><p>A、14KB</p><p>B、15KB</p><p>C、12KB</p><p><strong>D、10KB</strong></p><p><strong>18、</strong>主机甲向主机乙发送一个（SYN=1，seq=1234）的TCP段，期望与主机乙建立TCP连接，若主机乙接收该连接请求，则主机乙向主机甲发送的正确的TCP段可能是</p><p>A、（SYN=1，ACK=1，seq=1234，ack=1234）</p><p><strong>B、（SYN=1，ACK=1，seq=1235，ack=1235）</strong></p><p>C、（SYN=0，ACK=0，seq=1235，ack=1235）</p><p>D、（SYN=0，ACK=0，seq=1234，ack=1234）</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构字符串题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>设有字符串变量String A ＝“”，B＝“MULE”，C＝“OLD”，D＝“MY” ; 请计算下列表达式</p><p>(1) D+C+B</p><p>(2) B.substr(3，2) （从下标3开始取）</p><p>(3) A.strlength()</p><p>解析</p><p>(1) 字符串连接：MYOLDMULE</p><p>(2) 从第3位开始取2个字符，但是’MULE’第三位及之后只有一位字符，所以答案为：E</p><p>参考：</p><p><img src="https://img-blog.csdn.net/20180815173152501?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>(3) A是空串，空串的长度为：0</p><p><strong>2、</strong>S=“S1S2…Sn”是一个长为n的字符串，存放在一个数组中，编程序将S改造之后输出。</p><p>1.将S的所有第偶数个字符按照其原来的下标从大到小的次序放在S的后半部分；</p><p>2.将S的所有第奇数个字符按照其原来的下标从小到大的次序放在S的前半部分；</p><p>例如：S=‘ABCDEFGHIJKL’，则改造后的S为‘ACEGIKLJHFDB’。则 S=’algorithm’, 改造后为<strong><strong>____</strong></strong></p><p>解析</p><p>前半部分为，algorithm奇数的字符，即agrtm；后半部分为Algorithm偶数字符下标从大到小次序，即hiol，故结果是agrtmhiol。</p><p><img src="https://img-blog.csdn.net/20180815180248780?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案： agrtmhiol</p><p><strong>3、</strong>设有两个串p和q，其中q是p的子串，求q在p中首次出现的位置的算法称为：</p><p>A、求子串 Seeking substring</p><p>B、联接 Concatenation</p><p>C、匹配 Matching</p><p>D、求串长 Seeking length</p><p>解析</p><p>A.求子串：求子串是给定首字符在原字符串中位置和子串长度，输出子串</p><p>B.联接：是把两个字符串连接到一起输出新字符串</p><p>C.匹配：是求子串在父串中的位置</p><p>D.求串长：求字符串的长度</p><p><strong>4、</strong>若串S1=‘ABCDEFG’, S2=‘9898’ ,S3=‘###’,S4=‘012345’,</p><p>执行 concat<strong>(</strong>replace(S1,substr(S1,length(S2),length(S3)),S3),substr(S4,index(S2,‘8’),length(S2))<strong>)</strong></p><p>注意：substr(S,i,j)是对字符串S的下标为i开始取j个字符，这里的下标是从0开始的(单选)</p><p>A、ABC###G0123</p><p>B、ABCD###2345</p><p>C、ABCD###1234</p><p>D、ABC###G2345</p><p>解析</p><p>substr(S1,length(S2),length(S3))即substr(S1,4,3))，</p><p>从下标4开始取s1三个字符，即EFG，</p><p>replace(S1,substr(S1,length(S2),length(S3)),S3)即replace（S1，‘EFG’，’###‘），</p><p>故结果为’ABCD###‘，</p><p>substr(S4,index(S2,‘8’),length(S2))即,substr(S4,1,4)（其中index(S2,‘8’)指的是找s2中第一个’8‘的下标），故为’1234‘。</p><p>故最后结果为ABCD###1234</p><p>答案： C</p><p><strong>5、</strong>在字符{A, C, G, T}组成的DNA序列中，A和T、C和G是互补对。判断一个DNA序列中是否存在互补回文串（例如，ATCATGAT的补串是TAGTACTA，与原串形成互补回文串）。下面DNA序列中存在互补回文串的是：（多选）</p><p>A、CTGATCAG</p><p>B、AATTAATT</p><p>C、TGCAACGT</p><p>D、CATGGTAC</p><p>E、GTACGTAC</p><p>F、AGCTAGCT</p><p>解析</p><p>C.TGCAACGT : 互补串为ACGTTGCA，不是原串回文。</p><p>D.CATGGTAC : 互补串为GTACCATG，不是原串回文。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络应用层题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%B1%82%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%B1%82%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>因特网的网络层协议根据协议文档是否公开可用分为两大类。第一类是由RFC定义的<strong>（开放）</strong>协议，第二类是为了实现技术保密而不公开的<strong>（私有）</strong>协议。</p><p><strong>2、</strong>网络应用系统的架构主要分为：</p><p><strong>A、**</strong>客户机/服务器模式**</p><p><strong>B、**</strong>对等服务模式**</p><p><strong>C、**</strong>浏览器/服务器模式**</p><p><strong>3、</strong>对于音频/视频的点播（在线播放），关于其抖动与时延的要求说法最为正确的是：</p><p><strong>A、**</strong>抖动是非常重要的一个性能参数**</p><p>B、抖动和时延都重要，但时延的大小至关重要</p><p>C、时延和抖动都很重要</p><p>D、时延是非常重要的一个性能参数</p><p><strong>4、</strong>波形编码的目的是在接收端以尽可能少的比特重现该波形。<strong>（T）</strong></p><p><strong>5、</strong>在JPEG处理RGB视频图像中，在进行完离散余弦变换（DCT）后，紧接着进行的操作是:</p><p>A、行程编码</p><p>B、区分量化</p><p>C、霍夫曼编码</p><p><strong>D、量化</strong></p><p><strong>6、</strong>RTCP协议可以携带音频/视频数据。<strong>（F）</strong></p><p><strong>7、</strong>以下关于RTP协议，说法错误的是:</p><p>A、用来传输流媒体数据</p><p>B、不确保数据报的传输时间</p><p><strong>C、保证媒体数据报顺序到达</strong></p><p><strong>D、提供传输QoS保障</strong></p><p><strong>8、</strong>交错编码在出现丢包时播放效果不会出现成帧丢失，也不会降低播放质量。<strong>（F）</strong></p><p><strong>9、</strong>播放器和服务器通信所用的HTTP协议支持流媒体的播放功能（比如暂停、快进、跳转等操作）<strong>（F）</strong></p><p><strong>10、</strong>下列属于恶意程序的是：</p><p><strong>A、特洛伊木马</strong></p><p><strong>B、蠕虫</strong></p><p><strong>C、逻辑炸弹</strong></p><p><strong>D、病毒</strong></p><p><strong>11、</strong>网络安全的目标可以细分为保密性、认证性、完整性、不可否认性。<strong>（T）</strong></p><p><strong>12、</strong>Kerckhoff原则是指所有的算法必须是公开的，而密钥是保密的。<strong>（T）</strong></p><p><strong>13、</strong>密码学原则一：消息必须包含一定的<strong>（冗余度）</strong> ，密码学原则二：需要采取某种方法来对抗<strong>（重放攻击）</strong> 。</p><p><strong>14、</strong>DES加密的块大小为：</p><p>A、128位</p><p><strong>B、64位</strong></p><p>C、32位</p><p>D、56位</p><p><strong>15、</strong>DES加密的密钥为：</p><p>A、32位</p><p>B、64位</p><p>C、128位</p><p><strong>D、56位</strong></p><p><strong>16、</strong>SSL层的主要任务是压缩和加密，主要用于在两个socket之间建立安全连接。<strong>（T）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概论题库</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>下列关于操作系统的叙述中，哪一个是错误的？</p><p>A、操作系统管理着计算机系统中的各种资源</p><p>B、操作系统应为用户提供良好的界面</p><p>C、操作系统是计算机系统中的一个应用软件</p><p>D、操作系统向用户屏蔽了硬件操作细节</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807112825473?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>下列关于批处理操作系统的叙述中，哪一个是正确的？</p><p>A、批处理操作系统的系统资源利用率不高</p><p>B、批处理操作系统的系统吞吐量小</p><p>C、用户不能直接干预自己作业的执行</p><p>D、批处理操作系统追求的目标是响应时间</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807113700853?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>3、</strong>用户向操作系统提出服务请求一般有两种方式：终端命令和</p><p>A、宏命令</p><p>B、汇编语言</p><p>C、高级语言</p><p>D、系统调用</p><p>解析：</p><p><img src="https://img-blog.csdn.net/2018080711384355?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>4、</strong>下列哪一个不是操作系统的特征？</p><p>A、并发性</p><p>B、共享性</p><p>C、随机性</p><p>D、制约性</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807114051893?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>5、</strong>下列关于并发概念的叙述中，哪个是正确的？</p><p>A、并发性是指若干程序在同一时刻执行</p><p>B、并发性是指若干程序在不同时刻执行</p><p>C、并发性是指若干程序在同一时间间隔内执行</p><p>D、并发性是指若干程序在不同时间间隔内执行</p><p>解析：</p><p><img src="https://img-blog.csdn.net/201808071145499?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>6、</strong>在汽车电子系统中使用的操作系统应属于下列哪一类？</p><p>A、批处理操作系统</p><p>B、嵌入式操作系统</p><p>C、个人计算机操作系统</p><p>D、分布式操作系统</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807114743967?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>7、</strong>下列哪一项不是嵌入式操作系统的特点？</p><p>A、交互性</p><p>B、低成本</p><p>C、高可靠性</p><p>D、占有资源少</p><p><strong>8、</strong>下列关于SPOOLing技术的叙述中，哪一个是错误的？</p><p>A、批处理系统常采用SPOOLing技术实现</p><p>B、SPOOLing技术是一种用磁盘空间换取时间的技术</p><p>C、作业的输入输出工作通常由SPOOLing系统完成</p><p>D、SPOOLing是一种独占设备技术</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807135341676?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180807135431282?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180807135515664?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>9、</strong>下列哪一项是分布式操作系统与网络操作系统本质区别？</p><p>A、实现各台计算机之间的通信</p><p>B、共享网络中的资源</p><p>C、满足较大规模的应用</p><p>D、系统中若干台计算机相互协作完成同一任务</p><p><strong>10、</strong>操作系统对每一种资源的管理所完成的工作包括</p><p>A、实施资源分配</p><p>B、确定资源分配策略</p><p>C、对资源使用提供保护机制</p><p>D、记录资源的使用状况</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807140807776?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>11、</strong>分时操作系统是典型的交互式系统，下列哪些因素与交互式系统相关？</p><p>A、响应时间</p><p>B、资源利用率</p><p>C、吞吐量</p><p>D、时间片</p><p>E、高可靠性</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807141422359?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>12、</strong>设计实时系统时首先要考虑的是如何提高系统的资源利用率。（F）</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807141719524?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>13、</strong>多道批处理系统是指那些有多个处理器同时处理作业的系统。（F）</p><p><strong>14、</strong>现代操作系统通常采用SPOOLing技术的思想实现网络打印功能。（T）</p><p><strong>15、</strong>单CPU上可以并发执行多个程序。（T）</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统运行环境题库</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>控制和状态寄存器用于控制处理器的操作，在某种特权级别下可以访问、修改。下列哪一个不是控制和状态寄存器</p><p>A、程序计数器（PC）</p><p>B、指令寄存器（IR）</p><p>C、程序状态字（PSW）</p><p>D、通用寄存器（EAX）</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807142529631?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>x86系列处理器提供了4个处理器特权级别，又称特权环。下列哪一个特权级别最高？</p><p>A、R0</p><p>B、R1</p><p>C、R2</p><p>D、R3</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807142710462?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>3、</strong>下列对中断和异常的描述中，哪一个是正确的？</p><p>A、中断和异常都是由正在执行的指令引发的</p><p>B、中断是由外部事件引发的，而异常则是由正在执行的指令引发的</p><p>C、异常是由外部事件引发的，而中断则是由正在执行的指令引发的</p><p>D、中断和异常都是由外部事件引发的</p><p>解析：</p><p><img src="https://img-blog.csdn.net/2018080714420285?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>4、</strong>中断和异常都是改变执行程序的控制流，处理完成后再恢复执行，但是二者是有区别的。下列选项中，哪一项是异常？</p><p>A、运行过程中出现了栈溢出</p><p>B、定时器到达规定的时间点（时钟中断）</p><p>C、右击鼠标（I/O中断）</p><p>D、存储器校验出错（硬件故障）</p><p><strong>5、</strong>中断机制是计算机系统中的核心机制之一。发生中断事件时的中断断点是指</p><p>A、引起中断的那一个事件</p><p>B、中断控制器向处理器发出的信号</p><p>C、正在执行的程序的当前指令</p><p>D、中断处理程序入口的第一条指令</p><p><strong>6、</strong>中断向量（中断描述符）的作用非常重要，因为它保存了</p><p>A、中断码和中断处理程序入口地址</p><p>B、中断断点的地址和中断码</p><p>C、中断码和程序状态字</p><p>D、程序状态字和中断入口程序地址</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807144931539?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>7、</strong>函数fork()属于下列哪一类系统调用？</p><p>A、进程控制类</p><p>B、文件操作类</p><p>C、设备管理类</p><p>D、信息维护类</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807145218795?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>8、</strong>系统调用扩充了机器指令，增强了系统功能，方便了用户使用。下列哪一项功能不属于系统调用？</p><p>A、搜索数组中的最大数</p><p>B、用户程序创建一个新进程</p><p>C、打开磁盘上的一个文件</p><p>D、向某一个进程发送一个消息</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807145805186?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>9、</strong>系统调用与一般过程调用是不同的，下列描述中哪一个是正确的？</p><p>A、过程调用和系统调用均位于内核态</p><p>B、过程调用和系统调用均位于用户态</p><p>C、过程调用时调用程序位于用户态，被调用程序位于内核态</p><p>D、系统调用时调用程序位于用户态，被调用程序位于内核态</p><p><strong>10、</strong>在操作系统中，只能在内核态下运行的指令是</p><p>A、算术运算指令</p><p>B、I/O指令</p><p>C、移位指令</p><p>D、禁止中断指令</p><p>E、陷入指令</p><p>F、设置时钟</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807150119150?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>特权指令：</p><p><img src="https://img-blog.csdn.net/20180807150213266?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>11、</strong>中断和异常都是将正常执行的程序打断，完成处理后再恢复执行，但是二者是有区别的。下列选项中，哪一些属于中断事件？</p><p>A、浮点溢出</p><p>B、电源掉电</p><p>C、访问内存时地址越界</p><p>D、内存校验错</p><p>E、网卡适配器缓存满</p><p>F、用户程序试图执行特权指令</p><p>解析：</p><p><img src="https://img-blog.csdn.net/2018080714420285?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>12、</strong>从用户态转换到内核态是通过设置程序状态字(PSW)寄存器的某一位(某几位)完成的。（F）</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807152022386?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>13、</strong>操作系统所能执行的指令集合是特权指令集合。（F）</p><p>解析：操作系统既能执行特权指令又能执行非特权指令。</p><p><strong>14、</strong>中断系统中保存现场的工作都是由硬件部件完成的。（F）</p><p>解析：软件也会参与。</p><p><strong>15、</strong>系统调用的功能是由内核函数实现的。（T）</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807153626218?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>16、</strong>系统调用执行时，参数传递可以利用通用寄存器完成。（T）</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统死锁题库</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%AD%BB%E9%94%81%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%AD%BB%E9%94%81%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>在计算机系统拥有的各种软硬件资源中，内存是属于</p><p>A、可重用资源</p><p>B、不可重用资源</p><p>C、临界资源</p><p>D、独占资源</p><p><img src="https://img-blog.csdn.net/20180814104515228?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>下列描述的各种现象中，属于活锁现象的是</p><p>A、相关进程进入阻塞状态，且无法唤醒</p><p>B、相关进程进入阻塞状态，且可以唤醒</p><p>C、相关进程没有阻塞，但是调度时刻被延迟推后</p><p>D、相关进程没有被阻塞，可被调度，但是执行没有进展（能上CPU，但得不到资源）</p><p><strong>3、</strong>在系统运行过程中，通过检查系统是否处于安全状态而不让死锁发生的策略是</p><p>A、死锁预防</p><p>B、死锁避免（银行家·算法）</p><p>C、死锁检测</p><p>D、死锁解除</p><p><img src="https://img-blog.csdn.net/20180814104723521?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>4、</strong>对资源采用按序分配策略能达到下列哪一个目的？</p><p>A、死锁预防</p><p>B、死锁避免</p><p>C、死锁检测</p><p>D、死锁解除</p><p><img src="https://img-blog.csdn.net/201808141049163?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>5、</strong>在下列解决死锁的方法中，属于死锁避免策略的是</p><p>A、资源有序分配法</p><p>B、资源分配图化简法</p><p>C、死锁检测算法</p><p>D、银行家算法</p><p><strong>6、</strong></p><p>![XM1`53%@V$M~[956(58<a href="http://i1.chinesemooc.org/course/formula/201512/13af16a691179038828348a83fd0b4cd.png" target="_blank" rel="noopener">CBX.png </a></p><p>A、死锁</p><p>B、无死锁</p><p>C、活锁</p><p>D、饥饿</p><p><strong>7、</strong></p><p><img src="http://i1.chinesemooc.org/course/formula/201512/8c5ce1bbd64286a078359019082dc678.png" alt="EATM{KSK$Y1W)73W]RX]8GA.png"></p><p>A、资源独占条件</p><p>B、不可抢占条件</p><p>C、请求和保持条件</p><p>D、循环等待条件</p><p><img src="https://img-blog.csdn.net/20180814105243513?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>8、</strong></p><p><img src="http://i1.chinesemooc.org/course/formula/201512/b5446da7efe11730e3a785c9ca901071.png" alt="ZPFN`(V_G_](3OWHD@(8{8X.png "></p><p>A、安全状态</p><p>B、不安全状态</p><p>C、死锁状态</p><p>D、临界状态</p><p><strong>9、</strong>系统有某类资源5个，供3个进程共享，每个进程最多申请多少个该类资源时系统仍然是安全的？</p><p>A、1</p><p>B、2</p><p>C、3</p><p>D、5</p><p><strong>10、</strong>形成死锁的必要条件是</p><p>A、资源的互斥使用</p><p>B、部分分配资源</p><p>C、不可剥夺已分配资源</p><p>D、进程对资源的申请形成环路</p><p>E、系统资源不足</p><p><img src="https://img-blog.csdn.net/20180814105406277?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>11、</strong></p><p>![EVP(E5$}X8X1I6LOPVK$<a href="http://i1.chinesemooc.org/course/formula/201512/83e5db8511f496b81e92304ca2e7d765.png" target="_blank" rel="noopener">DF.png</a></p><p>A、P5→P4→P3→P2→P1</p><p>B、P4→P3→P2→P5→P1</p><p>C、P4→P3→P2→P1→P5</p><p>D、P2→P3→P4→P5→P1</p><p>E、P1→P2→P3→P4→P5</p><p><strong>12、</strong></p><p><img src="http://i1.chinesemooc.org/course/formula/201512/169a8253d68a0365fecd2a55b3268faf.png" alt="XBFLYX1XS[760X]92ZFEFK5.png"></p><p>（T）</p><p><strong>13、</strong>在图中，O3点属于区域④。（F）</p><p><strong>14、</strong>在图中，边O1O2（不含两个端点）表示死锁状态。（T）</p><p><img src="https://img-blog.csdn.net/20180814105506915?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180814105523173?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180814105600392?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180814105622200?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180814105650817?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>15、</strong>解决经典的哲学家进餐问题时，若规定每个哲学家先取左边筷子、再取右边筷子，则可以避免死锁发生。（F）</p><p><img src="https://img-blog.csdn.net/20180814105814201?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180814105837836?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180814105903273?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系进程线程模型题库</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>多道程序设计技术是操作系统中最早引入的软件技术，引入它的目的是</p><p>A、提高系统的实时响应速度</p><p>B、充分利用内存，有利于数据共享</p><p>C、充分利用CPU，提高CPU利用率</p><p>D、提高文件系统性能，减少内外存之间的信息传输量</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807163425216?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>下列关于进程控制块PCB的叙述中，哪一个是错误的？</p><p>A、操作系统利用PCB描述进程的基本特征</p><p>B、一个PCB唯一对应一个进程</p><p>C、PCB可用于描述进程的运动变化过程</p><p>D、PCB通常保存在磁盘上</p><p>解析：</p><p><strong>3、</strong>在某一条件下，进程会在状态之间相互转换。下列哪一种进程状态转换不会发生？</p><p>A、等待态→就绪态</p><p>B、就绪态→运行态</p><p>C、就绪态→等待态</p><p>D、运行态→等待态</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807164834276?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180807164932246?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180807165026923?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>4、</strong>假设某单处理器计算机系统中有10个进程，则系统中处于等待状态的进程最多有几个？</p><p>A、0</p><p>B、1</p><p>C、9</p><p>D、10</p><p><strong>5、</strong>下列关于进程控制操作的叙述中，哪一个是不正确的？</p><p>A、一个进程可以使用创建原语建立一个新的进程</p><p>B、撤销进程就是释放该进程占有的内存资源</p><p>C、阻塞原语使一个进程变为等待状态</p><p>D、唤醒原语使从等待队列中撤出进程</p><p>解析：释放该进程占有的内存资源只是撤销过程的部分</p><p><strong>6、</strong>下列哪一项工作不是创建进程时所作的？</p><p>A、给新进程分配一个唯一标识</p><p>B、给新进程分配虚拟地址空间</p><p>C、初始化新进程的进程控制块</p><p>D、将处理器控制权交给新进程</p><p>解析：</p><p><img src="https://img-blog.csdn.net/2018080717083980?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>7、</strong>进程控制原语有多种，下列哪一项不是进程控制原语？</p><p>A、改变进程优先级</p><p>B、挂起进程</p><p>C、进程唤醒</p><p>D、进程上下文切换</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180807171408393?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>8、</strong>在UNIX操作系统中运行如下C语言程序：</p><p>int main()</p><p>{</p><p>pid_t pid;</p><p>int a=5;</p><p>pid = fork();</p><p>if (pid==0)</p><p>printf (“This is the son process, a=%d “, –a);</p><p>else</p><p>printf (“This is the dad process, a=%d “, ++a);</p><p>}</p><p>假设编译链接过程正确且程序正确执行，那么运行结果是</p><p>A、This is the son process, a=4 This is the dad process, a=6</p><p>B、This is the son process, a=4</p><p>C、This is the dad process, a=6</p><p>D、This is the dad process, a=4 This is the son process, a=6</p><p><strong>9、</strong>进程映像由几部分组成，下列哪一项不属于进程映像？</p><p>A、进程控制块</p><p>B、程序代码</p><p>C、用户栈</p><p>D、就绪队列</p><p>解析：</p><p><img src="https://img-blog.csdn.net/201808071716527?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>10、</strong>某操作系统在进程中引入了多个执行序列——线程，那么下列叙述中，哪些描述了进程与线程的联系和区别？</p><p>A、进程是资源分配的基本单位</p><p>B、进程是处理器调度的基本单位</p><p>C、线程是资源分配的基本单位</p><p>D、线程是处理器调度的基本单位</p><p>E、线程不能独立于进程而存在</p><p><strong>11、</strong>下列各种事件中，一定产生进程状态改变的事件是</p><p>A、运行的进程正常退出</p><p>B、运行的进程因种种原因而阻塞</p><p>C、新进程创建成功</p><p>D、阻塞的进程被唤醒</p><p>E、运行的进程时间片用完</p><p><strong>12、</strong>进程运行时，其硬件状态保存在相应寄存器中；当它被切换下CPU时，其硬件状态保存在内核栈中。（F）</p><p><strong>13、</strong>当某个正在执行的进程需要进行I/O操作时，可以通过调用挂起原语将自己从运行状态变为等待状态。（F）</p><p><img src="https://img-blog.csdn.net/20180807165026923?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>14、</strong>用户级线程执行时，同一进程不同线程的切换不需要内核支持。（T）</p><p><strong>15、</strong>在支持线程的操作系统中，同一个进程中的各个线程共享该进程的用户栈。（F）</p><p><img src="https://img-blog.csdn.net/20180807174839750?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构图题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9B%BE%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9B%BE%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>有向图<strong>G</strong>如下图所示，请写出所有拓扑排序序列。所有的顶点都直接用其数字标号表示，如拓扑排序序列为<img src="http://i1.chinesemooc.org/course/formula/201610/e0e386bb76ff36457d0701c5a54974a9.png" alt="25.png">，那么请写成1234（中间没有空格）。不同的拓扑排序序列按照字典序排序，中间用一个空格隔开。</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/ece7fc26b9fda32e464797aab3fc7a62.png" alt="Screen Shot 2016-10-20 at 21.36.40.png"></p><p>解析：</p><p>根据拓扑排序的定义，顶点1必须在顶点3前，顶点1、顶点2和顶点3必须在顶点4前，故排列可以为1234、1324、2134</p><p>答案： 1234 1324 2134</p><p>扩充例子：</p><p><img src="https://img-blog.csdn.net/20180816172938367?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/2018081617300140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>无向图<strong>G=(V, E)</strong>，其中：<strong>V={a, b, c, d, e, f}, E={(a, b), (a, e), (a, c), (b, e), (c, f), (f, d), (e, d)}</strong>，对该图进行深度优先遍历（优先访问编号小的结点），得到的顶点序列为？</p><p>A、abedfc</p><p>B、aebdfc</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180817105947471?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>根据深度优先的算法，先访问a，再访问a的邻接顶点b，再访问b的邻接顶点e，访问e的邻接顶点d，访问d的邻接顶点f（注意是无向图），访问f的邻接顶点c，不再有没访问的顶点，结束。</p><p><strong>3、</strong>下列关于最短路算法的说法正确的有：</p><p>A、当图中不存在负权回路但是存在负权边时，Dijkstra算法不一定能求出源点到所有点的最短路。</p><blockquote><p>解析：即使是只有负权边，也会导致以前已经被选出来更新其它结点最短路值的结点的最短路值被更新，造成错误。</p></blockquote><p>B、当图中不存在负权边时，Dijkstra算法能求出每对顶点间最短路径。</p><blockquote><p>解析：可以执行多次Dijkstra算法实现这一要求。</p></blockquote><p>C、当图中存在负权回路时，Dijkstra算法也一定能求出源点到所有点的最短路。</p><blockquote><p>解析：Dijkstra算法无法处理图中存在任何负权边的情况。</p></blockquote><p>D、Dijkstra算法不能用于每对顶点间最短路计算。</p><blockquote><p>解析：可以执行多次Dijkstra算法实现这一要求。</p></blockquote><p><strong>4、</strong>请使用Kruskal算法求出下图的最小生成树，依次写出每次被选择的合法的合并代价最小的边的编号（如果同时存在多条边满足要求，选择编号最小的）。顶点a到顶点b (a &lt; b)之间的边编号为ab，例如图中权值为1的边编号为02。</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/a67631fee740022a303620a16a9b1e2e.png" alt="Screen Shot 2016-10-20 at 21.47.02.png"></p><blockquote><p>解析</p><p>Kruskal算法优先选择权值小的边，先挑选权值为1的边02，再选择权值为2的边35，再选择权值为3的边14，再选择权值为4的边25，再选择权值为5的边，只有选择12才能连接两个不同的连通分支</p><p><img src="https://img-blog.csdn.net/20180817111643808?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案： 02 35 14 25 12</p></blockquote><p><strong>5、</strong>题图为一无向图,分别写出从顶点1出发,按深度优先搜索遍历算法得到的顶点序列,和按广度优先搜索遍历算法得到的顶点序列</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/62134eb4daf6b0f9e14683af93bbe274.png" alt="Screen Shot 2016-10-20 at 21.48.52.png"></p><blockquote><p>解析</p><p>根据深度优先定义，先访问1，依次是2、3、4、5、6，注意是无向图。广度优先是一层一层访问，即123564，答案为123456 123564</p><p>答案： 123456 123564</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构外排序题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%96%E6%8E%92%E5%BA%8F%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%96%E6%8E%92%E5%BA%8F%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>假设计算机系统有2048个字节的磁盘块，要存储的每一条记录为48字节，其中数据占了44个字节，关键码占4个字节。磁盘指针为4个字节。那么这个磁盘块上最多有多少条记录？</p><blockquote><p>解析</p><p>2048/48=42.67，则最多42条记录</p><p>答案： 42</p></blockquote><p><strong>2、</strong>假设计算机系统有2048个字节的磁盘块，要存储的每一条记录为68字节，其中数据占了64个字节，关键码占4个字节。磁盘指针为4个字节。那么这个磁盘块上最多有多少条记录？</p><blockquote><p>解析</p><p>2048/68=30.12，则最多30条记录</p><p>答案： 3</p></blockquote><p><strong>3、</strong>设输入的关键码满足k1&gt;k2&gt;…&gt;kn，缓冲区大小为m，用最小值堆进行置换-选择排序方法可产生多少个初始归并段？n=100,m=5</p><blockquote><p>解析</p><p>n/m=20，由于后面的关键码更小，所以每次的顺串大小均为m</p><p>答案： 20</p></blockquote><p><strong>4、</strong>有8个顺串，每个顺串的第一个记录的关键码分别为14，22，24，15，16，11，100，18，根据对顺串开始8路合并时的败者树。求问根节点是几号？（注意：顺串的编号从1开始，本题不是问根节点上面表示“冠军”的额外的节点）</p><blockquote><p>解析：败者树的根结点记录的是败者，需要加一个结点来记录整个比赛的胜利者。</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/7e62a9032fe3ebbc15acc19b6562f1d0.png" alt></p><p>答案： 1</p></blockquote><p><strong>5、</strong>有8个顺串，每个顺串的第一个记录的关键码分别为14，22，24，15，16，11，100，18，第二个记录的关键码分别为26，38，30，26，50，28，110，40。从败者树输出—个全局优胜者(并有相应的一个记录进入败者树)后需对败者树进行重构，则重构后的败者树的根结点是几号？（注意：顺串的编号从1开始，本题不是问根结点上面表示“冠军”的额外的结点）</p><blockquote><p>解析：败者树的根结点记录的是败者，需要加一个结点来记录整个比赛的胜利者。</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/edccc86d84bf5a573e8f7b8712028b4d.png" alt></p><p>答案： 5</p></blockquote><p><strong>6、</strong>从磁盘中随机选择的两个磁道的平均距离约是磁盘中磁道总数的多少？</p><p>A、1/2</p><p>B、1/3</p><p>C、2/3</p><p>D、1/4</p><blockquote><p>解析</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/deb0ed1de3a2360d1178bc1dfe26670f.png" alt></p><p>答案： B</p></blockquote><p><strong>7、</strong>如图所示，进行六路归并的顺串的第一个记录的关键码分别是22,6,12,84,10,9。请构造赢者树填充其他节点，求该二叉树的广度优先周游序列。（注意：不包括已知的6个外部节点，各个数字之间用空格分隔，结尾没有空格）</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/2db4c0c25e63c0ab2286512f1ceb1df6.png" alt></p><blockquote><p>解析：</p><p>一般来说，胜者树中胜出的是关键码较小的那个记录。</p><p>另外，要注意每个节点保存的是两个子节点中，胜出的记录的编号，而不是关键码。</p><p><img src="https://img-blog.csdn.net/20180820151431218?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案： 2 2 6 2 3</p></blockquote><p><strong>8.</strong> 如图所示，进行五路归并的顺串的第一个记录的关键码分别是14, 18, 9, 23, 77。请构造赢者树填充其他节点，求该二叉树的广度优先周游序列。（注意：不包括已知的5个外部节点，各个数字之间用空格分隔，结尾没有空格）</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/b90bc34cc0ad842d64f14e77be88d3ab.png" alt></p><blockquote><p>解析：</p><p>一般来说，胜者树中胜出的是关键码较小的那个记录。</p><p>另外，要注意每个节点保存的是两个子节点中，胜出的记录的编号，而不是关键码。</p><p><img src="https://img-blog.csdn.net/20180820151957454?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案： 3 3 4 1</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统处理器调度题库</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E5%99%A8%E8%B0%83%E5%BA%A6%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E5%99%A8%E8%B0%83%E5%BA%A6%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>下列哪一个调度算法的开销比较小？</p><p>A、先来先服务(FCFS)</p><p>B、短作业优先(SJF)</p><p>C、多级反馈队列(Feedback)</p><p>D、最高相应比优先(HRRN)</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180808152637347?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>下列哪一个调度算法对短进程不利？</p><p>A、先来先服务(FCFS)</p><p>B、时间片轮转(RR)</p><p>C、短作业优先(SJF)</p><p>D、最高相应比优先(HRRN)</p><p><strong>3、</strong>假设三个进程P1、P2和P3同时到达，它们的执行时间分别是T1、T2和T3，且T1&lt;T2&lt;T3。若采用短作业优先(SJF)调度算法执行这三个进程，则平均周转时间是</p><p>A、T1+T2+T3</p><p>B、(T1+T2+T3)/3</p><p>C、1/T1+1/T2+1/T3</p><p>D、(3T1+2T2+T3)/3</p><p><strong>4、</strong>设有四个进程，它们的到达时刻和处理时间如下所示:</p><p>进程 到达时刻 处理时间</p><p>P1 0 50</p><p>P2 10 30</p><p>P3 30 10</p><p>P4 50 10</p><p>采用最高响应比优先(HRRN)调度算法在时刻50进行调度，所选中的进程是</p><p>A、P1</p><p>B、P2</p><p>C、P3</p><p>D、P4</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180808153053824?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>R1 = 1 + 50/50 = 2</p><p>R2 = 1 + 40/30</p><p>R3 = 1 + 20/10 = 3</p><p>R4 = 1 + 0 =1</p><p><strong>5、</strong>有三个进程P1、P2和P3，运行时间均为50ms。假设时间片大小为10ms，且不考虑上下文切换的开销。采用时间片轮转（RR）算法执行完这三个进程，其平均完成时间是多少？</p><p>A、100ms</p><p>B、50ms</p><p>C、140ms</p><p>D、150ms</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180808160635109?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>130 + 140 + 150 = 420</p><p>420 / 3 = 140</p><p><strong>6、</strong>设有四个进程，它们的到达时刻和处理时间如下所示:</p><p>进程 到达时刻 处理时间</p><p>P1 0 8</p><p>P2 3 6</p><p>P3 5 2</p><p>P4 6 5</p><p>采用最短剩余时间优先(SRTN)调度算法，对进程的调度顺序是</p><p>A、P3、P4、P2、P1</p><p>B、P1、P3、P4、P2</p><p>C、P1、P2、P1、P3、P4</p><p>D、P1、P3、P1、P4、P2</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180808164327923?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>7、</strong>采用下列哪一个调度算法会产生“饥饿”现象？</p><p>A、先来先服务(FCFS)</p><p>B、时间片轮转(RR)</p><p>C、最高相应比优先(HRRN)</p><p>D、多级反馈队列(Feedback)</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180808165545833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>对长进程不利，对计算密集型（CPU型）不利。</p><p><strong>8、</strong>下列关于多级反馈队列(Feedback)调度算法的叙述中，哪一个是不正确的？</p><p>A、它是一个综合调度算法</p><p>B、它是BSD操作系统5.3版所采用的调度算法</p><p>C、它对计算密集型(CPU型)进程更友好（对I/O型有利）</p><p>D、它给每一级就绪队列的进程分配不同的时间片大小</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180808170040187?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>9、</strong>Windows线程调度算法中，为了解决饥饿、改善系统吞吐量及响应时间等整体特征，会临时提升一些线程的优先级。请问对下列哪一类线程Windows调度不会提升其优先级？</p><p>A、I/O结束后被唤醒的线程</p><p>B、运行完时间配额的线程</p><p>C、由于窗口活动而被唤醒的窗口线程</p><p>D、在就绪队列中等待时间超时的线程</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180808170247929?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>10、</strong>假设系统设置了一个就绪队列，且就绪队列中有多个进程。下列哪些事件的发生一定导致进程切换？</p><p>A、创建一个进程</p><p>B、进程执行时产生终止(abort)异常</p><p>C、进程执行过程中时间片到时</p><p>D、进程执行时等待I/O</p><p>E、从等待队列唤醒一个进程</p><p><strong>11、</strong>下列关于进程优先级和优先数的叙述中，哪些是正确的？</p><p>A、优先数是一个数值</p><p>B、进程优先数决定了进程的优先级</p><p>C、优先数大的进程优先级一定高</p><p>D、优先级一旦确定就不再改变</p><p>E、通常情况下系统进程的优先级比用户进程的优先级高</p><p><strong>12、</strong>时间片长度过小会增加系统的开销。（T）</p><p><strong>13、</strong>一个比正在运行进程优先级更高的进程就绪时，一定引起进程切换。（F）</p><p><strong>14、</strong>非抢占式最高优先级调度算法会导致优先级反转问题。（F）</p><p><strong>15、</strong>进程在不同CPU上迁移会带来高速缓存和TLB的失效。（T）</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构栈与队列题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>设栈S 和队列Q 的初始状态为空，元素e1，e2，e3，e4，e5和e6依次通过栈S，一个元素出栈后即进队列Q，若6 个元素出队的序列是e2，e4，e3，e6，e5，e1则栈S的容量至少应该是<strong><strong><strong>_</strong></strong></strong>。</p><p>A. 2 B. 3 C. 4 D. 5</p><p>解析：不难，在本子上画画划划就行。</p><p><strong>2、</strong>双端队列可以在队列的两端进行插入和删除操作，既可在队尾进行插入/删除，又可在队头进行插入/删除。现有4个不同的元素顺序输入到双端队列，那么可以得到<strong>_</strong>种不同的排列。</p><p>解析：</p><p>第一个元素从左或右入队没有区别，以后每个元素都有从左和从右两种入队方式，即有2^{x-1}种方法。不要多余的去考虑中途有删除的情况。</p><p>答案： 8</p><p><strong>3、</strong>编号为1，2，3，4的四辆列车，顺序开进一个栈式结构的站台；则开出车站的顺序有<strong>__</strong>种可能。 注释：例如 1, 2, 3, 4 或 4, 3, 2，1 就是其中两种可能出站序列；而 4, 3, 1, 2 是 非法序列。</p><p>解析</p><p>出栈次序是经典的问题，与组合数学中的卡特兰数密切相关，以下只介绍朴素的思路。<br>先进站的车可以先开，也可以后开。只有一种情况不可能：编号大的车开出后，比其编号小的车反序开出。也即编号大的车开出后，编号比其小的车只能由大到小依次开出（中间可以插入编号更大的车，但此车后面的编号小的车也要遵守此规则）。例如312的开出顺序是不可能的。对所有车进行全排列共有4！ = 24种出法。</p><p>4开头的只能有一种：4321。所以少了3的全排列-1=5种（4312,4213,4231,4132,4123）。</p><p>3开头时，必须先2后1开出，先1后2时4的位置有三种：3124、3142、3412，所以少了三种。</p><p>1或2开头时，后面的车如果是4，则最后两辆必须是3、2或3、1。所以又少了1423、2413两种。</p><p>总共少了5+3+2=10种，有24-10=14种开出法。<br>下面用+表示进站，-表示出站：<br>1234：1+ ;1- ;2+ ;2- ;3+ ;3- ;4+ ;4-<br>1243：1+ ;1- ;2+ ;2- ;3+ ;4+ ;4- ;3-<br>1324：1+ ;1- ;2+ ;3+ ;3- ;2- ;4+ ;4-<br>1342：1+ ;1- ;2+ ;3+ ;3- ;4+ ;4- ;2-<br>1432：1+ ;1- ;2+ ;3+ ;4+ ;4- ;3- ;2-<br>2134：1+ ;2+ ;2- ;1- ;3+ ;3- ;4+ ;4-<br>2143：1+ ;2+ ;2- ;1- ;3+ ;4+ ;4- ;3-<br>2314：1+ ;2+ ;2- ;3+ ;3- ;1- ;4+ ;4-<br>2341：1+ ;2+ ;2- ;3+ ;3- ;4+ ;4- ;1-<br>2431：1+ ;2+ ;2- ;3+ ;4+ ;4- ;3- ;1-<br>3214：1+ ;2+ ;3+ ;3- ;2- ;1- ;4+ ;4-<br>3241：1+ ;2+ ;3+ ;3- ;2- ;4+ ;4- ;1-<br>3421：1+ ;2+ ;3+ ;3- ;4+ ;4- ;2- ;1-<br>4321：1+ ;2+ ;3+ ;4+ ;4- ;3- ;2- ;1-;</p><p>答案： 14</p><p>4、现有中缀表达式E=((100-4)/3+3<em>(36-7))</em>2。以下哪个是与E等价的后缀表达式？</p><p>A、( ( 100 4 – ) 3 / 3 ( 36 7 – ) <em> + ) 2 </em></p><p>B、<em> + / – 100 4 3 </em> 3 – 36 7 2</p><p>C、100 4 – 3 / 3 36 7 – <em> + 2 </em></p><p>D、<em> ( + / ( – 100 4 ) 3 </em> 3 ( – 36 7 ) ) 2</p><p><strong>解析</strong></p><p>题中中缀表达式用二叉树表示如图：</p><p>Infix expression is represented by binary tree as the following diagram:</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/b41318be78c500780502be66c42460fd.jpg" alt="explain-4-1.JPG"></p><p>5、以下循环队列的实现方式中，长度为n的队列，所能容纳的元素个数也为n的有:</p><p>A、只用front和rear两个指针标记队列的头和尾，两个指针均为实指</p><p>B、用front和rear两个指针标记队列的头和尾，并用整型变量len记录队列元素数</p><p>C、用front和rear两个指针标记队列的头和尾，并用布尔型变量empty记录队列是否为空</p><p>D、只用front和rear两个指针标记队列的头和尾，两个指针均为虚指</p><p>解析</p><p>只用front和rear两个指针标记队列的头和尾，无法区分空队列和满队列两种状态，所以只能容纳n-1个元素。而增加len或empty都可以区分这两种状态，因此可以容纳n个元素</p><p><img src="https://img-blog.csdn.net/20180815171700328?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构树题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%91%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%91%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1</strong>、给出一棵树的逻辑结构T=(N,R),其中：</p><p>N={A,B,C,D,E,F,G,H,I,J,K}</p><p>R={r}</p><p>r={(A,B),(B,E),(B,F),(F,G),(F,H),(A,C),(C,I),(C,J),(J,K),(A,D)}</p><p>试回答下列问题：</p><p>（1）哪个是F的父结点？</p><p>（2）哪些是B的子孙？</p><p>（3）以结点C为根的子树的深度是多少？</p><p>（注：<strong>根的层数为0，独根树深度为0，高度为1</strong>，其他题目同样如此）</p><p>解析</p><p><img src="http://i1.chinesemooc.org/course/formula/201602/a880a211d581cc920b9187a50c95c702.png" alt="2-1-1.png"></p><p>答案： B EFGH 2</p><p><strong>2、</strong>将下图的二叉树转换为对应的森林，按照后根次序列出其结点。</p><p><img src="http://i1.chinesemooc.org/course/formula/201709/97899b554eea320e15410c3292cec779.png" alt="Screen Shot 2017-09-07 at 16.03.02.png"></p><p>解析</p><p>转化后的森林如下所示：</p><p><img src="http://i1.chinesemooc.org/course/formula/201510/677917ac67fe8c5599c6a91cb872f201.png" alt="4.png"></p><p>答案： EBFCDAIJKHGL</p><p><img src="https://img-blog.csdn.net/20180816152403769?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>3、</strong>对于以下等价类，采用“加权合并规则”（也称“重量权衡合并规则”），进行并查运算，给出最后父节点索引序列。</p><p>8-9 3-2 7-4 5-9 6-1 8-6 7-3 2-5 8-0 //右指向左</p><p>注意：当合并大小相同的两棵树的时候，将第二棵树的根指向第一棵树的根；根节点的索引是它本身；数字之间用空格隔开。</p><p>解析：（合并时，结点数少的指向结点数多的）</p><p><img src="http://i1.chinesemooc.org/course/formula/201510/399e11791ae3edce668ba3f9f1bbd93f.png" alt="13.png"></p><p><img src="https://img-blog.csdn.net/20180816162747826?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案： 8 6 3 7 7 8 8 8 8 8</p><p><strong>4、</strong>若一个具有N个顶点，K条边的无向图是一个森林（N&gt;K且2K&gt;=N），则该森林有多少棵树？</p><p>解析</p><p>在一棵树中，结点比边多一个，即结点比边多几个就有几棵树。</p><p>答案： N-K</p><p><strong>5、</strong>一棵完全三叉树，下标为121的结点在第几层？（注：下标号从0开始，根的层数为0）</p><p>解析</p><p>第h层的下标是从(3^h-1)/2到(3^(h+1)-1)/2-1，</p><p>第5层的下标是从121到363。</p><p>答案： 5</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构检索题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A3%80%E7%B4%A2%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A3%80%E7%B4%A2%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>给定关键码序列26, 25, 20, 33, 21, 24, 45, 204, 42, 38, 29, 31，用散列法进行存储(本题采用闭散列方法解决冲突)，规定负载因子α=0.6。请给出最合理的除余法的散列函数。</p><p>A、H(key)=key % 17</p><p>B、H(key)=key % 23</p><p>C、H(key)=key % 19</p><p>D、H(key)=key % 20</p><blockquote><p>解析</p><p>在插入所有关键码后，负载因子最大为0.6。元素数目为12，散列表长度为12 / 0.6 = 20，小于20的最大质数为19。</p><p><img src="https://img-blog.csdn.net/20180820155433113?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p><strong>2、</strong>有两个整数的集合A,B，大小分别为n，m=O(log(n))，由顺序表存储，并且已经排好序，现在要求他们的交集，请问你设计的高效算法的复杂度是：</p><p>A、n</p><p>B、</p><p><img src="https://img-blog.csdn.net/20180801171515816?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>C、</p><p><img src="https://img-blog.csdn.net/20180801171514827?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>D、</p><p><img src="https://img-blog.csdn.net/20180801171517242?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><blockquote><p>解析</p><p>枚举每个集合B中的元素，去集合A中寻找是否存在相同的元素。枚举的复杂度是logn，寻找可以用二分查找，复杂度是logn，故为logn的平方</p><p>答案： B</p></blockquote><p><strong>3、</strong>折半查找有序表（4，6，10，12，20，30，50，70，88，100）。若查找表中元素58，则它将依次与表中（）比较大小，查找结果是失败</p><p>A、20，50</p><p>B、30，88，70，50</p><p>C、20，70，30，50</p><p>D、30，88，50</p><blockquote><p>解析</p><p>一共10个记录，先与第5个记录20比较，58&gt;20，所以继续查找右半部分，与70比较，58&lt;70，继续查找左半部分，与30比较，58&gt;30，继续查找右半部分，与50比较，查找结束。</p></blockquote><p><strong>4、</strong>在各种查找方法中，平均查找长度与结点个数n无关的查找方法是（ ）。</p><p>A、散列查找</p><p>B、顺序查找</p><p>C、二分查找</p><p>D、没有这样的查找方法使得平均查找长度和n无关</p><blockquote><p>解析</p><p>散列查找的平均查找长度只跟负载因子有关，而顺序查找平均查找长度是O(n)，二分查找平均查找长度是O(logn)</p></blockquote><p><strong>5、</strong>一个散列表的散列函数是h(key)=key%19，共有20个槽，用闭散列的线性探查方法。从空表开始，依次进行如下插入删除操作，问这些操作的平均检索长度是()（用整数或分数表示）</p><p>操作是：Add 26 Add 25 Add 24 Add 195 Del 26 Add 176</p><p>提示：</p><p>1.散列表中不能插入两个相同的关键码</p><p>2.结果请用一个最简分数数值表示，分号用/表示，例如四分之三写为：3/4</p><blockquote><p>解析</p><p>依次检索次数为1，1，1，4，1，5，故总次数1+1+1+4+1+5=13，故平均检索次数为13/6</p><p>答案： 13/6</p></blockquote><p><strong>6、</strong>有一个散列表，共有N个槽，采用双散列探查的闭散列方法解决冲突。经过一系列插入操作，当前散列表中有M个元素，负载因子a为0.4，即M/N=a=0.4。假设M,N都非常大，并且双散列探查方法近使得每一次探查的位置，可以近似为均匀分布（即等概率地探查每个槽）。当前对于某个关键码，近似估算不成功检索的平均检索长度：5/3</p><blockquote><p>解析：</p><p>关键点提示：不成功检索由多次hash碰撞和一次未碰撞构成，由题意得，碰撞的概率为a，为碰撞的概率为1-a。故不成功检索的检索长度l概率分布是如下形式的指数分布：</p><p><img src="https://img-blog.csdn.net/20180820160537216?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>计算</p><p><img src="https://img-blog.csdn.net/20180820160537382?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>，最后得到答案为5/3</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构概述题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>关于算法特性描述正确的有：</p><p>A、算法保证计算结果的正确性</p><p>B、组成算法的指令可以有限也可能无限</p><p>C、算法描述中下一步执行的步骤不确定</p><p>D、算法的有穷性指算法必须在有限步骤内结束</p><p>解析</p><p>算法保证计算结果的正确性。<br>指令必须有限<br>算法具有确定性<br>算法不能含有死循环，必须在有限步骤内结束</p><p><img src="https://img-blog.csdn.net/20180814113202414?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>以下哪种结构是逻辑结构，而与存储和运算无关：</p><p>A、队列(queue)</p><p>B、双链表(doubly linked list)</p><p>C、数组(array)</p><p>D、顺序表(Sequential list)</p><p>解析</p><p>队列：可以是顺序或链式存储，是逻辑结构<br>双链表：链式存储<br>数组：按索引值从小到大存放在一片相邻的连续区域，定义了存储结构<br>顺序表：按索引值从小到大存放在一片相邻的连续区域，定义了存储结构</p><p><strong>3、</strong>计算运行下列程序段后m的值：</p><p>n = 9; m = 0;</p><p>for (i=1;i&lt;=n;i++)</p><p>for (j = 2*i; j&lt;=n; j++)</p><p>m=m+1;</p><p>求m的值</p><p>解析</p><p>注意i从1到9全部遍历，j分别从2，4，6,…开始遍历到9，当i大于5时，循环不再对m进行操作.<br>i=1结束循环时，m=8；<br>i=2结束循环时，m=8+6=14；<br>i=3结束循环时，m=14+4=18；<br>i=4结束循环时，m=18+2=20；</p><p>答案： 20</p><p><strong>4、</strong>下列说法正确的是：</p><p>A、如果函数f(n)是O(g(n))，g(n)是O(h(n))，那么f(n)是O(h(n))</p><p><img src="https://img-blog.csdn.net/20180814135002979?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>B、如果函数f(n)是O(g(n))，g(n)是O(h(n))，那么f(n)+g(n)是O(h(n))</p><p><img src="https://img-blog.csdn.net/20180814135940436?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>C、如果a&gt;b&gt;1,logan是O(logbn)，但logbn不一定是O(logan)</p><p>解析：logan=log(n)/log(a),logbn=log(n)/log(b),所以前者与后者只差了一个常数项，所以logbn一定是O(logan)</p><p>x=logaN，a为底数 log2(8) = log8/log2=3</p><p>D、函数f(n)是O(g(n))，当常数a足够大时，一定有函数g(n)是O(af(n))</p><p>解析：当f(n)=n，g(n)=n*2=n*n， af(n)=a*n，无论a多大，g(n)都不可能是O(af(n))</p><p><strong>5、</strong>已知一个数组a的长度为n，求问下面这段代码的时间复杂度:</p><p>for (i=0,length=1;i&lt;n-1;i++){</p><p>for (j = i+1;j&lt;n &amp;&amp; a[j-1]&lt;=a[j];j++) //a[j-1]&lt;=a[j]有序</p><p>if(length&lt;j-i+1)</p><p>length=j-i+1;</p><p>}</p><p><img src="http://i1.chinesemooc.org/course/formula/201709/38447104e1faccad532ca6807c6a327d.png" alt="Screen Shot 2017-09-05 at 23.31.19.png"></p><p><strong>解析</strong></p><p>本代码实际上是求a中有序子数组中最长的长度。譬如，在[1, 8, 1, 2, 5, 0, 11, 9]中，最长的是[1, 2, 5]，长度为3 。其时间复杂度与a中元素的实际取值状态相关。 1)若a的所有元素是按照降序方式排列。则外层循环n-1次，每次内层只执行一次，整个开销为θ(n) 2)若a的所有元素是按照升序方式排列。则外层循环n-1次，每次内层需要执行n-i-1次，整个开销为θ(n^2) 所以，一般来说，时间复杂度是Ω(n)的，也是O(n^2)</p><p><strong>答案： A,B</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构索引题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B4%A2%E5%BC%95%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B4%A2%E5%BC%95%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>设有一个职工文件，并设该文件由教材中表10-1所示的5个记录组成，其中职工号为关键码。</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/427d79933b8996409acefa527a4ef364.jpg" alt></p><p>如下结构是什么类型的索引？</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/57a89b682a2584bf0f1f66012673da48.jpg" alt></p><p>A、多分树静态索引</p><p>B、倒排索引</p><p>C、动态索引</p><p>D、线性索引</p><p><strong>2、</strong>红黑树是一种扩充的二叉搜索树（BST）。给定一颗结点个数为n的红黑树在最坏的情况下，红黑树的删除结点操作的时间复杂度是（）</p><p>A、O(log n)</p><p>B、O(n)</p><p><strong>3、</strong>设有一棵阶m=3的B树，如图10-9所示：</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/162e551f6cb5c6d9c74d21ab9b1d15d8.jpg" alt></p><p>其中a, b, …, g是结点的名称，系统一块可以动态分配的结点叫h。可在说明插入过程时使用，结点内的整数为关键码。若在图中所示的B树中插入关键码55，请计算完成该插入所需要的访外次数（包括读磁盘和写磁盘）。</p><blockquote><p>答案： 6</p></blockquote><p><strong>4、</strong>假设按如下的方法修改从B树中删除元素的方式：如果一个结点既有最相邻的左兄弟也有最相邻的右兄弟，那么在合并前对两个兄弟都要作检查。从一棵高度为4的B树中删除元素时需要的最大磁盘访问次数？</p><p>注：一般而言, B树的层次都很少，查找B树路径中的结点是否能放在内存中，不必重复访问磁盘读取。</p><blockquote><p>答案： 14</p></blockquote><p><strong>5、</strong>假定一个计算机系统有4 096字节的磁盘块，每个磁盘的磁盘号可以用一个四字节的整数表示。要存储的每一条记录中4个字节是关键码，64个字节是数据字段。记录已经排序，顺序地存储在磁盘文件中。我们建立一个稠密索引，该线性索引的结构为：（每个文件磁盘块的最小关键码，该块磁盘的磁盘号），通过线性索引访问磁盘文件中的记录。</p><p>如果线性索引也存储在磁盘中（这样它的大小仅受二级索引的限制），而且使用4 096个字节的二级索引，二级索引中的每个单元引用线性索引的磁盘块中最小的关键码值。文件中最多可以存储多少条记录？（由于数字较大，可以用K,M作为单位表示，如32K）</p><p>A、128M</p><p>B、30K</p><p>C、256K</p><p>D、15M</p><blockquote><p>解析</p><p>4096/68=60.24 每块磁盘上可以存60条记录。</p><p>二级索引中每一条占8字节，所以共4096/8=512条，即线性索引占了512个磁盘。</p><p>线性索引的每个磁盘上有4096/8=512条索引，所以共512*512=256K条线性索引。</p><p>每条线性索引对应一块磁盘，所以共256K*60=15M条记录。</p></blockquote><p><strong>6、</strong>在什么情况下多分树静态索引比B+树的实现更有效率？</p><p>A、在系统数据库不稳定，并且系统没有时间进行文件再组织的情况下</p><p>B、在插入和删除操作比较少的情况下</p><p>C、在系统允许较频繁的文件再组织的情况下</p><p>D、在系统数据较稳定，并且需要支持高效的并行查找的情况下</p><p>E、在插入删除操作较多的情况下</p><blockquote><p>解析：</p><p>多分树静态索引适合较稳定的数据</p><p>多分树静态索引适合允许文件再组织的数据</p><p>B+树更适合修改较多的数据</p></blockquote><p><strong>7、</strong>假定有一个B+树，它的内部结点可以存储多达100个子女，叶结点可以存储多达15条记录（本题中的B+树把所有记录存放在叶结点上）。对2层的B+树，能够存储的最小记录数和最大记录数是多少？（用逗号隔开，格式如：0,15）</p><blockquote><p>答案： 16,1507</p></blockquote><p><strong>8、</strong>假定有一个B+树，它的内部结点可以存储多达100个子女，叶结点可以存储多达15条记录（本题中的B+树把所有记录存放在叶结点上）。对4层的B+树，能够存储的最小记录数和最大记录数是多少？（用逗号隔开，格式如：0,15）</p><blockquote><p>答案： 40000,15000000</p></blockquote><p><strong>9、</strong>假定一个计算机系统有4 096字节的磁盘块，每个磁盘的磁盘号可以用一个四字节的整数表示。要存储的每一条记录中4个字节是关键码，64个字节是数据字段。记录已经排序，顺序地存储在磁盘文件中。我们建立一个稠密索引，该线性索引的结构为：（每个文件磁盘块的最小关键码，该块磁盘的磁盘号），通过线性索引访问磁盘文件中的记录。</p><p>如果线性索引的大小是2MB。最多可以在磁盘文件中存储多少条记录？（由于数字较大，可以用K,M作为单位表示，如32K）</p><p>A、250K</p><p>B、15M</p><blockquote><p>解析：</p><p>4096/68=60.24 每块磁盘上可以存60条记录。</p><p>每个索引8字节，所以一共2MB/8B=0.25M条索引。</p><p>每条索引对应一块磁盘，即60条记录，所以总共最多60*0.25M=15M条记录。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构线性表题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>下面关于线性表的叙述中，正确的是</p><p>A、线性表采用顺序存储，必须占用一片连续的存储单元。</p><p>B、线性表采用顺序存储，便于进行插入和删除操作。</p><p>C、线性表采用链接存储，不必占用一片连续的存储单元。</p><p>D、线性表采用链接存储，便于插入和删除操作。</p><p>解析</p><p>顺序存储是按索引值从小到大存放在一片相邻的连续区域<br>采用链接存储，便于插入和删除操作，如果采用顺序存储，插入和删除时需要大量移动元素，参考数组的元素删除<br>线性表采用链接存储，在结点中存储link信息，不需占用连续存储单元<br>采用链接存储，便于插入和删除操作</p><p><strong>2、</strong>下面的叙述中正确的是：</p><p>A、线性表在链式存储时，查找第i个元素的时间与i的数值无关。</p><p>B、线性表在顺序存储时，查找第i个元素的时间与i的数值成正比。</p><p>C、</p><p>线性表在顺序存储时，查找第i个元素的时间与i的数值无关。</p><p>D、</p><p>线性表在链式存储时，插入第i个元素的时间与i的数值成正比。</p><p>解析</p><p>线性表在链式存储时，查找第i个元素的时间与i的数值无关。 因为存储空间是不连续的，需要从头或者尾结点开始查找元素，i越大，时间越长，时间不可能与i无关<br>线性表在顺序存储时，查找第i个元素的时间与i的数值成正比。 因为存储空间是连续的，直接由i可以得到元素位置<br>线性表在顺序存储时，查找第i个元素的时间与i的数值无关。 因为存储空间是连续的，直接由i可以得到元素位置<br>线性表在链式存储时，插入第i个元素的时间与i的数值成正比。 因为存储空间是不连续的，插入第i个元素不需要移动其他元素。但是在插入之前从头搜索到第i个元素的指针，所以插入时间跟i相关</p><p><strong>3、</strong>对于一个具有n个结点的单链表，在已知的结点*p后插入一个新结点的时间复杂度为O(1),在给定值为x的结点后插入一个新结点的时间复杂度为O(n)。</p><p>解析</p><p>已知结点后插入，不需要移动其他结点位置，所以为O(1) 2. 先要查找到值为x的结点，需要O(n),再插入，不需要移动其他结点位置，需要O(1)，总共需要O(n)+O(1)=O(n)</p><p><strong>4、</strong>带头结点head的循环链表的尾结点tail的特点是: <strong>_</strong></p><p>答案： tail-&gt;next=head</p><p><strong>5、</strong>完成在双循环链表结点p之后插入s的操作为：</p><p>A、p-&gt;next-&gt;prev=s; s-&gt;prev=p; s-&gt;next=p-&gt;next; p-&gt;next=s;</p><p>B、p-&gt;next-&gt;prev=s; p-&gt;next=s; s-&gt;prev=p; s-&gt;next=p-&gt;next;</p><p>C、s-&gt;prev=p; s-&gt;next=p-&gt;next; p-&gt;next=s; p-&gt;next-&gt;prev=s;</p><p>D、s-&gt;next=p-&gt;next; p-&gt;next-&gt;prev=s; s-&gt;prev=p; p-&gt;next=s;</p><p>解析</p><p>p-&gt;next-&gt;prev=s; s-&gt;prev=p; s-&gt;next=p-&gt;next; p-&gt;next=s; 最后更改p-&gt;next是正确的，否则会造成原来的p结点后来的next信息丢失<br>p-&gt;next-&gt;prev=s; p-&gt;next=s; s-&gt;prev=p; s-&gt;next=p-&gt;next; 先更改会造成原来的p结点后来的next信息丢失<br>s-&gt;prev=p; s-&gt;next=p-&gt;next; p-&gt;next=s; p-&gt;next-&gt;prev=s; 先更改p-&gt;next成s再更改p-&gt;next-&gt;prev，会造成原来的p结点后来的next信息丢失<br>s-&gt;next=p-&gt;next; p-&gt;next-&gt;prev=s; s-&gt;prev=p; p-&gt;next=s; 最后更改p-&gt;next是正确的，否则会造成原来的p结点后来的next信息丢失</p><p>答案： A,D</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构高级数据结构题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>在5x5的矩阵中，有2个非零元素，则稀疏因子为____。</p><p>答案： 0.08</p><p><strong>2、</strong>下列关于十字链表的表述正确的有：</p><p>A、十字链表的节点只需要记录非零元素的值，不需要记录它们在矩阵中的位置。</p><p>B、一个全由非零元素组成的矩阵，若使用十字链表表示，也将获得效率的提升。</p><p>C、十字链表的每个节点只有一个指向后继元素的指针。</p><p>D、应用十字链表做矩阵乘法时，时间复杂度是O((ta + tb) <em> p </em> n)。（假设矩阵A乘以矩阵B，A为p*m的矩阵，B为m*n的矩阵，A中行向量的非零元素个数最多为ta，B中列向量的非零元素个数最多为tb）</p><p>E、十字链表的节点记录了非零元素的值及它们在矩阵中的位置。</p><p>F、十字链表可以应用于稀疏矩阵的表示。</p><p><strong>3、</strong>图、线性表、可重入表、纯表的关系是（线性表）包含于（纯表）包含于（可重入表）包含于（图）。</p><p><strong>4、</strong>以下可重入表中哪些是循环表？</p><p>A、(L1: (L2: (L1, a)))</p><p>B、D(A:(c), B:(e), C:(a, L:(b, A, d)))</p><p>C、(L: (a, L))</p><p>D、(L1:(a, b), (L1, c, L2:(d)), (L2, e, L3:(f, g)), L3)</p><p>E、(L1: (a, b, L2(x, y)), L2, L3: (s, t, L4:(q, L5:(w, L3, v), r)))</p><p>F、(x1, (y1, (a1, a2), y3), x3, (z1, z2))</p><p><strong>5、</strong>现在有若干个有序的空闲块：1500,1000,500,2000,1200,500，有一个请求序列：500,600,1000,400,500,1000,2000，请问在最先适配、最佳适配、最差适配的策略下分配失败的次数分别是多少？</p><p>答案： 1 0 2</p><p><strong>6、</strong>下列关于Trie树和后缀树的说法中正确的有：</p><p>A、通用后缀树可以用来查找两个字符串的公共子串。</p><p>B、用Trie树存储的单词词典，检索一次的代价与单词的长度相关。</p><p>C、用Trie树存储的单词词典，检索一次的代价与词典中单词的数量相关。</p><p>D、利用后缀树可以方便地查找字符串的子串。</p><p>E、与后缀树相比，后缀数组实现简单，且时空效率高。</p><p><strong>7、</strong>字符串”analysis”建立后缀树后，一共有____个节点。</p><p>解析</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/a38e2311689acefd0fd4a49ab526e947.png" alt></p><p>答案： 10</p><p><strong>8、</strong>选项中哪个插入顺序可以得到这棵AVL树</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/d42b816abfe244c52050c504ddeab110.png" alt></p><p>A、6,15,3,5,4,1</p><p>B、15,6,3,5,4,1</p><p>C、6,15,5,3,1,4</p><p>D、6,15,3,5,1,4</p><p><strong>9、</strong>操作序列&lt;插入2，插入5，插入6，插入4，插入1，插入3，删除6&gt;，将形成哪棵splay树？</p><p>A、</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/63525c3354c5e80a721c2712dc34eb97.png" alt></p><p>B、</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/867eaf43648120e8158bf3090e59b6d3.png" alt></p><p>C、</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/f4a00621d89478efb5de9e92423ec75e.png" alt></p><p>D、</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/b88c1b6527600cb312746e52be64ba74.png" alt></p><p>答案： B</p><p><strong>10、</strong>请问字符串“ladygaga”的LCP数组是？（答案是7个数字，请用空格分隔）</p><p>解析</p><p>0 ladygaga</p><p>1 adygaga</p><p>2 dygaga</p><p>3 ygaga</p><p>4 gaga</p><p>5 aga</p><p>6 ga</p><p>7 a</p><p>SA: 7 1 5 2 6 4 0 3</p><p>LCP: 1 1 0 0 2 0 0</p><p>答案： 1 1 0 0 2 0 0</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成中断和异常题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>x86实模式下，若中断类型码为15H，则中断向量存放在从哪个地址开始的4个字节单元中。（答案用16进制数表示，如02ABCH）</p><p>答案： 00054h</p><p><strong>2、</strong>x86实模式下，若中断类型码为10H，则中断向量存放在从哪个地址开始的4个字节单元中。（答案用16进制数表示，如02ABCH）</p><p>答案： 00040h</p><p><strong>3、</strong>x86实模式下，若某中断向量对应的4字节内容分别是10H，24H，50H，68H（从低到高），则中断程序的入口地址为多少？（答案用16进制数表示，如02ABCH）</p><p>答案： 6a910h</p><p><strong>4、</strong>x86实模式下，若某中断向量对应的4字节内容分别是10H，34H，50H，78H（从低到高），则中断程序的入口地址为多少？（答案用16进制数表示，如02ABCH）</p><p>答案： 7b910h</p><p><strong>5、</strong>x86实模式下，若中断类型码为20H，中断服务程序的入口地址为5670H:1350H，试指出中断向量表中存放该中断向量的第3个字节（从低到高）单元的内容是什么？（答案用16进制数表示，如12H）</p><p>答案： 70h</p><p><strong>6、</strong>x86实模式下，若中断类型码为20H，中断服务程序的入口地址为5670H:1350H，试指出中断向量表中存放该中断向量的第2个字节（从低到高）单元的地址是什么？（答案用16进制数表示，如02ABCH）</p><p>答案： 00081h</p><p><strong>7、</strong>8086系统中，中断标志寄存器是哪一个？</p><p><strong>A、IF</strong></p><p>B、DF</p><p>C、TF</p><p>D、ZF</p><p>E、OF</p><p>F、CF</p><p><strong>8、</strong>中断处理一共分为六个步骤，请按照正确处理顺序为各个步骤排序，答案直接填写数字，如123456。</p><p>1 识别中断源</p><p>2 执行中断服务程序</p><p>3 关中断</p><p>4 恢复现场并返回</p><p>5 保存断点</p><p>6 保护现场</p><p>答案： 351624</p><p><strong>9、</strong>下列哪项操作是在中断处理过程中的“保护现场”步骤进行的？</p><p><strong>A、将中断服务程序中要使用的寄存器压入堆栈</strong></p><p><strong>B、将标志寄存器压入堆栈</strong></p><p>C、屏蔽其他中断请求</p><p>D、将发生中断处的指令地址压入堆栈</p><p>E、找到相应的中断服务程序的入口地址</p><p>F、开放中断，以便允许响应较高优先级的中断</p><p>G、将标志寄存器弹出堆栈</p><p><strong>10、</strong>下列哪些操作是在中断处理过程中的“恢复现场”步骤进行的？</p><p><strong>A、将中断服务程序中要使用的寄存器弹出堆栈</strong></p><p><strong>B、将标志寄存器弹出堆栈</strong></p><p><strong>C、执行中断返回指令</strong></p><p>D、将发生中断处的指令地址压入堆栈</p><p>E、将中断服务程序中要使用的寄存器压入堆栈</p><p>F、屏蔽其他中断请求</p><p><strong>11、</strong>下列关于除法错中断描述错误的是？</p><p><strong>A、除法错中断可以通过软件方法屏蔽</strong></p><p>B、除法错中断的中断类型号为0</p><p>C、DIV指令能够触发除法错中断</p><p>D、IDIV指令能够触发触发错中断</p><p>E、除法错中断属于内部中断</p><p><strong>12、</strong>下列关于溢出中断描述正确的是？</p><p><strong>A、溢出中断有时候会被处理器为空操作</strong></p><p><strong>B、溢出中断属于内部中断</strong></p><p>C、溢出中断的中断类型号为1</p><p>D、溢出中断的触发与标志位ZF有关</p><p>E、溢出中断只能跟在DIV指令之后使用</p><p><strong>13、</strong>下列关于单步中断描述正确的是？</p><p><strong>A、单步中断服务程序一般用于显示CPU内部各寄存器的内容</strong></p><p><strong>B、单步工作方式下，CPU每执行完一条指令，就会自动产生一个单步中断</strong></p><p>C、单步中断的中断类型号为4</p><p>D、单步中断不能通过软件方法屏蔽</p><p>E、单步中断的执行与OF标志位有关</p><p><strong>14、</strong>下列关于断点中断描述错误的是？</p><p><strong>A、断点中断可以通过软件方法屏蔽</strong></p><p>B、断点中断通常与单步中断结合使用</p><p>C、断点中断的中断服务程序通常显示CPU各寄存器的值</p><p>D、断点中断的中断类型号为3</p><p><strong>15、</strong>下列关于断点中断描述错误的是？</p><p><strong>A、断点中断可以通过软件方法屏蔽</strong></p><p>B、断点中断的中断服务程序通常显示CPU各寄存器的值</p><p>C、断点中断往往作为一种程序的调试手段</p><p>D、断点中断通常与单步中断结合使用</p><p><strong>16、</strong>下列x86程序实现的是什么功能？</p><p>MOV AH, 2CH</p><p>INT 21H</p><p><strong>A、读取时间</strong></p><p>B、输入字符</p><p>C、显示字符串</p><p>D、设置时间</p><p><strong>17、</strong>下列x86程序实现的是什么功能？</p><p>MOV AH, 2CH</p><p>INT 21H</p><p><strong>A、读取时间</strong></p><p>B、设置时间</p><p>C、输入字符</p><p>D、输出字符</p><p><strong>18、</strong>下列x86程序实现的是什么功能？</p><p>MOV AH， 0</p><p>MOV AL， 12H</p><p>INT 10H</p><p><strong>A、设置显示方式为640×480彩色图形</strong></p><p>B、设置光标位置</p><p>C、读时钟</p><p>D、设置显示方式为640×480单色图形</p><p><strong>19、</strong>下列x86程序实现的是什么功能？</p><p>MOV AH， 0</p><p>MOV AL， 12H</p><p>INT 10H</p><p><strong>A、设置显示方式为640×480彩色图形</strong></p><p>B、设置光标位置</p><p>C、读时钟</p><p>D、置时钟</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络链路层题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%93%BE%E8%B7%AF%E5%B1%82%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%93%BE%E8%B7%AF%E5%B1%82%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>在数据链路层中，接收方通过传输介质上是否有信号来判断是否有新的数据到达。（F）</p><p>解析：</p><p>通过成帧方法来标识一个帧的开始和结束</p><p><img src="https://img-blog.csdn.net/20180812223751306?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>数据链路层为网络层的“存储-转发”提供支持 （T）</p><p><img src="https://img-blog.csdn.net/20180812224006471?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br><strong>3、</strong>当用户在公共区域通过有线/无线局域网使用网络服务时，通常情况下，客户机通过什么来访问因特网？<br>A、 点-点链路<br>B、 共享信道  </p><p><strong>4、</strong>本课程中的ATM是指：<br>A、 异步传输模式(Asynchronous Transfer Mode异步传输模式)<br>B、 交错式图灵机<br>C、 同步传输模式  </p><p><strong>5、</strong>滑动窗口机制中，发送方每发出一帧，发送窗口上限前移一个位置；每收到一个确认，发送窗口的下限前移一个位置（F）</p><p>（下限） （上限）</p><p><img src="https://img-blog.csdn.net/20180814224226561?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180814224231861?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br><strong>6、</strong>对于全双工操作来说，接收方有数据要发，还要回复确认帧，可以采用哪种技术？<br>A、 累积确认<br>B、 普通确认<br>C、 稍待确认</p><p><img src="https://img-blog.csdn.net/20180814225713410?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br><strong>7、</strong>ARQ技术使得数据帧长度变长了，因此总体上降低了带宽利用率。（F）</p><p>解析：ARQ-Automatic Repeat reQuest自动重发检错</p><p><img src="https://img-blog.csdn.net/20180815215313956?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180815221132122?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180815215837647?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>  </p><p><strong>8、</strong>CRC编码可以实现100%检错。（F）</p><p><img src="https://img-blog.csdn.net/20180815222313664?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>  </p><p><strong>9、</strong>给定某个至多出现3位错的传输信道，如果要具备检出3个错码，同时能纠正一个错码的能力。试问编码所用的码集汉明距离应该为: <strong>5</strong></p><p><img src="https://img-blog.csdn.net/20180815223347130?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>e = 3 t = 1 d &gt;= 3 + 1 + 1 = 5</p><p><strong>10、</strong>PPP协议用什么特殊的字节模式来标识PPP帧的开始和结束？</p><p>A、01111110</p><p>B、01111111</p><p>C、01111100</p><p>D、01111101</p><p><img src="https://img-blog.csdn.net/20180815230023451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180815230848163?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>11、</strong>PPP协议不具有差错检验的能力。（F）</p><p><img src="https://img-blog.csdn.net/20180815231011614?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>12、</strong>在按需分配信道容量的异步控制方式中，集中式的优点有</p><p>A、不存在单点故障，系统稳定性高</p><p>B、可提供优先权等其他功能</p><p>C、没有额外延迟，传输效率高</p><p>D、每个节点的逻辑相对简单</p><p><img src="https://img-blog.csdn.net/20180818194700726?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>13、</strong>在一个采用CSMA/CD协议的网络中，传输介质是一根完整的电缆，传输速率为1 Gbps，电缆中的信号传播速度是200 000 km/s。若最小数据帧长度为8000比特，则最远的两个站点之间的距离最多为</p><p>A、3200m</p><p>B、800m</p><p>C、1600m</p><p>D、400m</p><blockquote><p>解析：发送时延 = 往返的传播时延。</p><p><img src="https://img-blog.csdn.net/2018081921532170?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p><strong>14、</strong>在截断二进制指数后退算法中，如果发生了12次碰撞，那么站点会在0到多少之间选择一个随机数？</p><p>A、1024</p><p>B、4096</p><p>C、4095</p><p>D、1023</p><p><img src="https://img-blog.csdn.net/20180819220533393?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>15、</strong>对于共享介质的无线传输来说，没有侦听到载波不等于信道为空，侦听到载波不能说明信道为忙。（T）</p><p><img src="https://img-blog.csdn.net/20180819231004730?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180819230945406?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>16、</strong>RTS控制帧具有较高的优先级，不需要和普通数据帧竞争信道。（F）</p><p><strong>17、</strong>下面哪种设备不可以隔离冲突域</p><p>A、中继器</p><p>B、网桥</p><p>C、交换机</p><p><strong>18、</strong>某以太网拓扑及交换机当前转发表如下图所示，主机A向主机C发送1个数据帧，主机C收到该帧后，向主机A发送一个确认帧，交换机对这两个帧的转发端口分别是？</p><p><img src="http://i1.chinesemooc.org/course/formula/201711/52412703c81ba1045c7406b770fae22d.png" alt="image.png"><img src="http://i1.chinesemooc.org/course/formula/201711/ee4d02c96fc5fd4ef2a453fe46888c44.png" alt="image.png"></p><p>A、{2，3}和{1}</p><p>B、{3}和{1}</p><p>C、{1，2，3}和{1}</p><p>D、{2，3}和{1，2}</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成单周期处理器题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8D%95%E5%91%A8%E6%9C%9F%E5%A4%84%E7%90%86%E5%99%A8%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8D%95%E5%91%A8%E6%9C%9F%E5%A4%84%E7%90%86%E5%99%A8%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>处理器设计的五个步骤如下，请正确排序。</p><p>1 连接组件建立数据通路</p><p>2 为数据通路选择合适的组件</p><p>3 集成控制信号，形成完整的控制逻辑</p><p>4 分析指令系统，得出对数据通路的需求</p><p>5 分析每条指令的实现，以确定控制信号</p><p>答案： 42153</p><p><strong>2、</strong>课程中提到的MIPS-lite指令子集（addu，subu，ori，lw，sw，beq）对ALU的需求有哪些？</p><p><strong>A、加法</strong></p><p><strong>B、减法</strong></p><p><strong>C、逻辑或</strong></p><p><strong>D、相等</strong></p><p>E、逻辑与</p><p>F、逻辑非</p><p>G、乘法</p><p>H、除法</p><p>I、左移</p><p>J、右移</p><p><strong>3、</strong>下列关于MIPS-lite指令子集对数据通路的需求描述正确的是？</p><p><strong>A、add指令与ori指令对寄存器堆的写操作需求不一样</strong></p><p><strong>B、lw指令需要符号扩展部件</strong></p><p><strong>C、lw指令与sw指令都需要数据存储器</strong></p><p>D、add指令需要零扩展部件</p><p>E、sub指令需要符号扩展部件</p><p>F、ori指令需要符号扩展部件</p><p><strong>4、</strong>下列关于运算指令的控制信号描述正确的是？</p><p><strong>A、add指令与ori指令的寄存器堆控制信号RegDst不同</strong></p><p><strong>B、add指令与ori指令的ALU源操作数控制信号ALUSrc不同</strong></p><p><strong>C、add指令与ori指令的ALU运算类型控制信号ALUctr不同</strong></p><p><strong>D、add指令的扩展部件控制信号ExtOp不唯一</strong></p><p>E、ori指令的扩展部件控制信号ExtOp不唯一</p><p>F、add指令与ori指令的数据存储器控制信号MemWr可以不相同</p><p><strong>5、</strong>下列关于访存指令的控制信号描述正确的是？</p><p><strong>A、lw指令与sw指令的ALU运算类型控制信号ALUctr相同</strong></p><p><strong>B、lw指令与sw指令的控制信号MemtoReg可以不相同</strong></p><p>C、lw指令与sw指令的寄存器堆控制信号RegDst一定相同</p><p>D、lw指令与sw指令的扩展部件控制信号ExtOp可以不相同</p><p>E、lw指令与sw指令的数据存储器控制信号MemWr可以不相同</p><p><strong>6、</strong>下列关于beq指令的执行描述正确的是？</p><p><strong>A、beq指令的寄存器堆控制信号RegDst是不唯一的</strong></p><p><strong>B、beq指令与lw指令的数据存储器控制信号MemWr是相同的</strong></p><p>C、beq指令与add指令的ALU运算类型控制信号ALUctr相同</p><p>D、beq指令的扩展部件控制信号ExtOp一定为sign</p><p>E、若ALU计算结果为零，则beq指令不需要执行PC+4操作</p><p><strong>7、</strong>在单周期处理器上执行beq指令，使用到了下列哪些部件？</p><p><strong>A、寄存器堆</strong></p><p><strong>B、ALU</strong></p><p>C、扩展部件（零扩展或符号扩展）</p><p>D、数据存储器</p><p><strong>8、</strong>在单周期处理器上执行add指令，使用到了下列哪些部件？</p><p><strong>A、寄存器堆</strong></p><p><strong>B、ALU</strong></p><p>C、扩展部件（零扩展或符号扩展）</p><p>D、数据存储器</p><p><strong>9、</strong>在单周期处理器上执行ori指令，使用到了下列哪些部件？</p><p><strong>A、扩展部件（零扩展或符号扩展）</strong></p><p><strong>B、寄存器堆</strong></p><p><strong>C、ALU</strong></p><p>D、数据存储器</p><p><strong>10、</strong>在单周期处理器上执行lw指令，使用到了下列哪些部件？</p><p><strong>A、扩展部件（零扩展或符号扩展）</strong></p><p><strong>B、数据存储器</strong></p><p><strong>C、寄存器堆</strong></p><p><strong>D、ALU</strong></p><p><strong>11、</strong>假设单周期处理器五个阶段的延迟分别为200ps（取指）、50ps（读寄存器）、200ps（ALU操作）、300ps（访存）、100ps（写寄存器），则sw指令的总延迟为多少ps？</p><p>答案： 750</p><p><strong>12、</strong>假设单周期处理器五个阶段的延迟分别为200ps（取指）、50ps（读寄存器）、200ps（ALU操作）、300ps（访存）、100ps（写寄存器），则lw指令的总延迟为多少ps？</p><p>答案： 850</p><p><strong>13、</strong>假设单周期处理器五个阶段的延迟分别为200ps（取指）、50ps（读寄存器）、200ps（ALU操作）、300ps（访存）、100ps（写寄存器），则add指令的总延迟为多少ps？</p><p>答案： 550</p><p><strong>14、</strong>假设单周期处理器五个阶段的延迟分别为200ps（取指）、50ps（读寄存器）、200ps（ALU操作）、300ps（访存）、100ps（写寄存器），则beq指令的总延迟为多少ps？</p><p>答案： 450</p><p><strong>15、</strong>假设一条指令的32位编码从高到低依次为Ins<31>, Ins<30>, ……, Ins<0>，则产生ExtOp控制信号需要用到指令编码中的多少位？</0></30></31></p><p><strong>A、6位</strong></p><p>B、12位</p><p>C、32位</p><p>D、1位</p><p><strong>16、</strong>假设一条指令的32位编码从高到低依次为Ins<31>, Ins<30>, ……, Ins<0>，则产生MemWr控制信号需要用到指令编码中的多少位？</0></30></31></p><p><strong>A、6位</strong></p><p>B、12位</p><p>C、32位</p><p>D、1位</p><p><strong>17、</strong>假设一条指令的32位编码从高到低依次为Ins<31>, Ins<30>, ……, Ins<0>，则产生ALUctr[0]控制信号需要用到指令编码中的多少位？</0></30></31></p><p><strong>A、12位</strong></p><p>B、6位</p><p>C、7位</p><p>D、26位</p><p>E、32位</p><p>F、</p><p>14位</p><p><strong>18、</strong>假设一条指令的32位编码从高到低依次为Ins<31>, Ins<30>, ……, Ins<0>，则产生RegWr控制信号需要用到指令编码中的多少位？</0></30></31></p><p><strong>A、12位</strong></p><p>B、6位</p><p>C、7位</p><p>D、26位</p><p>E、32位</p><p>F、14位</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成存储层次结构题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%AD%98%E5%82%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%AD%98%E5%82%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>下列哪些常用的设备是基于非易失性存储器的？</p><p><strong>A、固态硬盘（SSD）</strong></p><p><strong>B、机械硬盘</strong></p><p><strong>C、光盘</strong></p><p><strong>D、优盘（Flash）</strong></p><p><strong>E、BIOS ROM芯片</strong></p><p>F、SDRAM芯片</p><p>G、SRAM芯片</p><p><strong>2、</strong>按照课程中提供的SRAM结构图，在写入“0”的过程中，哪几个晶体管是处于连通状态？</p><p><strong>A、M3</strong></p><p><strong>B、M2</strong></p><p><strong>C、M5</strong></p><p><strong>D、M6</strong></p><p>E、M1</p><p>F、M4</p><p><strong>3、</strong>下面是有关SRAM和DRAM的叙述正确的是哪几项？</p><p><strong>A、DRAM结构比SRAM简单</strong></p><p><strong>B、DRAM功耗比SRAM低</strong></p><p><strong>C、DRAM要刷新，SRAM不要刷新</strong></p><p>D、单位容量的DRAM比SRAM成本高</p><p>E、单位容量的DRAM比SRAM速度快</p><p>F、单位容量的DRAM比SRAM面积大</p><p><strong>4、</strong>以PC133标准的SDRAM为例，时钟频率133MHz。设tRCD=15ns，CL=2，tRP=15ns。在正常的读操作情况下，从内存控制器发出行地址到内存输出第四个数据，需要多少个时钟周期？</p><p><strong>A、7</strong></p><p>B、4</p><p>C、12</p><p>D、5</p><p>E、6</p><p>F、8</p><p>G、9</p><p>H、15</p><p><strong>5、</strong>以PC133标准的SDRAM为例，时钟频率133MHz。设tRCD=15ns，CL=2，tRP=15ns。在正常的读操作情况下，从内存控制器发出行地址到内存输出第一个数据，需要多少个时钟周期？</p><p><strong>A、4</strong></p><p>B、2</p><p>C、3</p><p>D、5</p><p>E、8</p><p>F、12</p><p>G、15</p><p><strong>6、</strong>以PC133标准的SDRAM为例，时钟频率133MHz。设tRCD=22ns，CL=2，tRP=22ns。如果内存控制器需要发起两次不同行地址的读操作，每次读操作读出四个数据，那从发出第一个行地址到发出第二个行地址，最短需要多少个时钟周期？</p><p><strong>A、11</strong></p><p>B、4</p><p>C、7</p><p>D、5</p><p>E、8</p><p>F、10</p><p>G、15</p><p><strong>7、</strong>以PC133标准的SDRAM为例，时钟频率133MHz。设tRCD=15ns，CL=2，tRP=22ns。如果内存控制器需要发起两次不同行地址的读操作，每次读操作读出四个数据，那从发出第一个行地址到发出第二个行地址，最短需要多少个时钟周期？</p><p><strong>A、10</strong></p><p>B、4</p><p>C、7</p><p>D、5</p><p>E、8</p><p>F、11</p><p>G、15</p><p><strong>8、</strong>64-bit数据宽度的DDR-400 SDRAM的峰值带宽为3.2GB/s，核心时钟频率为200MHz，芯片内部采用了2位数据预取技术，其接口频率是多少？</p><p><strong>A、200MHz</strong></p><p>B、400MHz</p><p>C、800MHz</p><p>D、1600MHz</p><p>E、100MHz</p><p>F、1200MHz</p><p><strong>9、</strong>64-bit数据宽度的DDR3-1600 SDRAM的峰值带宽为12.8GB/s，接口时钟频率为800MHz，芯片内部采用了8位数据预取技术，其核心频率是多少？</p><p><strong>A、200MHz</strong></p><p>B、400MHz</p><p>C、800MHz</p><p>D、1600MHz</p><p>E、100MHz</p><p>F、1200MHz</p><p><strong>10、</strong>关于程序局部性的描述，正确的是哪几项？</p><p><strong>A、数组通常具有很好的空间局部性</strong></p><p><strong>B、循环通常具有很好的时间局部性</strong></p><p><strong>C、循环通常具有很好的空间局部性</strong></p><p>D、数组通常具有很好的时间局部性</p><p>E、链表通常具有很好的时间局部性</p><p>F、链表通常具有很好的空间局部性</p><p><strong>11、</strong>请阅读代码片段</p><p>sum = 0;</p><p>for (i = 0; i &lt; n; i++)</p><p>sum += a[i];</p><p>return sum;</p><p>在上述代码片段中，对数组a[]的使用体现了<strong>__</strong>局部性。</p><p>答案： 空间</p><p><strong>12、</strong>请阅读代码片段</p><p>sum = 0;</p><p>for (i = 0; i &lt; n; i++)</p><p>sum += a[i];</p><p>return sum;</p><p>在上述代码片段中，对变量sum的使用体现了<strong>_</strong>局部性。</p><p>答案： 时间</p><p><strong>13、</strong>一个容量为1GB的硬盘，如果不考虑冗余空间，那可以存储多少个二进制位的信息？（只填写数字，中间不带任何分隔符，后面不带单位）</p><p>答案： 8000000000</p><p><strong>14、</strong>一个容量为1GB的内存，如果不考虑冗余空间，那可以存储多少个二进制位的信息？（只填写数字，中间不带任何分隔符，后面不带单位）</p><p>答案： 8589934592</p><p><strong>15、</strong>一个传输率为100Mbps的以太网接口，每秒钟最多能输出多少个二进制位的信息？（只填写数字，中间不带任何分隔符，后面不带单位）</p><p>答案： 100000000</p><p><strong>16、</strong>一个传输率为100Mbps的内存接口，每秒钟最多能输出多少个二进制位的信息？（只填写数字，中间不带任何分隔符，后面不带单位）</p><p>答案： 100000000</p><p><strong>17、</strong>一个传输率为100Mbps的硬盘接口，每秒钟最多能输出多少个二进制位的信息？（只填写数字，中间不带任何分隔符，后面不带单位）</p><p>答案： 100000000</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成指令体系结构题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%8C%87%E4%BB%A4%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%8C%87%E4%BB%A4%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>下列关于CISC和RISC的描述错误的是？</p><p>A、CISC指令长度是不固定的</p><p>B、CISC指令的操作数必须预存于寄存器中</p><p>C、RISC指令长度是固定的</p><p>D、RISC指令的操作数必须预存于寄存器中</p><p>E、RISC架构的指令种类通常比CISC架构更少</p><p><strong>2、</strong>下列关于Intel处理器及其推出时间描述错误的是？</p><p>A、Intel 8086——1978年</p><p>B、Intel 80286——1982年</p><p>C、Intel Pentium——1993年</p><p>D、Intel PentiumPro——1995年</p><p>E、Intel 80386——1988年</p><p>F、Intel Core i7——2008年</p><p>G、Intel Core 2——2006年</p><p><strong>3、</strong>x86体系结构中，寄存器EAX长度为多少位？</p><p>A、8位</p><p>B、16位</p><p>C、32位</p><p>D、64位</p><p><strong>4、</strong>x86体系结构中，寄存器AX长度为多少位？</p><p>A、8位</p><p>B、16位</p><p>C、32位</p><p>D、64位</p><p><strong>5、</strong>IA-32寄存器模型中包括以下哪些寄存器？（多选题）</p><p>A、通用寄存器</p><p>B、指令指针寄存器</p><p>C、页面寄存器</p><p>D、标志寄存器</p><p>E、段寄存器</p><p><strong>6、</strong>8086系统中标志位CF的含义是？</p><p>A、溢出标志</p><p>B、零标志</p><p>C、符号标志</p><p>D、进位标志</p><p><strong>7、</strong>8086系统中标志位CF的含义是？</p><p>A、符号标志</p><p>B、奇偶标志</p><p>C、溢出标志</p><p>D、进位标志</p><p><strong>8、</strong>8086系统中标志位ZF的含义是？</p><p>A、符号标志</p><p>B、奇偶标志</p><p>C、溢出标志</p><p>D、进位标志</p><p>E、零标志</p><p><strong>9、</strong>8086系统中段寄存器DS的含义是？</p><p>A、代码段寄存器</p><p>B、附加段寄存器</p><p>C、数据段寄存器</p><p>D、堆栈段寄存器</p><p><strong>10、</strong>8086系统中段寄存器CS的含义是？</p><p>A、数据段寄存器</p><p>B、附加段寄存器</p><p>C、代码段寄存器</p><p>D、堆栈段寄存器</p><p><strong>11、</strong>设CS=2500H，DS=2400H，SS=2430H，BP=0200H，SI=0010H，DI=0206H，计算下列x86指令源操作数的物理地址：</p><p>MOV AX，[2000H]</p><p>A、4500H</p><p>B、27000H</p><p>C、26000H</p><p>D、4430H</p><p><strong>12、</strong>设CS=2500H，DS=2400H，SS=2430H，BP=0200H，SI=0010H，DI=0206H，计算下列x86指令源操作数的物理地址：</p><p>MOV AX，[BP+SI+4]</p><p>A、2714H</p><p>B、25214H</p><p>C、24514H</p><p>D、2614H</p><p><strong>13、</strong>设CS=2500H，DS=2400H，SS=2430H，BP=0200H，SI=0010H，DI=0206H，计算下列x86指令源操作数的物理地址：MOV AX，[DI+100H]</p><p>A、25306H</p><p>B、24606H</p><p>C、2806H</p><p>D、24306H</p><p>E、2706H</p><p>F、2736H</p><p><strong>14、</strong>设CS=2500H，DS=2400H，SS=2430H，BP=0200H，SI=0010H，DI=0206H，计算下列x86指令源操作数的物理地址：</p><p>MOV AX，[BP+SI+4]</p><p>A、24214H</p><p>B、2714H</p><p>C、24514H</p><p>D、2644H</p><p><strong>15、</strong>设CS=2500H，DS=2400H，SS=2430H，BP=0200H，SI=0010H，DI=0206H，计算下列x86指令源操作数的物理地址：</p><p>MOV AX，[2000H]</p><p>A、26300H</p><p>B、4500H</p><p>C、26000H</p><p>D、4400H</p><p><strong>16、</strong>下列x86指令中，哪些属于算术运算指令？（多选题）</p><p>A、ADD</p><p>B、DEC</p><p>C、MOV</p><p>D、IN</p><p>E、LEA</p><p>F、AND</p><p>G、SHL</p><p>H、MOVSB</p><p>I、CALL</p><p>J、JNZ</p><p>K、LOOP</p><p>L、MUL</p><p><strong>17、</strong>下列关于MIPS指令的主要特点说法错误的是？</p><p>A、指令长度固定</p><p>B、寻址模式简单</p><p>C、只有Load和Store指令可以访问存储器</p><p>D、需要优秀的编译器支持</p><p>E、指令数量多，且功能复杂</p><p><strong>18、</strong>MIPS按照指令的基本格式可以分为三种类型，以下不属于这三种类型的是？</p><p>A、R型指令</p><p>B、O型指令</p><p>C、M型指令</p><p>D、I型指令</p><p>E、J型指令</p><p><strong>19、</strong>MIPS按照指令的基本格式进行划分，可以分为几种？</p><p>A、1</p><p>B、2</p><p>C、3</p><p>D、4</p><p><strong>20、</strong>某MIPS指令的机器码是0x20A5FFFF，对应的汇编指令是什么？</p><p>A、addi $a2,$a2,-1</p><p>B、ori $a1,$a1,-1</p><p>C、ori $a2,$a2,-1</p><p>D、addi $a1,$a1,-1</p><p><strong>21、</strong>某MIPS指令的机器码是0x0005402A，对应的汇编指令是什么？</p><p>A、slt $a1,$0,$t0</p><p>B、or $v0,$0,$a1</p><p>C、or $a1,$0,$v0</p><p>D、slt $t0,$0,$a1</p><p><strong>22、</strong>阅读下面的x86汇编程序，回答问题。</p><p>设DS=1000H</p><p>MOV SI, 1250H</p><p>MOV DI, 1370H</p><p>MOV CL, 3</p><p>MOV AX, DS</p><p>MOV ES, AX</p><p>MOV BX, 5</p><p>STD</p><p>REP MOVSB</p><p>请问，在这次串传送操作中，完成了第一个元素的传送后，SI寄存器的值是什么？</p><p>A、124FH</p><p>B、1252H</p><p>C、1251</p><p>D、不确定</p><p><strong>23、</strong>阅读下面的x86汇编程序，回答问题。</p><p>设DS=1000H</p><p>MOV SI, 1250H</p><p>MOV DI, 1370H</p><p>MOV CL, 3</p><p>MOV AX, DS</p><p>MOV ES, AX</p><p>MOV BX, 5</p><p>STD</p><p>REP MOVSB</p><p>请问，在这次串传送操作中，完成了第一个元素的传送后，SI寄存器的值是什么？</p><p>A、124FH</p><p>B、1249</p><p>C、1249H</p><p>D、不确定</p><p><strong>24、</strong>阅读下面的x86汇编程序，回答问题。</p><p>设DS=1000H</p><p>MOV SI, 1250H</p><p>MOV DI, 1370H</p><p>MOV CL, 3</p><p>MOV AX, DS</p><p>MOV ES, AX</p><p>MOV BX, 5</p><p>STD</p><p>REP MOVSB</p><p>请问，在这次串传送操作中，完成了第一个元素的传送后，SI寄存器的值是什么？</p><p>A、124FH</p><p>B、1248H</p><p>C、1251H</p><p>D、1252H</p><p><strong>25、</strong>阅读下面的x86汇编程序，回答问题。</p><p>设DS=1000H</p><p>MOV SI, 1250H</p><p>MOV DI, 1370H</p><p>MOV CL, 3</p><p>MOV AX, DS</p><p>MOV ES, AX</p><p>MOV BX, 5</p><p>CLD</p><p>REP MOVSB</p><p>请问，这次串传送操作，总共传送了多少个字节的数据？</p><p>A、0个</p><p>B、3个</p><p>C、5个</p><p>D、不确定</p><p><strong>26、</strong>如果想用8086 CPU把内存中某个区域的1024个字节的数据传送到另一个区域，可以选用如下三种方法：</p><p>（1）只使用传送指令（MOV）；</p><p>（2）使用传送指令（MOV），并用条件转移指令建立循环语句的结构；</p><p>（3）使用串传送指令（MOVSB）以及必要的配合指令，不使用循环语句的结构。</p><p>请比较用这三种方法编写的程序，执行时访问存储器次数最少的是：</p><p>A、方法一</p><p>B、方法二</p><p>C、方法三</p><p>D、无法比较</p><p><strong>27、</strong>如果想用8086 CPU把内存中某个区域的1024个字节的数据传送到另一个区域，可以选用如下三种方法：</p><p>（1）只使用传送指令（MOV）；</p><p>（2）使用传送指令（MOV），并用条件转移指令建立循环语句的结构；</p><p>（3）使用串传送指令（MOVSB）以及必要的配合指令，不使用循环语句的结构。</p><p>请比较用这三种方法编写的程序，执行时访问存储器次数最多的是：</p><p>A、方法一</p><p>B、方法二</p><p>C、方法三</p><p>D、无法比较</p><p><strong>28、</strong>如果想用8086 CPU把内存中某个区域的1024个字节的数据传送到另一个区域，可以选用如下三种方法：</p><p>（1）只使用传送指令（MOV）；</p><p>（2）使用传送指令（MOV），并用条件转移指令建立循环语句的结构；</p><p>（3）使用串传送指令（MOVSB）以及必要的配合指令，不使用循环语句的结构。</p><p>请比较用这三种方法编写的程序，程序代码占用存储器空间最大的是：</p><p>A、方法1</p><p>B、方法2</p><p>C、方法3</p><p>D、无法比较</p><p><strong>29、</strong>很多x86指令的功能比较复杂，往往一条x86指令可以完成的功能，需要多条MIPS指令才能实现。请问下列x86指令中，哪些确定能够只用一条MIPS指令完成对应的功能？（注：只需考虑这条指令本身，不用考虑对后续指令的影响）</p><p>A、ADD ECX, 15H</p><p>B、MOV EAX, 28H</p><p>C、ADD EDX, EBX</p><p>D、ADD EAX, [13H]</p><p>E、MOV EDX, [EBX+11H]</p><p>F、ADD [EBX+ESI*4+200H], EAX</p><p>G、REP MOVSB</p><p>H、JZ LOOP_1</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成期末题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%9C%9F%E6%9C%AB%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%9C%9F%E6%9C%AB%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-第1个问题"><a href="#1-第1个问题" class="headerlink" title="1.第1个问题"></a>1.第1个问题</h2><p>以下人物中，没有参与电子计算机ENIAC研发工作的是</p><p>约翰•莫克利</p><p>约翰•埃克特</p><p>约翰•阿塔纳索夫</p><p>约翰•冯•诺依曼</p><p>第 2 个问题</p><h2 id="2-第-2-个问题"><a href="#2-第-2-个问题" class="headerlink" title="2. 第 2 个问题"></a>2. 第 2 个问题</h2><p>指令执行的四个基本步骤为</p><p>取指、译码、执行、写回</p><p>取指、读数、运算、完成</p><p>取指、发射、执行、访存</p><p>取指、分派、计算、提交</p><h2 id="3-第-3-个问题"><a href="#3-第-3-个问题" class="headerlink" title="3. 第 3 个问题"></a>3. 第 3 个问题</h2><p>以下属于冯•诺依曼计算机结构五大组成部分的是</p><p>控制器</p><p>加法器</p><p>存储器</p><p>链接器</p><p>寄存器</p><p>乘法器</p><p>编译器</p><h2 id="4-第-4-个问题"><a href="#4-第-4-个问题" class="headerlink" title="4. 第 4 个问题"></a>4. 第 4 个问题</h2><p>下面对RISC和CISC的描述中，错误的是：</p><p>CISC指令系统中的指令数目较多，有些指令的执行周期很长；而RISC指令系统中通常指令数目较少，指令的执行周期都较短。</p><p>CISC指令系统支持多种寻址方式，RISC指令系统支持的寻址方式较少。</p><p>CISC指令系统中的指令编码长度不固定；RISC指令系统中的指令编码长度固定，这样使得RISC机器可以获得了更短的代码长度。</p><p>CISC机器中的寄存器数目较少，函数参数必须通过栈来进行传递；RISC机器中的寄存器数目较多，只需要通过寄存器来传递参数。</p><h2 id="5-第-5-个问题"><a href="#5-第-5-个问题" class="headerlink" title="5. 第 5 个问题"></a>5. 第 5 个问题</h2><p>按两个32位源操作数所在位置划分，MIPS和x86的加法指令都能够支持的是</p><p>寄存器+立即数</p><p>存储器+立即数</p><p>寄存器+存储器</p><p>寄存器+寄存器</p><h2 id="6-第-6-个问题"><a href="#6-第-6-个问题" class="headerlink" title="6. 第 6 个问题"></a>6. 第 6 个问题</h2><p>关于x86指令构成，以下说法错误的是</p><p>指令中可以只包含操作数</p><p>操作数在操作码之后</p><p>指令长度是可变的</p><p>指令中可以只包含操作码</p><h2 id="7-第-7-个问题"><a href="#7-第-7-个问题" class="headerlink" title="7. 第 7 个问题"></a>7. 第 7 个问题</h2><p>分析如下MIPS机器代码，通过手工反汇编后分析程序功能。</p><p>Address        Instruction</p><p>0x00804000 0x00001025</p><p>…                  0x00441020</p><pre><code>0x20A5FFFF0x0005402A0x110000010x08201001</code></pre><p>如果将上述汇编语言代码还原成最有可能的C语言代码，应该是</p><p>a = 0;</p><p>do {</p><pre><code>a += b;c--;</code></pre><p>}</p><p>while(c &gt; 0);</p><p>a = 0;</p><p>while(c &gt; 0)</p><p>{</p><pre><code>a += b;c--;</code></pre><p>}</p><p>a = 0;</p><p>do {</p><pre><code>a += b;c++;</code></pre><p>}</p><p>while(c &lt; 0);</p><p>a = 0;</p><p>while(c &lt; 0)</p><p>{</p><pre><code>a += b;c++;</code></pre><p>}</p><h2 id="8-第-8-个问题"><a href="#8-第-8-个问题" class="headerlink" title="8. 第 8 个问题"></a>8. 第 8 个问题</h2><p>一个n位的行波进位加法器的门延迟数是</p><p>2n</p><p>2n+1</p><p>2n+2</p><p>2n+3</p><h2 id="9-第-9-个问题"><a href="#9-第-9-个问题" class="headerlink" title="9. 第 9 个问题"></a>9. 第 9 个问题</h2><p>在下图的超前进位加法器中，最晚产生的信号是</p><p><img src="https://d396qusza40orc.cloudfront.net/pkuco/images/final1.png" alt></p><p>S3</p><p>C3</p><p>C4</p><p>S2</p><h2 id="10-第-10-个问题"><a href="#10-第-10-个问题" class="headerlink" title="10. 第 10 个问题"></a>10. 第 10 个问题</h2><p>“因为乘法的中间结果是相互独立的，所以可以同时产生所有的中间结果，从而提高乘法器的工作频率”。这句话是否正确？</p><p>正确</p><p>不正确</p><h2 id="11-第-11-个问题"><a href="#11-第-11-个问题" class="headerlink" title="11. 第 11 个问题"></a>11. 第 11 个问题</h2><p>关于课程介绍的乘法器和除法器的共同点，以下哪些是正确的？</p><p>都需要使用加法器进行中间结果的运算</p><p>都可以通过并行产生中间结果提高效率</p><p>32位运算都需要64位寄存器保存操作数或运算结果</p><p>都需要一个或多个带移位功能的寄存器</p><h2 id="12-第-12-个问题"><a href="#12-第-12-个问题" class="headerlink" title="12. 第 12 个问题"></a>12. 第 12 个问题</h2><p>在课程介绍的单周期处理器中，哪条指令的延迟最长？</p><p>addu rd, rs, rt</p><p>beq rs, rt, imm16</p><p>sw rt, imm16(rs)</p><p>ori rt, rs, imm16</p><p>lw rt, imm16(rs)</p><h2 id="13-第-13-个问题"><a href="#13-第-13-个问题" class="headerlink" title="13. 第 13 个问题"></a>13. 第 13 个问题</h2><p>在课程介绍的单周期处理器中，哪些指令会用到ALU？</p><p>addu rd, rs, rt</p><p>beq rs, rt, imm16</p><p>sw rt, imm16(rs)</p><p>ori rt, rs, imm16</p><p>lw rt, imm16(rs)</p><h2 id="14-第-14-个问题"><a href="#14-第-14-个问题" class="headerlink" title="14. 第 14 个问题"></a>14. 第 14 个问题</h2><p>下面对流水线技术的描述，正确的是：</p><p>流水级划分应尽量均衡，吞吐率会受到最慢的流水级影响。</p><p>流水线技术不仅能够提高执行指令的吞吐率，还能减少单条指令的执行时间。</p><p>不断加深流水线级数，总能获得性能上的提升。</p><p>指令间的数据相关可能会引发数据冒险，可以通过数据转发或暂停流水线来解决。</p><h2 id="15-第-15-个问题"><a href="#15-第-15-个问题" class="headerlink" title="15. 第 15 个问题"></a>15. 第 15 个问题</h2><p>若处理器实现了三级流水线，每一级流水线实际需要的运行时间分别为2ns、2ns和1ns，则此处理器不停顿地执行完毕10条指令需要的时间为：</p><p>21ns</p><p>22ns</p><p>23ns</p><p>24ns</p><h2 id="16-第-16-个问题"><a href="#16-第-16-个问题" class="headerlink" title="16. 第 16 个问题"></a>16. 第 16 个问题</h2><p>若向一个SRAM单元写入1，则需置BL=1，~BL=0，WL=1。请问，此时SRAM结构图中的晶体管M1~M6哪些处于连通状态？</p><p><img src="https://d396qusza40orc.cloudfront.net/pkuco/images/final2.png" alt></p><p>M1</p><p>M2</p><p>M3</p><p>M4</p><p>M5</p><p>M6</p><h2 id="17-第-17-个问题"><a href="#17-第-17-个问题" class="headerlink" title="17. 第 17 个问题"></a>17. 第 17 个问题</h2><p>对比SRAM和DRAM的实现结构，在哪些方面DRAM具有优势？</p><p>功耗</p><p>重量</p><p>成本</p><p>集成度</p><p>访问速度</p><p>抗干扰</p><h2 id="18-第-18-个问题"><a href="#18-第-18-个问题" class="headerlink" title="18. 第 18 个问题"></a>18. 第 18 个问题</h2><p>一个正常运行的PC133内存（SDR SDRAM），其主要时序参数tRCD=23ns，tRP=23ns，CL=3。如果当前没有已经激活的行，那一次读数据访问需要多少个时钟周期才能得到第一个数据？</p><p>3</p><p>6</p><p>9</p><p>12</p><h2 id="19-第-19-个问题"><a href="#19-第-19-个问题" class="headerlink" title="19. 第 19 个问题"></a>19. 第 19 个问题</h2><p>如果直接映射高速缓存（Cache）的大小是4KB，并且块大小（block）大小为32字节。请问它每路（way）有多少行（line）？</p><p>128</p><p>64</p><p>32</p><p>1</p><h2 id="20-第-20-个问题"><a href="#20-第-20-个问题" class="headerlink" title="20. 第 20 个问题"></a>20. 第 20 个问题</h2><p>如果数据访问的地址序列为0-&gt;4-&gt;16-&gt;132-&gt;232-&gt;4096-&gt;160（以字节为单位），请问一共发生多少次替换？</p><p>0</p><p>1</p><p>2</p><p>3</p><h2 id="21-第-21-个问题"><a href="#21-第-21-个问题" class="headerlink" title="21. 第 21 个问题"></a>21. 第 21 个问题</h2><p>8086系统的中断向量表中，若从0000H:005CH单元开始由低地址到高地址依次存放30H、40H、00H和B0H四个字节，则相应的中断类型码和中断服务程序的入口地址分别为 <strong>__</strong>和<strong>__</strong>。（十六进制的字母用大写，高位的0不可忽略不写；请在两个答案之间换行）</p><h2 id="22-第-22-个问题"><a href="#22-第-22-个问题" class="headerlink" title="22. 第 22 个问题"></a>22. 第 22 个问题</h2><p>下图指示了可屏蔽中断的响应和处理过程，其中哪个步骤是在读取中断向量？</p><p><img src="https://d396qusza40orc.cloudfront.net/pkuco/images/final3.png" alt></p><p>1</p><p>2</p><p>3</p><p>4</p><p>6</p><p>9</p><h2 id="23-第-23-个问题"><a href="#23-第-23-个问题" class="headerlink" title="23. 第 23 个问题"></a>23. 第 23 个问题</h2><p>比较程序控制、中断控制和DMA三种方式，以下哪些属于中断控制方式的特点？</p><p>外设与存储器间直接进行数据传送</p><p>需要CPU反复查询外设的状态</p><p>控制程序的编写最为简单</p><p>外设和存储器之间的数据交换由CPU承担</p><p>CPU可以和外设并行工作</p><p>外设具有申请服务的主动权</p><p>数据要经过CPU中的通用寄存器中转</p><h2 id="24-第-24-个问题"><a href="#24-第-24-个问题" class="headerlink" title="24. 第 24 个问题"></a>24. 第 24 个问题</h2><p>比较程序控制、中断控制和DMA三种方式，以下哪些属于DMA方式的特点？</p><p>控制程序的编写最为简单</p><p>外设具有申请服务的主动权</p><p>外设与存储器间直接进行数据传送</p><p>需要CPU反复查询外设的状态</p><p>外设和存储器之间的数据交换由CPU承担</p><p>CPU可以和外设并行工作</p><p>数据要经过CPU中的通用寄存器中转</p><h2 id="25-第-25-个问题"><a href="#25-第-25-个问题" class="headerlink" title="25. 第 25 个问题"></a>25. 第 25 个问题</h2><p>以使用独立DMAC进行外设到内存的传送为例（结构简图如下），主要过程可分为如下8步：</p><p>（1）CPU设置DMAC内部配置寄存器</p><p>（2）</p><p>（3）I/O接口向DMAC发出DMA传送申请</p><p>（4）</p><p>（5）</p><p>（6）</p><p>（7）重复第（5）（6）步，直到本次DMA传送完成</p><p>（8）返回第（2）步，等待下一次DMA传送申请</p><p><img src="https://d396qusza40orc.cloudfront.net/pkuco/images/final4.png" alt></p><p>现需将下列操作填入步骤中空缺的内容，应该按照什么顺序填入？</p><p>a. DMAC向存储器发起总线写传输</p><p>b. DMAC响应I/O接口的申请</p><p>c. DMAC处于空闲等待状态</p><p>d. DMAC向I/O接口发起总线读传输</p><p>adcb</p><p>bdac</p><p>cbda</p><p>dbac</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成概论题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%A6%82%E8%AE%BA%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%A6%82%E8%AE%BA%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>下列哪些定律属于计算机行业的著名“定律”？</p><p><strong>A、摩尔定律</strong></p><p><strong>B、反摩尔定律</strong></p><p>C、墨菲定律</p><p>D、马太效应</p><p>E、木桶定律</p><p><strong>2、</strong>当前摩尔定律的常见表述是</p><p>A、当价格不变时，集成电路可容纳的晶体管数数量，约每隔6个月便会增加一倍，性能也将提升一倍。</p><p>B、当价格不变时，集成电路可容纳的晶体管数数量，约每隔12个月便会增加一倍，性能也将提升一倍。</p><p><strong>C、当价格不变时，集成电路可容纳的晶体管数数量，约每隔18个月便会增加一倍，性能也将提升一倍。</strong></p><p>D、当价格不变时，集成电路可容纳的晶体管数数量，约每隔24个月便会增加一倍，性能也将提升一倍。</p><p><strong>3、</strong>下列关于反摩尔定律的表述正确的是</p><p>A、一个IT公司如果今天和6个月前卖掉同样多，同样的产品，它的营业额就要降一半。</p><p>B、一个IT公司如果今天和12个月前卖掉同样多，同样的产品，它的营业额就要降一半。</p><p><strong>C、一个IT公司如果今天和18个月前卖掉同样多，同样的产品，它的营业额就要降一半。</strong></p><p>D、一个IT公司如果今天和24个月前卖掉同样多，同样的产品，它的营业额就要降一半。</p><p><strong>4、</strong>在计算机结构的简化模型中，下列哪个寄存器是用于记录存储单元地址的？</p><p><strong>A、MAR</strong></p><p>B、MDR</p><p>C、IR</p><p>D、PC</p><p>E、RO</p><p><strong>5、</strong>在指令的取指阶段，CPU中的MAR的内容来自哪里？</p><p>A、IR</p><p>B、MDR</p><p>C、R0</p><p><strong>D、PC</strong></p><p>E、ALI</p><p><strong>6、</strong>在指令的取指阶段，CPU中的MDR的内容会送到哪里？</p><p>A、PC</p><p>B、MDR</p><p>C、R0</p><p><strong>D、IR</strong></p><p>E、ALU</p><p><strong>7、</strong>执行一条指令的全过程中，指令的编码会出现在CPU中的哪些部件？</p><p><strong>A、MDR</strong></p><p><strong>B、IR</strong></p><p>C、R0</p><p>D、R1</p><p>E、PC</p><p>F、ALU</p><p><strong>8、</strong>课程视频中讲解的指令是“ADD R0, [6]”，如果换成“ADD [6], R0”，则在执行该条指令的过程中，会读几次存储器？</p><p>A、0次</p><p>B、1次</p><p><strong>C、2次</strong></p><p>D、3次</p><p>E、4次</p><p><strong>9、</strong>课程视频中讲解的指令是“ADD R0, [6]”，如果换成“ADD [6], R0”，则在执行该条指令的过程中，会写几次存储器？</p><p>A、0次</p><p><strong>B、1次</strong></p><p>C、2次</p><p>D、3次</p><p>E、4次</p><p><strong>10、</strong>课程视频中讲解的指令是“ADD R0, [6]”，如果换成“ADD R0, R1”，则在执行该条指令的过程中，会访问几次存储器？</p><p>A、0次</p><p><strong>B、1次</strong></p><p>C、2次</p><p>D、3次</p><p>E、4次</p><p><strong>11、</strong>哪位人物被称为“现代电子计算机之父”？</p><p><strong>A、冯•诺依曼</strong></p><p>B、阿兰•麦席森•图灵</p><p>C、戈登•摩尔</p><p>D、史蒂夫•乔布斯</p><p>E、安迪•格鲁夫</p><p>F、比尔•盖茨</p><p><strong>12、</strong>下列关于EDVAC的描述正确的是</p><p><strong>A、全称为“离散变量自动电子计算机”</strong></p><p>B、世界上第一台通用电子计算机</p><p>C、使用十进制</p><p>D、使用晶体管</p><p>E、第一台采用冯•诺依曼结构的计算机</p><p><strong>13、</strong>下列关于冯•诺依曼结构描述错误的是</p><p><strong>A、数据与程序采用十进制的方式进行存储</strong></p><p>B、最早出自《关于EDVAC的报告草案》</p><p>C、采用“存储程序”的思想</p><p>D、主要由五大部分组成</p><p>E、工作时自动从存储器中取出指令加以执行</p><p><strong>14、</strong>下列关于冯•诺依曼结构计算机中英文对照关系错误的是</p><p><strong>A、管理器——M</strong></p><p>B、运算器——CA</p><p>C、控制器——CC</p><p>D、输入设备——I</p><p>E、外部记录设备——R</p><p>F、输出设备——O</p><p><strong>15、</strong>下列关于冯•诺依曼结构计算机英文缩写对照关系错误的是</p><p><strong>A、R——Register</strong></p><p>B、CA——Central Arithmetical</p><p>C、CC——Central Control</p><p>D、M——Memory</p><p>E、O——Output</p><p>F、I——Input</p><p><strong>16、</strong>现代计算机主存储器一般是以什么单位来进行划分的？</p><p><strong>A、字节</strong></p><p>B、比特</p><p>C、双字</p><p>D、扇区</p><p>E、波特</p><p>F、字长</p><p><strong>17、</strong>下列哪些部件并称为计算机中的“大脑”？</p><p><strong>A、控制器</strong></p><p><strong>B、运算器</strong></p><p>C、外部存储器</p><p>D、主存储器</p><p>E、寄存器</p><p><strong>18、</strong>下列各选项中，哪一项不属于课程视频中提到的计算机执行指令的步骤？</p><p><strong>A、完成</strong></p><p><strong>B、结束</strong></p><p>C、取指</p><p>D、译码</p><p>E、回写</p><p>F、执行</p><p><strong>19、</strong>下列关于计算机执行指令的步骤顺序正确的是？</p><p><strong>A、取指，译码，执行，回写</strong></p><p>B、取指，执行，译码，回写</p><p>C、取指，译码，回写，执行</p><p>D、译码，取指，执行，回写</p><p>E、取指，回写，译码，执行</p><p><strong>20、</strong>下列关于Intel 4004描述错误的是？</p><p><strong>A、字长为8位</strong></p><p>B、世界上第一个商业微处理器</p><p>C、晶体管数量为2250</p><p>D、面积为4.2mm×3.2mm</p><p>E、1971年诞生</p><p>F、10微米的制造工艺</p><p>G、主频为740KHz</p><p><strong>21、</strong>在传统台式机主板的南北桥结构中，下列设备中哪些属于南桥？</p><p><strong>A、U盘</strong></p><p><strong>B、硬盘</strong></p><p><strong>C、鼠标</strong></p><p><strong>D、键盘</strong></p><p>E、PCIe显卡</p><p>F、内存</p><p>G、CPU</p><p><strong>22、</strong>下列哪些设备属于输入设备？</p><p><strong>A、鼠标</strong></p><p><strong>B、键盘</strong></p><p><strong>C、麦克风</strong></p><p><strong>D、摄像头</strong></p><p>E、显示器</p><p>F、音箱</p><p>G、打印机</p><p><strong>23、</strong>下列哪些设备属于输出设备？</p><p><strong>A、显示器</strong></p><p><strong>B、音箱</strong></p><p><strong>C、打印机</strong></p><p>D、鼠标</p><p>E、键盘</p><p>F、麦克风</p><p>G、摄像头</p><p><strong>24、</strong>CPU向存储器发起访问时，通过什么总线告知存储器当前的访问是读还是写？</p><p><strong>A、控制总线</strong></p><p>B、数据总线</p><p>C、地址总线</p><p>D、方向总线</p><p>E、读写总线</p><p><strong>25、</strong>下列哪项不属于系统总线？</p><p><strong>A、逻辑总线</strong></p><p><strong>B、运算总线</strong></p><p>C、数据总线</p><p>D、地址总线</p><p>E、控制总线</p><p><strong>26、</strong>对于按字节编址的存储器来说，控制器有10条地址线，对应的存储空间有多大？</p><p><strong>A、1KB</strong></p><p>B、10KB</p><p>C、1MB</p><p>D、10MB</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成算术逻辑单元题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E7%AE%97%E6%9C%AF%E9%80%BB%E8%BE%91%E5%8D%95%E5%85%83%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E7%AE%97%E6%9C%AF%E9%80%BB%E8%BE%91%E5%8D%95%E5%85%83%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>下列哪些和时间相关的名词，是属于D触发器的特性？</p><p>A、CLK-to-Q time</p><p>B、Setup time</p><p>C、Hold time</p><p>D、Select time</p><p>E、Input time</p><p>F、Output time</p><p>G、Access time</p><p><strong>2、</strong>对于一个4输入或门，当输入信号为1010和0110，输出信号为</p><p>A、1110</p><p>B、1100</p><p>C、0011</p><p>D、0110</p><p>E、1010</p><p>F、1011</p><p><strong>3、</strong>对于一个4输入与门，当输入信号为1010和0110，输出信号为：</p><p>A、0010</p><p>B、1110</p><p>C、1001</p><p>D、0110</p><p>E、1010</p><p>F、1011</p><p><strong>4、</strong>对于一个4输入异或门，当输入信号为1010和0110，输出信号为：</p><p>A、1100</p><p>B、1110</p><p>C、0011</p><p>D、0110</p><p>E、1010</p><p>F、1011</p><p><strong>5、</strong>要对一个有符号的立即数和某个寄存器中的值进行加法运算，应当用的MIPS指令是：</p><p>A、addi rt,rs,imm</p><p>B、and rt,rs,imm</p><p>C、andi rt, imm, rs</p><p>D、addi rt, imm, rs</p><p>E、andi rt,rs,imm</p><p>F、addiu rt,rs,imm</p><p><strong>6、</strong>要对一个立即数和某个寄存器中的值进行逻辑与运算，应当用的MIPS指令是：</p><p>A、andi rt,rs,imm</p><p>B、and rt,rs,imm</p><p>C、addi rt, imm, rs</p><p>D、addiu rt,rs,imm</p><p>E、addi rt,rs,imm</p><p><strong>7、</strong>对于半加器和全加器，下列描述正确的是：</p><p>A、半加器虽能产生进位输出，但半加器本身并不能处理进位输入</p><p>B、半加器能产生进位输出，也能处理进位输入</p><p>C、半加器既不能产生进位输出，也不能处理进位输入</p><p>D、全加器虽能产生进位输出，但全加器本身并不能处理进位输入</p><p>E、全加器既不能产生进位输出，也不能处理进位输入</p><p>F、全加器虽能处理进位输入，但全加器本身并不能产生进位输出</p><p><strong>8、</strong>对于如图所示的全加器，当A、B和进位输入Cin分别为1、0、1时，输出端口S和进位输出Cout为：</p><p><img src="http://i1.chinesemooc.org/course/formula/201512/582717e28643ba436930475d1cf7dede.jpg" alt></p><p>A、S=0，输出进位1</p><p>B、S=1，输出进位1</p><p>C、S=1，输出进位0</p><p>D、S=0，输出进位0</p><p><strong>9、</strong>对于“溢出”和“进位”，下列描述正确的是：</p><p>A、“溢出”只针对有符号数</p><p>B、有“进位”时，不一定有“溢出”</p><p>C、有“溢出”时，不一定有“进位”</p><p>D、有“进位”时，一定有“溢出”</p><p>E、“溢出”可以针对无符号数</p><p><strong>10、</strong>“溢出”的检测方法是：</p><p>A、“最高位的进位输入”不等于“最高位的进位输出”</p><p>B、</p><p>“最高位的进位输入”等于“最高位的进位输出”</p><p>C、</p><p>“最高位的进位输入”不等于“次高位的进位输出”</p><p>D、</p><p>“最高位的进位输入”等于“次高位的进位输出”</p><p>E、</p><p>“最高位的进位输入”不等于“最低位的进位输出”</p><p>F、</p><p>“最高位的进位输入”等于“最低位的进位输出”</p><p><strong>11、</strong>MIPS和x86对溢出的处理方式是：</p><p>A、对于MIPS，提供两类不同的指令分别处理，分别是：将操作数看做有符号数，发生“溢出”时产生异常；将操作数看做无符号数，不处理“溢出”</p><p>B、对于x86，利用程序状态字寄存器中的OF位，发生溢出，设置OF=1</p><p>C、对于MIPS，提供两类不同的指令分别处理，分别是：将操作数看做无符号数，发生“溢出”时产生异常；将操作数看做有符号数，不处理“溢出”</p><p>D、对于x86，利用程序状态字寄存器中的ZF位，发生溢出，设置ZF=1</p><p>E、对于x86，利用标志寄存器中的OF位，发生溢出，设置OF=0</p><p><strong>12、</strong>为了使十进制表示的算式（8-3）能够在二进制补码加法器上运算，可以表示的形式为：</p><p>A、1000+1101</p><p>B、0011+0011</p><p>C、1000-1011</p><p>D、1000-0011</p><p>E、0011+1101</p><p>F、1000+1011</p><p><strong>13、</strong>假设一个基本逻辑门延迟为T，对于4-bit行波进位加法器的关键路径延迟为：</p><p><img src="http://i1.chinesemooc.org/course/formula/201512/826a5959e5292caa0cf57c759e70e205.jpg" alt></p><p>A、9T</p><p>B、6T</p><p>C、7T</p><p>D、8T</p><p>E、10T</p><p>F、11T</p><p><strong>14、</strong>超前进行加法器相对于行波进位加法器的优化思路是：</p><p>A、提前计算出“进位输出信号”</p><p>B、简化电路实现的复杂程度</p><p>C、适用更宽位的加法运算</p><p>D、节省基本逻辑门之间的连线</p><p><strong>15、</strong>关于行波进位加法器和超前进位加法器各自的优缺点描述正确的是：</p><p>√</p><p>A、</p><p>行波进位加法器门延迟比超前进位加法器更长</p><p>B、</p><p>行波进位加法器电路实现相对简单</p><p>C、</p><p>超前进位加法器门延迟比行波进位加法器更长</p><p>D、</p><p>行波进位加法器电路实现更加复杂</p><p>E、</p><p>超前进位加法器电路实现更加简单</p><p><strong>16、</strong>对于4-bit超前进位加法器，如何用生成信号Gi和传播信号Pi表示 C2：</p><p>A、G1+P1•G0+P1•P0•C0</p><p>B、P1•G0+P1•P0•C0</p><p>C、G1+P1+P0</p><p>D、G1+P1+P0•C0•G0</p><p>E、G1 +P1•P0•C0</p><p>F、G1+P1+C0</p><p><strong>17、</strong>假设一个基本逻辑门延迟为T，4-bit超前进位加法器产生和的门延迟为：</p><p>A、4T</p><p>B、3T</p><p>C、5T</p><p>D、6T</p><p>E、7T</p><p>F、9T</p><p><strong>18、</strong>假设一个基本逻辑门延迟为T，超前进位加法器计算Ci+1产生的门延迟为：</p><p>A、3T</p><p>B、4T</p><p>C、5T</p><p>D、6T</p><p>E、7T</p><p><strong>19、</strong>以32-bit加法器为例，综合考虑性能和电路复杂度，一般会选择哪种形式实现：</p><p>A、采用多个小规模的超前进位加法器拼接而成</p><p>B、采用多个小规模的行波进位加法器和超前进位加法器拼接而成</p><p>C、完全采用行波进位加法器</p><p>D、采用一个完整的超前进位加法器</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成输入输出设备题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>I/O接口的主要功能有哪些？</p><p><strong>A、数据缓冲</strong></p><p><strong>B、提供联络信息</strong></p><p><strong>C、信号与信息格式的转换</strong></p><p><strong>D、设备选择</strong></p><p>E、提高处理器性能</p><p>F、提高处理器工作频率</p><p><strong>2、</strong>现代个人计算机中，哪些设备可以看做是I/O接口？</p><p><strong>A、显卡</strong></p><p><strong>B、并口控制芯片</strong></p><p><strong>C、南桥</strong></p><p><strong>D、网卡</strong></p><p>E、硬盘</p><p>F、SD卡</p><p>G、耳机</p><p>H、内存控制器</p><p><strong>3、</strong>下列关于I/O端口和存储器统一编址的说法哪些是正确的？</p><p><strong>A、可以利用访问存储器的指令来访存I/O，功能比较齐全</strong></p><p><strong>B、CPU内部的控制逻辑较为简单</strong></p><p><strong>C、可以减少CPU的引脚数目</strong></p><p>D、可以增大用户的存储器地址空间</p><p>E、I/O指令的执行速度更快</p><p>F、I/O指令的地址译码更方便</p><p><strong>4、</strong>下列关于I/O端口和存储器分开编址的说法哪些是错误的？</p><p><strong>A、可以减少CPU的引脚数目</strong></p><p>B、I/O端口不会减少用户的存储器地址空间</p><p>C、I/O指令的执行速度更快</p><p>D、I/O指令的地址译码更方便</p><p><strong>5、</strong>下列哪条x86指令实现了把寄存器AL的内容写入端口70H？</p><p>A、IN 70H，AL</p><p><strong>B、OUT 70H，AL</strong></p><p>C、OUT AL，70H</p><p>D、IN AL， 70H</p><p><strong>6、</strong>下列哪条x86指令实现了把端口70H的内容读入到寄存器AL？</p><p><strong>A、IN AL， 70H</strong></p><p>B、IN 70H，AL</p><p>C、OUT AL，70H</p><p>D、OUT 70H，AL</p><p><strong>7、</strong>下列哪些是无条件传送方式的特点？</p><p><strong>A、控制程序简单</strong></p><p><strong>B、只适用于简单外设的操作</strong></p><p><strong>C、对外设要求低</strong></p><p>D、操作流程较为复杂</p><p>E、CPU不需要参与数据传输</p><p><strong>8、</strong>下列哪些是程序查询方式的特点？</p><p><strong>A、比无条件传送方式准确可靠</strong></p><p><strong>B、查询外设状态占用了大量的时间</strong></p><p>C、CPU不需要参与数据传输</p><p>D、只适用于简单外设操作</p><p><strong>9、</strong>请按照正确的程序查询数据输出过程，给下列各个步骤排序，答案直接填写数字，如123456。</p><p>1 CPU执行指令，将数据写到接口的“输出缓冲寄存器”</p><p>2 在这个过程中，CPU反复执行指令从“状态寄存器”中读出状态字，直到</p><p>发现“输出缓冲空”，然后开始下一个输出过程，继续输出新数据</p><p>3 外设发现“输出准备好”信号有效后，从“并行数据输出”信号线上接收</p><p>数据，并将“输出回答”信号置为有效</p><p>4 接口发现“输出回答”信号有效后，将“状态寄存器”中的状态位“输出</p><p>缓冲空”置为有效</p><p>5 接口将数据发到“并行数据输出”信号线上，并将“输出准备好”信号置</p><p>为有效</p><p>6 CPU执行指令，将控制字写入接口的“控制寄存器”，从而设置接口的工</p><p>作模式</p><p>答案： 615342</p><p><strong>10、</strong>请按照正确的程序查询数据输入过程，给下列各个步骤排序，答案直接填写数字，如123456。</p><p>1 外设将数据发到“并行数据输入”信号线上，并将“输入准备好”信号置</p><p>为有效</p><p>2 接口将“输入回答”信号置为无效，等待外设输入新数据</p><p>3 接口将“状态寄存器”中的状态位“输入缓冲满”置为有效</p><p>4 系统初始化时，CPU执行指令，将控制字写入接口的“控制寄存器”，设</p><p>置接口的工作模式</p><p>5 在上述过程中，CPU反复执行指令从“状态寄存器”中读出状态字，直到</p><p>发现“输入缓冲满”，然后执行指令从“输入缓冲寄存器”中读出数据</p><p>6 接口发现“输入准备好”信号有效后，从“并行数据输入”信号线上接收</p><p>数据，放入“输入缓冲寄存器”，并将“输入回答”信号置为有效，阻止</p><p>外设输入新数据</p><p>答案： 416352</p><p><strong>11、</strong>下列关于中断控制方式的描述哪些是正确的？</p><p><strong>A、CPU可以和外设并行工作，提高了工作效率</strong></p><p><strong>B、外围设备具有申请服务的主动权</strong></p><p>C、一定程度上满足了I/O处理的实时性要求</p><p>D、CPU不再需要参与数据传输</p><p>E、需要反复检查状态位</p><p><strong>12、</strong>x86 CPU的外部中断有两大类：可屏蔽中断和（）中断？</p><p>答案： 非屏蔽</p><p><strong>13、</strong>8086系统中，假设同时发生了溢出中断，单步中断和可屏蔽中断，则哪个中断会被优先处理？</p><p><strong>A、溢出中断</strong></p><p>B、单步中断</p><p>C、可屏蔽中断</p><p>D、任意中断都有可能被优先处理</p><p><strong>14、</strong>请给下列DMA方式进行数据传输的主要步骤进行排序，答案直接填写数字，如1234567</p><p>1、CPU设置DMAC内部配置寄存器</p><p>2、重复总线读写直到本次DMA传送完成</p><p>3、DMAC响应I/O接口的申请</p><p>4、DMAC向I/O接口发起总线读传输</p><p>5、DMAC处于空闲等待状态</p><p>6、I/O接口向DMAC发出DMA传送申请</p><p>7、DMAC向存储器发起总线写传输</p><p>答案： 1563472</p><p><strong>15、</strong>DMA控制器初始化时，至少要配置哪些参数？</p><p><strong>A、源地址的初始值</strong></p><p><strong>B、传送时的地址增减方式</strong></p><p><strong>C、目的地址的初始值</strong></p><p>D、待传送数据的长度</p><p>E、DMA控制器的时钟频率</p><p>F、传送接口的数据位宽</p><p><strong>16、</strong>现代个人计算机中，哪些设备通常是自带DMA控制器的？</p><p><strong>A、显卡</strong></p><p><strong>B、网卡</strong></p><p><strong>C、声卡</strong></p><p>D、内存</p><p>E、键盘</p><p>F、鼠标</p><p>G、打印机</p><p><strong>17、</strong>关于I/O的各种控制方式，下列哪些说法是正确的？</p><p><strong>A、DMA方式不需要CPU干预数据传送</strong></p><p><strong>B、中断方式需要保护和恢复现场</strong></p><p><strong>C、DMA方式需要和程序控制方式或者中断方式配合使用</strong></p><p>D、DMA方式数据需要先存入CPU中，在转到内存中</p><p>E、中断方式的效率总比程序控制的效率要高</p><p>F、程序控制方式需要反复读取状态寄存器</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概论题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1.</strong>  以下不属于计算机网络的特征的是：</p><p>A、计算机具备独立计算能力</p><p>B、地理上集中计算机形成网络 <strong>（计算机必须在地理上是分散的）</strong></p><p>C、所有计算机通过一个通信系统连接在一起</p><p>D、提供多种资源共享</p><p><strong>2.</strong> 网络覆盖的范围介于局域网和广域网之间的是城域网 ( Y )</p><p><strong>解析：</strong>体域网（Body Area Network）：围绕人的身体，可用于监视和记录人体健康信号，主要用于医疗领域</p><p>个域网 （Personal Area Network）：覆盖的地理范围通常围绕一个人通信用的设备</p><p>局域网 （Local Area Network）：覆盖的地理范围通常为一个办公室，一座建筑，一个园区，一个企业…</p><p>城域网 （Metropolitan Area Network）：覆盖的地理范围通常为一座城市</p><p>广域网（Wide Area Network）：覆盖范围可达数百公里或数千公里</p><p><strong>3.</strong> 无线局域网中wifi的组网方式是</p><p>A、用户终端通过无线介质连接到一个提供无线接入功能的高性能基站</p><p>B、所有主机都连接到一个网络专用设备，以竞争的方式使用信道</p><p>C、节点之间通过点-点链路连接成一定拓扑结构的网状形式</p><p><strong>D、所有用户终端通过**</strong>无线介质<strong><strong>连接到一个</strong></strong>提供无线接入功能的网络专用设备**</p><p><strong>4、</strong>主机A向主机B发送100个包，途径一个交换机，队列长度为40，队内没有正在排队的包，假设100个包同时到达，那么传输的丢包率是<strong>_</strong>% <strong>60</strong></p><p><strong>5、</strong>传输时延是指使数据块从节点进入传输介质所需要的时间。<strong>（Y）</strong></p><p><strong>解析：</strong>发送时延=传输时延。第一个bite比特到最后一个比特全部进入传输介质。</p><p><strong>6、</strong>在分组交换（包交换）网络中，主要取决于网络拥塞程度的时间延迟是</p><p>A、传播延迟</p><p>B、处理延迟</p><p><strong>C、排队延迟</strong></p><p>D、传输延迟</p><p><img src="https://img-blog.csdn.net/2018072823060621?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>7、</strong>下列选项中，不属于网络体系结构所描述的内容是：</p><p>A、网络的层次</p><p>B、每一层使用的协议</p><p><strong>C、协议的内部实现细节</strong></p><p>D、每一层必须完成的功能</p><p><strong>8、</strong>不属于应用层协议的有：</p><p>A、SMTP：简单邮件传输协议，采用TCP连接，端口号25</p><p><strong>B、ICMP**</strong>（网络层，允许主机或者路由器报告差错和异常情况）**</p><p>C、FTP：文件传输协议</p><p>D. TELNET</p><p><strong>9、</strong>(3分)在计算机网络参考模型中，第N层与它之上的第N+1层的关系是：</p><p>A、第N层使用第N+1层提供的协议</p><p><strong>B、第N层为第N+1层提供服务</strong></p><p>C、第N+1层将从第N层接收的报文添加一个报头</p><p>D、第N层使用第N+1层提供的服务</p><p><strong>10.</strong> 计算机网络最基本的功能是：</p><p><strong>A. 数据通信</strong> B. 资源共享 C. 分布式处理 D. 信息综合处理</p><p><strong>11.</strong> 不属于计算机网络功能的是：</p><p>A. 提高系统可靠性 B. 提高工作效率 C. 分散数据的综合处理 <strong>D. 使各计算机</strong>相对独立<strong>（更加紧密）</strong></p><p><strong>12.</strong> 计算机网络系统的基本组成是：</p><p>A. 局域网与广域网 B. 本地计算机网和通信网 <strong>C. 通信子网和资源子网</strong> D. 服务器和工作站</p><p><strong>解析：</strong>计算机网络从逻辑功能上可以分为资源子网和通信子网。</p><p>通信子网：传输介质，通信设备和相应的网络协议（网桥，交换机，路由器）</p><p>资源子网：终端，联网外部设备，各种软件资源</p><p><strong>13.</strong> 局域网和广域网的差异不仅在它们所覆盖的范围不同，还主要在于它们：</p><p>A. 所使用的介质不同 <strong>B. 所使用的协议不同</strong> C. 所能支持的通信量不同 D. 所提供的服务不同</p><p><strong>解析：</strong>所使用的网络技术也不同。广域网使用点对点交换技术，局域网使用广播技术。</p><p>局域网是基于广播技术发展起来的网络，广域网是基于交换技术发展起来的网络。</p><p>局域网与广域网的互联是通过路由器实现。</p><p><strong>14.</strong> 计算机网络拓扑结构主要取决于它的：<strong>通信子网（物理层，链路层，网络层）</strong></p><p><strong>15.</strong> 广域网的拓扑结构通常采用：<strong>网状形</strong></p><p><strong>16.</strong> 在n个结点的星形拓扑结构中，有<strong>（n-1）</strong>条物理链路。</p><p><strong>解析：</strong></p><p><strong><img src="https://img-blog.csdn.net/20180729090344884?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></strong></p><p><strong>17.</strong> 关于广播式网络的说法中错误的是：</p><p>A. 共享广播信道 B. 不存在路由选择问题 C. 可以不要网络层 <strong>D. 不需要服务访问点</strong></p><p><strong>解析：</strong>广播式网络共享广播信道，通常作为局域网的一种通信方式，工作在链路层。数据链路层使用物理层的服务必须通过服务访问点实现。</p><p><strong>18.</strong> 下列哪项是分组交换网络的缺点：</p><p>A. 信道利用率低 <strong>B. 附加信息开销大</strong> C. 传播时延大 D. 不同规格的终端很难相互通信</p><p><strong>解析：</strong>分组交换要求把数据分成大小相当的小数据片，每个片都要加上控制信息（如目的地址）。</p><p>分组交换信道利用率高。</p><p>传播时延取决于传播介质及收发双方的距离。</p><p>对于各种交换方式，不同规格的终端都很难相互通信。</p><p><strong>19.</strong> 1968年6月，世界上最早的计算机网络是：<strong>ARPAnet（Internet的前身）</strong></p><p><strong>20.</strong> 下列不是对网络模型进行分层的目标的是：</p><p>A. 提供标准语言 <strong>B. 定义功能执行的方法</strong> C. 定义标准界面 D. 增加功能之间的独立性</p><p><img src="https://img-blog.csdn.net/20180729095959639?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>21.</strong> 将用户数据分成一个个数据块传输的优点不包括：</p><p>A. 减少延迟时间</p><p>B. 提高错误控制效率</p><p>C. 使多个应用更公平地使用共享通信介质</p><p><strong>D. 有效数据在协议数据单元PDU中所占比例更大</strong></p><p><strong>解析：</strong>分组交换要求把数据分成大小相当的小数据片，每个片都要加上控制信息（如目的地址）。</p><p><strong>22.</strong> 协议是指在<strong>（不同结点对等实体）</strong>之间进行通信的规则或约定。</p><p><strong>23.</strong> 计算机网络中OSI参考模型的3个主要概念：<strong>服务，接口，协议</strong></p><p><strong>24.</strong> 国际标准化组织ISO设计出了开放互联的基本参考模型OSI/RM，7层网络参考模型，但实际执行的国际标准是TCP/IP标准。</p><p><strong>25.</strong> OSI参考模型中的数据链路层不提供下列哪种功能</p><p>A. 物理寻址 B. 流量控制 C. 差错检验 D. 拥塞控制<strong>（网络层和传输层才具有拥塞控制的功能）</strong></p><p><img src="https://img-blog.csdn.net/20180729111832913?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>26.</strong> 能够最好地描述OSI数据链路层功能的是：</p><p>A. 提供用户和网络的接口（应用层的功能）</p><p>B. 处理信号通过介质的传输（物理层的功能）</p><p>C. 控制报文通过网络的路由选择（网络层的功能）</p><p><strong>D. 保证数据正确的顺序和完整性**</strong>（流量控制，差错检测）**</p><p><strong>27.</strong> 数据由端系统A传送至端系统B时，不参与数据封装工作的是：</p><p><strong>A. 物理层：以0，1比特流的形式透明地传输数据链路层递交的帧</strong></p><p><strong>解析：</strong>物理层不存在下一层，不用封装。</p><p><strong>28.</strong> 在OSI中，实现端到端的应答，分组排序和流量控制功能的协议层是：</p><p>A. 会话层 B. 网络层 <strong>C. 传输层</strong> D. 数据链路层</p><p><strong>解析：</strong>只有传输层及以上各层的通信才能称为端到端。会话层管理不同主机间进程的对话。传输层实现应答，分组排序和流量控制功能。</p><p><strong>29.</strong> ISO/OSI参考模型中，可同时提供无连接服务和面向连接服务的是：<strong>网络层</strong></p><p><strong>解析：ISO/OSI中，</strong>网络层支持无连接和面向连接的通信。传输层仅支持面向连接的通信。</p><p><strong>TCP/IP中，</strong>网络层仅支持无连接的通信。传输层支持无连接和面向连接的通信。</p><p><strong>30.</strong> 在OSI模型中，自下向上第一个提供端到端服务（通过端口号）是：<strong>传输层</strong></p><p><strong>31.</strong> 在OSI模型中，当两台计算机进行文件传输时，为了防止中间出现网络故障而重传整个文件的情况，可通过在文件中插入同步点来解决，这个动作发生在：<strong>会话层</strong></p><p><strong>解析：</strong>会话层的两个主要服务是会话管理和同步。会话层使用校验点可使通信会话在通信失效时从校验点继续恢复通信，实现数据同步。</p><p>表示层实现数据格式转化，数据加密。</p><p><img src="https://img-blog.csdn.net/20180729151638544?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>32.</strong> 下列说法中，正确描述了OSI参考模型中数据的封装过程的是：</p><p>A. 数据链路层在分组上仅增加了源物理地址和目的物理地址 （也增加了控制信息）</p><p><strong>B. 网络层将高层协议产生的数据封装成分组，并增加了第三层的地址和控制信息</strong></p><p>C. 传输层将数据流封装成数据帧，并增加了可靠性和流控制信息（数据链路层的传输单位是帧）</p><p>D. 表示层将高层协议产生的数据分割成数据段，并增加了相应的源和目的端口信息（传输层负责增加相应的源和目的端口信息）</p><p><strong>33.</strong>  在OSI模型中，路由器（网络层），交换机Switch（数据链路层），集线器Hub（物理层）实现的最高功能层分别是：<strong>3，2，1</strong></p><p><strong>解析：</strong>集线器是一个多端口的中继器。交换机是一个多端口的网桥。</p><p><strong>34.</strong> 因特网采用的核心技术是：<strong>TCP/IP</strong></p><p><strong>解析：</strong>没有协议，网络的作用也无从谈起。因特网中应用的网络协议是采用分组交换技术的TCP/IP协议。</p><p><strong>35. TCP/IP</strong>模型中<strong>，**</strong>（传输层）**处理关于可靠性，流量控制和错误校验等问题。</p><p><strong>解析：</strong> 网络层提供无连接不可靠的数据报服务。（与OSI模型区分开）</p><p><strong>36.</strong> 上下邻层实体之间的接口称为服务访问点，应用层的服务访问点也称为：<strong>用户界面</strong></p><p><strong>解析：（1）</strong>物理层的服务访问点是网卡接口。</p><p><strong>（2）</strong>数据链路层的服务访问点是MAC地址（网卡地址）。</p><p><strong>（3）</strong>网络层的服务访问点是IP地址（网络地址）。</p><p><strong>（4）</strong>传输层的服务访问点是端口号。</p><p><strong>37. 在OSI模型中，（数据链路层，网络层，传输层）</strong>提供流量控制功能。传输层提供主机进程之间的数据的传送。</p><p><strong>解析：（1）</strong>对等层之间传送协议数据单元PDU</p><p><strong>（2）</strong>传输层传输报文段TCP和用户数据报UDP</p><p><strong>（3）</strong>网络层传输分组/数据报</p><p><strong>（4）</strong>数据链路层传输帧</p><p><strong>（5）</strong>物理层传输比特</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成流水线题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>MIPS的五级流水线结构中，计算访存的地址是在哪个阶段完成的？</p><p>A、执行</p><p>B、取指</p><p>C、译码</p><p>D、访存</p><p>E、回写</p><p><strong>2、</strong>MIPS的五级流水线结构中，读寄存器堆是在哪个阶段完成的？</p><p>A、译码</p><p>B、取指</p><p>C、执行</p><p>D、访存</p><p>E、回写</p><p><strong>3、</strong>一个五级流水线的处理器，时钟频率为1GHz。指定运行一段5条指令的代码，在流水线不停顿的情况下，需要多长时间？</p><p>A、9ns</p><p>B、50ns</p><p>C、25ns</p><p>D、8ns</p><p><strong>4、</strong>一个五级流水线的处理器，时钟频率为2GHz。指定运行一段8条指令的代码，在流水线不停顿的情况下，需要多长时间？</p><p>A、6ns</p><p>B、8ns</p><p>C、2ns</p><p>D、4ns</p><p><strong>5、</strong>一个五级流水线的处理器，时钟频率为1GHz。指定运行一段5条指令的代码，在流水线不停顿的情况下，需要多长时间？</p><p>A、9ns</p><p>B、25ns</p><p>C、50ns</p><p>D、5ns</p><p><strong>6、</strong>一个五级流水线的处理器，时钟频率为2GHz。指定运行一段8条指令的代码，在流水线不停顿的情况下，需要多长时间？</p><p>A、6ns</p><p>B、2ns</p><p>C、8ns</p><p>D、12ns</p><p><strong>7、</strong>一个五级流水线的处理器，时钟频率为1GHz。指定运行一段5条指令的代码，在流水线不停顿的情况下，需要多长时间？</p><p>A、9ns</p><p>B、10ns</p><p>C、15ns</p><p>D、25ns</p><p><strong>8、</strong>一个五级流水线的处理器，时钟频率为2GHz。指定运行一段8条指令的代码，在流水线不停顿的情况下，需要多长时间？</p><p>A、6ns</p><p>B、16ns</p><p>C、10ns</p><p>D、2ns</p><p><strong>9、</strong>以下哪些是处理器采用流水线技术带来的影响？</p><p>A、提高指令的吞吐率</p><p>B、提高时钟频率</p><p>C、简化硬件电路</p><p>D、降低功耗</p><p><strong>10、</strong>以下哪些是处理器采用流水线技术带来的影响？</p><p>A、提高指令的吞吐率</p><p>B、增加指令的执行时间</p><p>C、减少指令的执行时间</p><p>D、简化硬件电路</p><p><strong>11、</strong>以下哪些是处理器采用流水线技术的目的？</p><p>A、提高指令的吞吐率</p><p>B、简化硬件电路</p><p>C、提高时钟频率</p><p>D、降低功耗</p><p><strong>12、</strong>以下哪些是处理器采用流水线技术的目的？</p><p>A、提高指令的吞吐率</p><p>B、增加单条指令执行时间</p><p>C、降低功耗</p><p>D、简化硬件电路</p><p><strong>13、</strong>以下哪些是处理器采用流水线技术带来的影响？</p><p>A、增加指令的执行时间</p><p>B、提高指令的吞吐率</p><p>C、简化硬件电路</p><p>D、降低功耗</p><p><strong>14、</strong>以下哪些是处理器采用流水线技术的目的？</p><p>A、提高指令的吞吐率</p><p>B、减少单条指令执行时间</p><p>C、降低功耗</p><p>D、提高时钟频率</p><p><strong>15、</strong>在流水线处理器设计时，如果划分出五个相对独立的阶段，延迟分别为：250ps，150ps，200ps，300ps，250ps。而还需要加入的流水线寄存器延迟为50ps。那时钟周期应该为：</p><p>A、350ps</p><p>B、250ps</p><p>C、300ps</p><p>D、150ps</p><p>E、2.8GHz</p><p>F、3.3GHz</p><p><strong>16、</strong>在流水线处理器设计时，如果划分出五个相对独立的阶段，延迟分别为：250ps，150ps，200ps，300ps，250ps。而还需要加入的流水线寄存器延迟为50ps。那时钟周期应该为：</p><p>A、350ps</p><p>B、250ps</p><p>C、300ps</p><p>D、150ps</p><p>E、2.8GHz</p><p>F、2.5GHz</p><p><strong>17、</strong>在流水线处理器设计时，如果划分出五个相对独立的阶段，延迟分别为：450ps，350ps，300ps，400ps，350ps。而还需要加入的流水线寄存器延迟为50ps。那时钟频率应该为：</p><p>A、2GHz</p><p>B、450ps</p><p>C、400ps</p><p>D、500ps</p><p><strong>18、</strong>有一个五级流水线的处理器设计，每一级的延迟分别为：450ps，650ps，450ps，450ps，450ps。其中包含流水线寄存器延迟50ps。如果将第二级（650ps）均匀拆分为两级，从而形成六级流水线。那新处理器的主频应该是：</p><p>A、2.22GHz</p><p>B、500ps</p><p>C、450ps</p><p>D、300ps</p><p>E、325ps</p><p>F、2.86GHz</p><p>G、2GHz</p><p>H、3.33GHz</p><p>I、3.07GHz</p><p><strong>19、</strong>有一个五级流水线的处理器设计，每一级的延迟分别为：450ps，950ps，450ps，450ps，450ps。其中包含流水线寄存器延迟50ps。如果将第二级（950ps）均匀拆分为两级，从而形成六级流水线。那在新处理器上，一条指令的执行时间是：</p><p>A、3000ps</p><p>B、2500ps</p><p>C、450ps</p><p>D、500ps</p><p>E、2700ps</p><p>F、475ps</p><p>G、2750ps</p><p>H、2950ps</p><p>I、2850ps</p><p><strong>20、</strong>以下关于超标量的说法，哪些是正确的？</p><p>A、超标量和流水线是两种独立的技术</p><p>B、超标量是一种利用空间并行性的优化</p><p>C、现代的多核CPU通常都是超标量处理器</p><p>D、超标量技术是建立在标量流水线技术基础上的</p><p>E、超标量处理器是多核CPU的另一种说法</p><p>F、超标量是一种利用时间并行性的优化</p><p><strong>21、</strong>流水线的“冒险”有哪几种？</p><p>A、结构冒险</p><p>B、数据冒险</p><p>C、控制冒险</p><p>D、指令冒险</p><p>E、运算冒险</p><p>F、硬件冒险</p><p>G、软件冒险</p><p>H、流水冒险</p><p><strong>22、</strong>对于典型的MIPS五级流水线处理器，如果将指令和数据放在同一个存储器中，则会直接导致哪种冒险？</p><p>A、结构冒险</p><p>B、控制冒险</p><p>C、数据冒险</p><p>D、运算冒险</p><p><strong>23、</strong>对于典型的MIPS五级流水线处理器，如果将指令和数据放在同一个存储器中，则会直接导致哪种冒险？</p><p>A、结构冒险</p><p>B、控制冒险</p><p>C、指令冒险</p><p>D、运算冒险</p><p><strong>24、</strong>以下哪个方法，可以解决所有的冒险？</p><p>A、让流水线停顿</p><p>B、增加流水线深度</p><p>C、提高时钟频率</p><p>D、采用超标量结构</p><p><strong>25、</strong>以下哪个方法，可以解决所有的冒险？</p><p>A、让流水线停顿</p><p>B、前递技术</p><p>C、增加流水线深度</p><p>D、增加运算部件</p><p><strong>26、</strong>以下哪个方法，可以解决所有的冒险？</p><p>A、让流水线停顿</p><p>B、增加运算部件</p><p>C、扩大存储器</p><p>D、旁路技术</p><p><strong>27、</strong>以下哪个方法，可以解决所有的冒险？</p><p>A、让流水线停顿</p><p>B、采用超标量结构</p><p>C、旁路技术</p><p>D、扩大存储器</p><p><strong>28、</strong>对于典型的MIPS五级流水线处理器（不前递，指令存储器和数据存储器分开），下面这段代码中，存在哪些冒险？</p><p>lw $1, 40($6)</p><p>beq $2, $1, Label;</p><p>add $6, $6, $2</p><p>add $6, $6, $1</p><p>Label: add $2, $6, $6</p><p>A、数据冒险</p><p>B、控制冒险</p><p>C、指令冒险</p><p>D、结构冒险</p><p><strong>29、</strong>对于典型的MIPS五级流水线处理器（不前递，指令存储器和数据存储器分开），下面这段代码中，存在哪些冒险？</p><p>lw $1, 40($6)</p><p>beq $2, $1, Label;</p><p>add $6, $6, $2</p><p>add $6, $6, $1</p><p>Label: add $2, $6, $6</p><p>A、数据冒险</p><p>B、控制冒险</p><p>C、运算冒险</p><p>D、指令冒险</p><p><strong>30、</strong>对于典型的MIPS五级流水线处理器（不前递，指令存储器和数据存储器分开），下面这段代码中，存在哪些冒险？</p><p>lw $1, 40($6)</p><p>add $6, $1, $2</p><p>sw $6, 50($1)</p><p>A、数据冒险</p><p>B、结构冒险</p><p>C、控制冒险</p><p>D、运算冒险</p><p><strong>31、</strong>对于典型的MIPS五级流水线处理器（不前递，指令存储器和数据存储器分开），下面这段代码中，存在哪些冒险？</p><p>lw $1, 40($6)</p><p>add $6, $1, $2</p><p>sw $6, 50($1)</p><p>A、数据冒险</p><p>B、控制冒险</p><p>C、指令冒险</p><p>D、结构冒险</p><p><strong>32、</strong>对于典型的MIPS五级流水线处理器（不前递），下面这段代码中，哪条指令会遇到数据冒险？</p><p>instruction 1: add $1, $2, $3</p><p>instruction 2: sw $2, 0($1)</p><p>instruction 3: lw $1, 4($2)</p><p>instruction 4: add $2, $2, $1</p><p>A、instruction 2</p><p>B、instruction 4</p><p>C、instruction 1</p><p>D、instruction 3</p><p><strong>33、</strong>对于典型的MIPS五级流水线处理器，即使已经对数据冒险进行了处理，下面这段代码中，哪条指令还是会导致流水线停顿？</p><p>add $s0, $t0, $t1</p><p>sub $t2, $s0, $t3</p><p>lw $t3, 40($t2)</p><p>or $t4, $t3, $t2</p><p>and $t3, $t4, $t2</p><p>A、lw</p><p>B、and</p><p>C、or</p><p>D、add</p><p><strong>34、</strong>对于典型的MIPS五级流水线处理器，即使已经对数据冒险进行了处理，下面这段代码中，哪条指令还是会导致流水线停顿？</p><p>add $s0, $t0, $t1</p><p>sub $t2, $s0, $t3</p><p>lw $t3, 40($t2)</p><p>or $t4, $t3, $t2</p><p>and $t3, $t4, $t2</p><p>A、lw</p><p>B、or</p><p>C、sub</p><p>D、and</p><p><strong>35、</strong>对于典型的MIPS五级流水线处理器，按照指令执行的正常流程，beq指令的分支条件判定会在哪个阶段完成？</p><p>A、执行</p><p>B、访存</p><p>C、取指</p><p>D、译码</p><p><strong>36、</strong>对于典型的MIPS五级流水线处理器，按照指令执行的正常流程，beq指令的分支条件判定会在哪个阶段完成？</p><p>A、执行</p><p>B、回写</p><p>C、译码</p><p>D、访存</p><p><strong>37、</strong>如果采用延迟转移技术（延迟数为1），那么执行完下面这些指令之后，$s1的内容是什么？</p><p>xor $s1, $s1, $s1</p><p>addi $t1, $t3, 1</p><p>subi $t2, $t4, 2</p><p>beq $t1, $t2, Next; Assume $t1 == $t2 is True</p><p>addi $s1, $s1, 1</p><p>addi $s1, $s1, 2</p><p>Next：</p><p>addi $s1, $s1, 3</p><p>A、4</p><p>B、2</p><p>C、1</p><p>D、5</p><p><strong>38、</strong>如果采用延迟转移技术（延迟数为1），那么执行完下面这些指令之后，$s1的内容是什么？</p><p>xor $s1, $s1, $s1</p><p>addi $t1, $t3, 1</p><p>subi $t2, $t4, 2</p><p>beq $t1, $t2, Next; Assume $t1 == $t2 is True</p><p>addi $s1, $s1, 1</p><p>addi $s1, $s1, 2</p><p>Next：</p><p>addi $s1, $s1, 3</p><p>A、4</p><p>B、5</p><p>C、1</p><p>D、0</p><p><strong>39、</strong>如果采用延迟转移技术（延迟数为1），那么执行完下面这些指令之后，$s1的内容是什么？</p><p>xor $s1, $s1, $s1</p><p>addi $t1, $t3, 1</p><p>subi $t2, $t4, 2</p><p>beq $t1, $t2, Next; Assume $t1 == $t2 is True</p><p>addi $s1, $s1, 1</p><p>addi $s1, $s1, 2</p><p>Next：</p><p>addi $s1, $s1, 3</p><p>A、4</p><p>B、0</p><p>C、3</p><p>D、1</p><p><strong>40、</strong>如果采用延迟转移技术（延迟数为1），那么执行完下面这些指令之后，$s1的内容是什么？</p><p>xor $s1, $s1, $s1</p><p>addi $t1, $t3, 1</p><p>subi $t2, $t4, 2</p><p>beq $t1, $t2, Next; Assume $t1 == $t2 is True</p><p>addi $s1, $s1, 1</p><p>addi $s1, $s1, 2</p><p>Next：</p><p>addi $s1, $s1, 3</p><p>A、4</p><p>B、0</p><p>C、6</p><p>D、1</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络物理层题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%89%A9%E7%90%86%E5%B1%82%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%89%A9%E7%90%86%E5%B1%82%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>以下对单工通信说明正确的是：<br>A、 允许在两个方向上同时传输<br>B、 任何时候只允许在一个方向上传输<br>C、 任何时候只允许按照一个方向传输<br>D、 允许双方交替地向对方传输信息  </p><p><strong>2、</strong>考虑语音信道带宽为1000赫兹，信噪比为20分贝。请问该信道的容量为（ 6658.2） bps。(保留至小数点后一位)</p><p>参考：</p><p><strong><img src="https://img-blog.csdn.net/20180730211310755?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></strong><br><strong>3、</strong>噪声的度量单位是<br>A、 分贝<br>B、 瓦特<br>C、 信噪比<br>D、 毫瓦分贝</p><p>解析：</p><p><strong><img src="https://img-blog.csdn.net/20180730211546401?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></strong>  </p><p><strong>4、</strong>不归零编码相比于归零编码带宽利用率<strong>（高）</strong>，同步能力<strong>（低）</strong>。</p><p>解析：</p><p><strong><img src="https://img-blog.csdn.net/20180730213011580?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></strong></p><p><strong>5、</strong>下列属于调制解调技术的有：<br>A、 将数字数据转换为数字信号<br>B、 将模拟数据转换为模拟信号<br>C、 将数字数据转换为模拟信号<br>D、 将模拟数据转换为数字信号  </p><p><strong>6、</strong>载波频率的选择可以与传输介质不兼容。<strong>（F）</strong>  </p><p><strong>7、</strong>下列属于调制技术的有：<br>A、 调频<br>B、 调相<br>C、 调整<br>D、 调幅  </p><p><strong>8、</strong>下列说法错误的是：<br>A、 模拟数据的数字化精度和数据内容有关<br>B、 模拟数据经数字化后可以被数字传输或模拟传输<br>C、 模拟数据被调制到更高频模拟信号上无法获得更大的线路利用率<br>D、 数字化是计算机处理模拟数据的前提  </p><p><strong>9、</strong>各用户可以使用相同频率载波发送信息的多路复用技术是：<br>A、 FDM（频frequency分）<br>B、 WDM（波wave分）<br>C、 TDM（时time分）<br>D、 CDM（码code分）</p><p><strong>10.</strong> 下列说法正确的是：</p><p>A. 信道与通信电路类似，一条可通信的电路往往包含一个信道</p><p>B. 调制就是把模拟数据转换为数字信号的过程（模拟信号）</p><p>C. 信息传输速率是指通信信道上每秒传输的码元数（数字通信系统每秒所传输的二进制码元个数）</p><p>D. 在数值上，波特率等于比特率与每符号含的比特数的比值</p><p>解析：信道！=通信电路。一条可双向通信的电路往往包含两个信道:发送信道和接收信道。</p><p>多个用户共用通信电路时，每个用户在该通信电路都会有一个信道。</p><p><img src="https://img-blog.csdn.net/20180731223401387?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>11.</strong> 影响信道最大传输速率的因素主要有：<strong>信道带宽和信噪比</strong></p><p><img src="https://img-blog.csdn.net/20180731224839970?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180731225101784?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>12.</strong> 被用于计算机内部的数据传输的是：</p><p>A. 串行传输 B. 并行传输 C. 同步传输 D. 异步传输</p><p>解析：同步传输和异步传输是通信方式，不是传输方式</p><p><strong>13.</strong> 关于曼彻斯特编码的叙述正确的是：</p><p>A. 每个信号起始边界作为时钟信号有利于同步</p><p>B. 将时钟与数据取值都包含在信号中</p><p>C. 这种模拟信号的编码机制特别适合于传输声音</p><p>D. 每位的中间不跳变表示信号的取值为0</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180731234827919?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>1：从低变到高</p><p>0：从高变到低</p><p>（也可以采用相反的规定）</p><p>位中间的跳变即作时钟信号，又作数据信号。</p><p>声音是模拟数据，而曼彻斯特编码最适合传输二进制数字信号。</p><p><strong>14.</strong></p><p><img src="https://img-blog.csdn.net/20180801205905820?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>解析</p><p>10BaseT即10Mb/s的以太网，采用曼彻斯特编码，将一个码元分成两个相等的间隔。</p><p>1：从高变到低</p><p>0：从低变到高</p><p>（也可以采用相反的规定）</p><p>答案可为00110110 11001001</p><p><strong>15.</strong> 不含同步信息的编码：</p><p>A. 非归零码 B. 曼彻斯特编码 C.差分曼彻斯特编码</p><p>解析：</p><p>不归零编码：</p><p><img src="https://img-blog.csdn.net/201808012229459?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180801223043212?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>不归零反转编码</p><p><img src="https://img-blog.csdn.net/20180801223246423?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>曼彻斯特编码</p><p><img src="https://img-blog.csdn.net/20180801224442240?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180801224545932?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>差分曼彻斯特编码</p><p><img src="https://img-blog.csdn.net/2018080122474898?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180801224828943?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180801224916616?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>非归零编码每个码元之间没有间隔标志，不包含同步信息。</p><p>曼彻和差分曼彻都是将一个码元分成两个相等的时间间隔，将每个码元的中间跳变作为收发双方的同步信息。</p><p><strong>16.</strong> 在网络中，把语音与计算机产生的数字，文字，图形与图像同时传输，必须先把语音信号数字化。下列可以把语音信号数字化的技术是：</p><p>A. 曼彻斯特编码</p><p>B. QAM</p><p>C. 差分曼彻斯特编码</p><p>D. 脉冲编码调制(Pluse Code Modulationg)</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180804194155502?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/2018080419421384?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>17.</strong> 利用模拟通信信道传输数字信号的方法称为：</p><p>A. 同步传输 B. 异步传输 C. 基带传输 D. 频带传输</p><p>解析：</p><p>基带传输：将基带信号直接传送到数字信道上传输</p><p>频带传输：将基带信号经过调制后送到模拟信道上传输</p><p><strong>18.</strong> 波特率等于：</p><p>A. 每秒传输的比特数</p><p>B. 每秒可能发生的信号变化次数</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180731223401387?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>（1）每秒2,400位的比特率是指每一秒钟传输了2,400个1和0</p><p>（2）波特率：每秒钟一个信号(从0变为1或从1变为0)或符号(连接的电压、频率或相位)在通信通道中改变状态或发生变化的次数。</p><p>模拟电话调制解调器要比数字通信手段简单一些，1个符号(波数)传输1个位。为了提高通信速度，更高级的调制解调器会使用能在一个符号中发送多个位的调制技术。如一个波特状态改变一次，传输4位，此时，波特率等于1/4的比特率。</p><p>波特率 （符号率）= 比特率（每秒传输的比特数）/每符号含的比特数（每码元含的比特数）</p><p><strong>19.</strong> 一个以太网数据的波特率是40MBaud，那么其数据率是：20Mb/s</p><p>解析：</p><p>以太网采用曼彻斯特编码，每传输一位数据需要2个脉冲信号，因此波特率是数据率的2倍。40/2=20。</p><p><strong>20.</strong> 某信道的波特率为1000Baud，若令其数据传输速率达到4kb/s，则一个信号码元所取的有效离散值个数为：16</p><p>解析：</p><p>波特率 （符号率）= 比特率（每秒传输的比特数）/每符号含的比特数（每码元含的比特数）</p><p>1000 = 4000/每符号含的比特数（每码元含的比特数）</p><p>每符号含的比特数（每码元含的比特数） = 4bit</p><p>有效离散值个数 = 2（4）=16</p><p><strong>21.</strong> 已知某信道的信号传输速率是64kb/s，一个载波信号码元有4个有效离散值，则该信道的波特率为：32k Baud</p><p>解析：</p><p>2（2） = 4</p><p>则每符号含的比特数（每码元含的比特数）= 2bit</p><p>波特率= 64/2=32</p><p><strong>22.</strong> 有一条无噪声的8kHz信道，每个信号包含8级，每秒采样24k次（无意义），那么可以获得的最大传输速率是：</p><p>A. 24kb/s B. 32kb/s C. 48kb/s D.72kb/s</p><p>解析：</p><p>无噪声的信号满足Nyquist奈奎斯特准则C=2*8000*log2(8)=48000</p><p><img src="https://img-blog.csdn.net/20180805095149172?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>23.</strong> 某带宽为4000Hz的低通信道，采用16种不同的物理状态来表示数据。按照奈奎斯特定理，信道的最大传输速率是：32kb/s</p><p>解析：</p><p>C = 2 <em> 4000 \</em>log2(16) =8000 * 4 = 32000</p><p><strong>24.</strong> 二进制信号在信噪比为127：1（数字表示形式）的4kHz信道上的传输，最大数据率可达到：8000b/s</p><p>解析：</p><p>若给出了码元与比特数之间的关系，则需受两个公式的限制。</p><p><img src="https://img-blog.csdn.net/20180805120641876?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180805120730657?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>奈氏准则是在理想条件下推导出来的。实际条件下，最高码元传输速率要比理想条件下得出的数值要小很多。</p><p>C = 2 * 4000 log2(2) = 8000b/s</p><p><img src="https://img-blog.csdn.net/20180805120817437?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>香农定理给出了信息传输速率的极限。</p><p>信道的带宽W或信道中的信噪比越大，则信息的极限传输速率就越高。</p><p>C = 4000 * log2(1+127) = 28000b/s</p><p>两个上限取最小的。</p><p><strong>25.</strong> 信噪比为S/N,为什么还要取对数10log10(S/N)？</p><p>（1）数字形式表示，也就是一般的数值。如噪声功率N为1，信号功率S为100，信噪比为100/1=100</p><p>（2）分贝形式表示，10log10(100) = 20dB</p><p>两者的区别在于，前者是没有单位的，后者必须加dB，代表分贝。两者数值等价。</p><p>分贝对于表示特别大或者特别小的数值极为有利。</p><p><strong>26.</strong> 电话系统的典型参数是信道带宽为3000Hz，信噪比为30dB，则该系统的最大数据传输速率为：30kb/s</p><p><img src="https://img-blog.csdn.net/20180805120641876?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>S/N = 1000</p><p><img src="https://img-blog.csdn.net/20180805120817437?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><img src="https://img-blog.csdn.net/20180805140749821?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>C = 3000 * log2(1+1000)</p><p><strong>27.</strong> 采用8种相位，每种相位各有两种幅度的QAM调制方法，在1200Baud的信号传输速率下能达到的数据传输速率为：4800b/s</p><p>解析:</p><p>每个信号可以有8 * 2 = 16种变化，每个码元携带log2（16） = 4bit的信息</p><p>C = B <em> log2(16) = 1200 </em> 4 = 4800b/s</p><p><strong>28. (2011年计算机联考真题)</strong></p><p>若某通信链路的数据传输速率为2400b/s，采用4相位调制，则该链路的波特率是：1200Baud</p><p>解析：</p><p>B = C / log2(4) = 1200Baud</p><p><strong>29. (2009年计算机联考真题)</strong></p><p>在无噪声的情况下，若某通信链路的带宽为3kHz，采用4个相位，每个相位具有4种振幅的QAM调制技术，则该通信链路的最大数据传输率是：24kb/s</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180805120730657?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>C = 2 <em> 3000 </em> log2(4*4) = 24000</p><p><strong>30.</strong> 一个信道每1/8s采样一次，传输信号共有16种变化状态，最大数据传输率为：32b/s</p><p>解析：</p><p>采样周期 T = 1/8</p><p>采样频率 f = 8 Hz</p><p>有16种变化状态的信号可携带4bit数据 8 * 4 =32</p><p><strong>31.</strong> 将1路模拟信号分别编码为数字信号后，和另外7路数字信号采用同步TDM方式复用到一条通信线路上。1路模拟信号的频率变化范围为0~1kHz，每个采样点采用PCM方式编码为4位的二进制数，另外7路数字信号的数据率均为7.2kb/s。复用线路需要的最小通信能力是：64kb/s</p><p>解析：</p><p>采样定理：采样频率必须大于等于原始信号中的最大频率f的两倍。</p><p>1路模拟信号的最大频率为1kHz，所以采样频率至少为2kHz，每个样值编码为4位二进制数，所以数据传输速率为8kb/s。</p><p>复用的每条支路速率要相等，而另外7路数字信号的速率低于8kb/s，所以均要采用脉冲填充方式，将速率提高到到8kb/s，然后将这8路信号复用，需要的通信能力为 8kb/s * 8 = 64kb/s</p><p><strong>32.</strong> 用PCM对语音进行数字量化，如果将声音分为128个量化级，采样频率为8000次/秒，那么一路话音需要的数据传输率为：56kb/s</p><p>解析：</p><p>量化：把样值信号的无限多个可能的取值，近似地用有限个数的数值来表示。</p><p>量化级：把样值信号的瞬时幅度分成多个度量单位，一个度量单位称为一个量化级，用量化级的大小来表示瞬时样值。</p><p>声音信号需要128个量化级，每采样一次需要log2（128）= 7bit来表示，每秒采样8000次， 7 * 8000 = 56000</p><p><strong>33.</strong> 若连接R2和R3链路的频率带宽为8kHz，信噪比为30dB，该链路实际数据传输速率约为理论最大数据传输速率的50%，则该链路的实际数据传输速率约是：40kbps</p><p><img src="https://img-blog.csdn.net/20180805195715431?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180805120817437?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>30 = 10log10(S/N) S/N = 1000</p><p>C = 8000 * log2(1+1000) = 80kb/s</p><p>80 * 50% = 40kb/s</p><p><strong>34.</strong> 下列数据交换方式中，数据经过网络的传输延迟长而且是不固定的，不能用于语音数据传输的是：报文交换</p><p>解析：</p><p>报文：用户发送的原始数据（文件）</p><p>报文大小不固定，在交换结点中需要较大的存储空间。报文经过中间结点的接收，存储和转发时间较长而且也不固定，不能用于实时通信应用环境（如语音，视频等）</p><p><strong>35.</strong> 就交换技术而言，以太网采用的是：分组（包）交换技术</p><p>包/分组：大小固定的数据块(无完整意义)</p><p><strong>36.</strong> 为了使数据在网络中传输时延最小，首选的交换方式是：电路交换</p><p><img src="https://img-blog.csdn.net/2018080521220441?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>37.</strong> 包交换对报文交换的主要改进是：传输单位更小且有固定的最大长度</p><p><strong>38.</strong> 关于三种数据交换方式的叙述，错误的是：</p><p>A. 电路交换不提供差错控制功能</p><p>B. 分组交换的分组有最大长度的限制（超过长度的分组会被分割成几个长度较小的的分组后再发送）</p><p>C. 虚电路是面向连接的，它提供一种可靠的服务</p><p>D. 在出错率很高的传输系统中，选择虚电路方式更合适（数据报）</p><p>解析：</p><p>虚电路提供wan网络层的连接服务，在发送方和接收方建立一条逻辑上相连的虚电路。</p><p><strong>39. 电路交换，报文交换和分组交换的特点</strong></p><p><strong>（1）</strong>电路交换</p><p>数据在网络中的传输时延最小，但无法保证数据无差错地传送。</p><p><img src="https://img-blog.csdn.net/20180810215403583?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>（2）</strong>报文交换</p><p>报文进入交换节点后要经历存储转发，从而引起时延</p><p>报文交换对报文的大小没有限制，要求网络结点需要有较大的缓存空间</p><p><strong>（3）</strong>分组交换</p><p>分组交换对报文交换主要的改进是传输单位更小且有固定的最大长度</p><p>分组交换进一步分为：数据报方式和虚电路方式</p><p>数据报方式：</p><p>提供网络层无连接服务</p><p>适用于出错率很高的传输系统</p><p>每个分组在传输过程中都必须携带源地址和目的地址</p><p>虚电路：</p><p>在发送方与接收接收方之间建立一条逻辑上相连的虚电路</p><p>提供网络层连接服务</p><p>一个特定会话的虚电路是事先建立好的，因此它的数据分组所走的路径也是固定的</p><p><img src="https://img-blog.csdn.net/20180809232421788?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>40. （2010年计算机联考真题）</strong></p><p><img src="https://img-blog.csdn.net/20180810222503310?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180811095707953?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>分组大小为1000B=1MB=8Mb，分组头大小为20B，则分组携带的数据大小为980B。</p><p>文件长度为980000B，需拆分为980000/980=1000个分组，加上头部后，每个分组大小为1MB=8Mb</p><p>第一个分组从H1到S1需要8Mb/100Mbps=0.08ms</p><p>最后一个分组从H1到S1需要0.08ms*1000=80ms</p><p>全部传输完共需80+0.08*2=80.16ms</p><p>答案：C</p><p><strong>（注意：这里忽略了传输时延）</strong></p><p><strong>41. （2013年计算机联考真题）</strong></p><p><img src="https://img-blog.csdn.net/20180811084106133?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180811100809564?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>报文交换：</p><p>8M / 10Mbps = 0.8s = 800ms</p><p>800 + 800 = 1600ms</p><p>分组交换：</p><p>第一个分组从主机到第一个交换机10kb / 10Mbps = 1ms</p><p>最后一个分组从主机到第一个交换机8Mb / 10kb = 8000kb / 10kb = 800个分组</p><p>800ms+ 1ms = 801ms</p><p>答案：D</p><p><strong>42. （2014年计算机联考真题）</strong></p><p>下列因素中，不会影响信道数据数据传输速率的是：</p><p>A. 信噪比 B. 频率带宽 C. 调制速率 D. 信号传播速度</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180805120817437?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>信道的传输速率实际上就是信号的发送速率，而调制速度也会直接限制数据的传输速率。</p><p>信号的传播速度是信号在信道上传播的速度，与信道的发送速率无关。</p><p><img src="https://img-blog.csdn.net/2018081110380124?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案：D</p><p><strong>43. （2015年计算机联考真题）</strong></p><p><img src="https://img-blog.csdn.net/20180811104245397?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>不归零编码</p><p><img src="https://img-blog.csdn.net/20180730213011580?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>1</p><p>1，0高低电压可反过来</p><p>不归零反转编码</p><p><img src="https://img-blog.csdn.net/20180801223246423?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180811104641385?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案：A</p><p><strong>1.</strong> 双绞线是用两根绝缘导线绞合而成的，绞合的目的是：减少干扰</p><p>解析：减少两根导线相互的电磁干扰。</p><p><img src="https://img-blog.csdn.net/20180811121242404?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2.</strong> 在电缆中采用屏蔽技术可以带来的好处主要是：减少电磁干扰辐射</p><p>解析：屏蔽层的主要作用是提高电缆的抗干扰能力</p><p><strong>3.</strong>利用一根同轴电缆互连主机构成以太网，则主机间的通信方式为：</p><p>A. 全双工</p><p>B. 半双工</p><p>C. 单工</p><p>解析：</p><p>传统以太网采用广播的方式发送信息，同一时间只能允许一台主机发送信息。</p><p><strong>4.</strong> 同轴电缆比双绞线的传输速度更快，得益于：同轴电缆具有更高的屏蔽性，更好的抗噪声性</p><p><img src="https://img-blog.csdn.net/20180811121337285?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>5.</strong> 不受电磁干扰和噪声影响的传输介质是：光纤</p><p><img src="https://img-blog.csdn.net/20180811121742475?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180811121836903?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>光纤抗雷电和电磁干扰性能好，无串音干扰，保密性好。</p><p><strong>6.</strong> 多模光纤传输光信号的原理是：光的全反射特性</p><p><strong>7.</strong> 关于单模光纤的说法正确的是：</p><p>A. 光纤越粗，数据传输率越高</p><p>B. 如果光纤的直径减少到只有一个光的波长大小，则光沿直线传播</p><p>C. 光源是发光二极管或激光（激光二极管）</p><p>D. 光纤是中空的</p><p><img src="https://img-blog.csdn.net/2018081114015792?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>8.</strong> 关于卫星通信的说法，错误的是：</p><p>A. 卫星通信的距离长，覆盖的范围广</p><p>B. 使用卫星通信易于实现广播通信和多址通信</p><p>C. 卫星通信的好处在于不受气候的影响，误码率很低</p><p>D. 通信费用高，延时较大是卫星通信的不足之处</p><p>解析：</p><p>卫星通信成本高，传播时延大，受气候影响大，保密性差，误码率较高</p><p><strong>9.</strong> 某网络在物理层规定，信号的电平用+10V~+15V表示二进制0，用_10V~_15V表示进制1，电线长度限于15m以内，这体现了物理层接口的：电气特性</p><p>解析：</p><p>电气特性：规定传输二进制时，线路上信号的电压高低，阻抗匹配，传输速率和距离限制等</p><p><strong>10.</strong> 当描述一个物理层接口引脚处于高低电平时的含义时，该描述属于：功能特性</p><p>解析：</p><p>指明某条件上出现的某一电平的电压表示何种意义，接口部件的信号线的用途</p><p><strong>11. （2012年计算机联考真题）</strong></p><p>在物理层接口特性中，用于描述完成每种功能的事件发生顺序的是：规程特性</p><p>解析：</p><p>规程特性（过程特性）：定义各条物理线路的工作过程和时序关系</p><p><strong>12.</strong> 下列关于物理层设备的叙述中错误的是：</p><p>A. 中继器仅作用于信号的电气部分</p><p>B. 利用中继器来扩大网络传输距离的原理是它将衰减的信号进行了放大（再生）</p><p>C. 集线器实质上相当于一个多端口的中继器</p><p>D. 物理层设备连接起来的几个网段仍然是一个局域网，且不能连接具有不同数据链路层协议的网段</p><p>解析：</p><p>中继器（转发器）：</p><p>工作在物理层</p><p>中继器的作用是放大信号，原理是信号再生。</p><p>中继器有两个端口，将一个端口输入的数据从另一个端口发送出去。</p><p>中继器连接起来的几个网段仍然是一个局域网。</p><p>若某个网络设备具有存储转发功能，则可以连接两个不同的协议。</p><p>中继器没有存储转发功能，所以不能连接两个具有不同速率的局域网，不能连接具有不同数据链路层协议的网段。</p><p><strong>13.</strong> 为了使数字信号传输得更远，可采用的设备是：中继器</p><p><strong>14.</strong>  以太网遵循IEEE802.3标准，用粗缆组网时每段不能大于500m，超过500m长度时就要分段，段间相连是利用：中继器</p><p><strong>15.</strong> 在粗缆以太网中可通过中继器扩充网段，中继器最多可有：</p><p>A.3个 B. 4个 C. 5个 D.无限个</p><p>解析：</p><p>中继器或集线器有“5-4-3规则”，5表示5个网段，4表示4个中继器或集线器，3表示3个网段为主机段。</p><p><strong>16.</strong>  集线器连接的网络在拓扑结构上属于：星形</p><p>解析：</p><p>集线器（Hub）的作用是将多个网络端口连接在一起，以集线器为中心。</p><p><img src="https://img-blog.csdn.net/20180811161916943?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>集线器（Hub）</p><p>工作在物理层</p><p>实质上是一个多端口的中继器，起到信号放大和转发作用</p><p>Hub每个端口连接的网络部分是同一个网络的不同网段</p><p>只能在半双工下工作</p><p><strong>17.</strong> 集线器连接的工作站集合：同属一个冲突域，也同属一个广播域</p><p><strong>18.</strong> 当集线器的一个端口收到数据后，将其：从除了输入端口外的所有端口广播出去</p><p><strong>19.</strong> 关于中继器和集线器的说法中，不正确的是：</p><p>A. 都工作在OSI参考模型的物理层</p><p>B. 都可以对信号进行放大和整形</p><p>C. 通过中继器或集线器互联的网段数量不受限制（5-4-3原则）</p><p>D. 中继器通常只有2个端口，而集线器通常有4个或更多端口</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统同步机制题库</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>多个进程并发执行时，各个进程应互斥进入其临界区，所谓临界区是指</p><p>A、一段程序</p><p>B、一段数据区</p><p>C、一个缓冲区</p><p>D、一种同步机制</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180808173613677?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>下列哪一种场景问题只包含进程互斥问题？</p><p>A、田径场的四百米接力比赛</p><p>B、一个进程读文件，一个进程写文件</p><p>C、两个进程通过一个缓冲区传递数据</p><p>D、公共汽车上司机和售票员的工作配合</p><p><strong>3、</strong>以下是解决进程互斥进入临界区的一种解法。</p><blockquote><p>P:</p><p>… …</p><p>pturn = true;</p><p>while (qturn) ;</p><p>临界区操作</p><p>pturn = false;</p><p>… …</p><p>Q:</p><p>… …</p><p>qturn = true;</p><p>while (pturn) ;</p><p>临界区操作</p><p>qturn = false;</p><p>… …</p></blockquote><p>其中，pturn、qturn的初值为false</p><p>如果P、Q两个进程同时想进入临界区，那么会发生下面哪一种情形？</p><p>A、P和Q都进入了临界区</p><p>B、P先进入临界区，Q再进入临界区</p><p>C、Q先进入临界区，P再进入临界区</p><p>D、P和Q都进入不了临界区</p><p><strong>4、</strong>若干进程之间相互合作，共同完成一项任务。进程的这种关系称为</p><p>A、并发</p><p>B、同步</p><p>C、互斥</p><p>D、异步</p><p><strong>5、</strong>下列描述的四个现象中，哪一项既具有同步关系又具有互斥关系？</p><p>A、多个不同的用户进程一起玩踢足球电子游戏</p><p>B、多个不同的用户订票进程访问票额数据库</p><p>C、多个不同的用户进程一起玩麻将电子游戏</p><p>D、多个不同的用户进程编译自己的程序</p><p><strong>6、</strong>在使用信号量及P、V操作机制解决问题时，进程执行一次P操作，意味着该进程</p><p>A、正在使用一个资源</p><p>B、准备释放一个资源</p><p>C、申请分配一个资源</p><p>D、需要共享一个资源</p><p><strong>7、</strong>在使用信号量及P、V操作机制解决问题时，一个进程执行V操作意味着</p><p>A、可能有另一个进程从等待队列进入就绪队列</p><p>B、该进程从等待队列进入就绪队列</p><p>C、该进程从磁盘调入内存</p><p>D、可能有另一个进程从磁盘被调入内存</p><p><strong>8、</strong>假设信号量S的当前值为 -3，这就表示</p><p>A、系统中还有3个资源可以使用</p><p>B、系统中有3个等待该信号量的进程</p><p>C、在信号量S上不能再执行P操作了</p><p>D、在信号量S上只能执行V操作</p><p><strong>9、</strong>用信号量及PV操作管理临界区时，若信号量mutex的初值为1，当mutex的等待队列中有k（k &gt; 1）个进程时，信号量的值为</p><p>A、-k</p><p>B、k</p><p>C、k-1</p><p>D、1-k</p><p><strong>10、</strong>第一类读者写者问题的解决方案会导致写者进程产生“饥饿”现象。（T）</p><p><img src="https://img-blog.csdn.net/20180809165203963?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>11、</strong>用“测试并加锁”（TSL）指令解决进程互斥进入临界区的解决方案不适用于多处理器。（F）</p><p><img src="https://img-blog.csdn.net/20180809165129469?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>12、</strong>自旋锁采用了忙等待方式，它适用于多处理器。（T）</p><p><img src="https://img-blog.csdn.net/20180809165032459?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>13、</strong>若系统采用基于优先级的抢占式调度策略，临界区的使用可能导致优先级反转问题。（T）</p><p><strong>14、</strong>下列关于管程的描述中，哪一个是不正确的？</p><p>A、管程中需要提供互斥量以保证管程的互斥性</p><p>B、管程有自己的名字</p><p>C、管程的主要作用是管理共享资源（数据结构）</p><p>D、进程只能调用管程提供的过程对管程中的数据结构进行处理</p><p>解析：</p><p><img src="https://img-blog.csdn.net/20180809164918157?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>15、</strong>下列哪一个操作不会唤醒或通知等在条件变量上的进程？</p><p>A、broadcast()</p><p>B、notify()</p><p>C、signal()</p><p>D、wait()</p><p><strong>16、</strong>应用消息缓冲机制完成进程间通信的过程中，下列哪一项不是所必需的？</p><p>A、同步互斥信号量</p><p>B、消息缓冲区</p><p>C、send/receive原语</p><p>D、消息队列（指针）</p><p><img src="https://img-blog.csdn.net/201808091647566?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>17、</strong>采用共享内存进行进程间通信的方法需要程序员解决的问题是</p><p>A、设计共享内存空间的访问原语</p><p>B、处理进程在使用共享内存过程中的互斥关系</p><p>C、分配共享内存空间的大小</p><p>D、保证共享内存空间不被破坏</p><p><strong>18、</strong>MESA管程应用时需要至少2次对条件的检测。（假设线程都有一个进入队列、等待notify的过程，不存在直接通过的情况。）（T）</p><p><strong>19、</strong>若管程中同时出现2个进程，需要采取措施使其中一个进程等待。HOARE管程的解决办法是让先进入管程的进程等待。（F）</p><p>解析：先进入的先执行</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统io系统题库</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fio%E7%B3%BB%E7%BB%9F%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fio%E7%B3%BB%E7%BB%9F%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>下列I/O控制方式中，哪一个不需要硬件支持？</p><p>A、轮询方式</p><p>B、中断方式</p><p>C、DMA方式</p><p>D、I/O处理机方式</p><p><img src="https://img-blog.csdn.net/20180814101328851?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>下列关于虚设备技术的叙述中，哪一个是错误的？</p><p>A、虚设备技术是指在一类设备上模拟另一类设备的技术</p><p>B、引入虚设备技术是为了提高设备利用率</p><p>C、通常采用虚设备技术是用低速设备来模拟高速设备</p><p>D、SPOOLing技术是一类典型的虚设备技术</p><p><img src="https://img-blog.csdn.net/20180814101533620?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>3、</strong>下列关于SPOOLing技术的叙述中，哪一个是错误的？</p><p>A、SPOOLing技术解决了独占设备利用率低的问题</p><p>B、SPOOLing没有解决CPU的速度与设备速度的差异性</p><p>C、SPOOLing技术需要利用磁盘空间作为缓冲</p><p>D、SPOOLing技术可用于打印机的管理</p><p><strong>4、</strong>在设备管理中，缓冲技术主要用于</p><p>A、提供内存与外存之间的接口</p><p>B、提高主机和设备交换信息的速度</p><p>C、提高设备利用率</p><p>D、扩充地址空间</p><p><img src="https://img-blog.csdn.net/20180814102225896?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>5、</strong>下列关于I/O端口地址的叙述中，哪一个是错误的？</p><p>A、内存映像编址方式下允许缓存设备接口寄存器的内容</p><p>B、I/O端口地址是指设备接口寄存器的地址</p><p>C、I/O独立编址方式需要特定的I/O指令</p><p>D、内存映像编址方式下I/O端口地址空间可以比较大</p><p><img src="https://img-blog.csdn.net/20180814103057358?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180814103213425?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180814103250404?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>6、</strong>下列关于操作系统设备管理的叙述中，哪些是正确的？</p><p>A、设备管理使用户能独立于具体设备的复杂物理特性而方便地使用设备</p><p>B、设备管理利用各种技术提高CPU与设备、设备与设备之间的并行工作能力</p><p>C、操作系统对用户屏蔽了实现具体设备I/O操作的细节</p><p>D、SPOOLing技术是一类典型的虚拟设备技术</p><p>E、操作系统应尽量对设备提供各种不同的接口</p><p><strong>7、</strong>下列哪些方案可以提高I/O性能？</p><p>A、缓冲技术</p><p>B、异步I/O方式</p><p>C、DMA方式</p><p>D、轮询方式</p><p>E、静态设备分配策略</p><p><img src="https://img-blog.csdn.net/20180814103657212?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>8、</strong>I/O设备的传输速率差异性、接口的复杂性等给操作系统设备管理带来复杂性。（T）</p><p><strong>9、</strong>利用设备内部的缓冲区可以进行数据格式加工等处理。（T）</p><p><strong>10、</strong>内存映像I/O模式下设备驱动程序可以用C语言编写。（T）</p><p><strong>11、</strong>通过把独占设备改造成<strong><strong><strong>____</strong></strong></strong>，可以提高独占设备利用率</p><p>A、共享设备</p><p>B、共享的设备</p><p><strong>12、</strong>通常按层次组织I/O软件，典型的四层I/O软件包括用户进程I/O、<strong><strong><strong>____</strong></strong></strong>、设备驱动程序和中断处理程序。</p><p>A、设备无关软件</p><p>B、设备独立软件</p><p>C、设备独立性软件</p><p>D、设备无关性软件</p><p>E、逻辑I/O</p><p><img src="https://img-blog.csdn.net/2018081410381722?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案： A,B,C,D,E</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统存储模型题库</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9E%8B%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9E%8B%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>为了保证CPU执行程序指令时能正确访问存储单元，需要将用户进程中的逻辑地址转换为运行时可由CPU直接寻址的物理地址，这一过程称为：</p><p>A、地址映射</p><p>B、地址分配</p><p>C、地址计算</p><p>D、地址查询</p><p><img src="https://img-blog.csdn.net/2018080918133741?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>若采用动态地址重定位，其地址重定位工作是在什么时刻完成的？</p><p>A、往内存装载进程时刻</p><p>B、执行每一条指令时刻</p><p>C、调度程序选中进程时刻</p><p>D、在内存中移动进程时刻</p><p><img src="https://img-blog.csdn.net/20180809181401596?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>3、</strong>系统在查找空闲区时可采用多种分配算法，其中，“最差适配算法”是</p><p>A、在空闲区表中选择能满足进程申请长度最小空闲区</p><p>B、在空闲区表中选择第一个能满足进程申请长度的空闲区</p><p>C、在空闲区表中随机选择一个能满足进程申请长度的空闲区</p><p>D、在空闲区表中选择能满足进程申请长度的最大空闲区</p><p><img src="https://img-blog.csdn.net/20180809181518994?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>4、</strong>在可变分区管理方式下，在回收内存时，若已判断出“空闲区表中某一表项的起始地址恰好等于被回收分区的起始地址与长度之和”，则表示</p><p>A、被回收分区有下邻空闲区</p><p>B、被回收分区既有上邻空闲区，又有下邻空闲区</p><p>C、被回收分区有上邻空闲区</p><p>D、被回收分区无相邻空闲区</p><p><strong>5、</strong>在采用页式存储管理方案的系统中，逻辑地址用32位表示，内存页面大小为2^12，则用户程序最多可划分为多少页？</p><p>A、</p><p><img src="https://img-blog.csdn.net/20180802150051180?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>B、</p><p><img src="https://img-blog.csdn.net/20180802150049837?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>C、</p><p><img src="https://img-blog.csdn.net/20180802150050192?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>D、</p><p><img src="https://img-blog.csdn.net/20180802150052910?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案： A</p><p>2^32 / 2^12 = 2^20</p><p><strong>6、</strong>进程切换时，系统将即将运行进程的页表起始地址存放在</p><p>A、寄存器中</p><p>B、内存中</p><p><img src="https://img-blog.csdn.net/20180810101005836?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>7、</strong>下列哪一种存储管理方案是将进程离散地存放在内存中不连续的区域中的？</p><p>A、单一连续区</p><p>B、固定分区</p><p>C、页式存储管理</p><p>D、可变分区</p><p><img src="https://img-blog.csdn.net/20180810101701402?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810101835575?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>8、</strong>存储管理中，将进程不需要或暂时不需要的部分移到磁盘，腾出内存空间以调入其他进程，这一技术称为</p><p>A、覆盖技术</p><p>B、紧缩技术</p><p>C、交换技术</p><p>D、缓冲技术</p><p><img src="https://img-blog.csdn.net/20180810102221518?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810102442257?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810102513120?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810102651138?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>9、</strong>下列关于地址重定位的叙述中，哪些是正确的?</p><p>A、内存的地址是按照物理地址编址的</p><p>B、用户进程中使用的是逻辑地址，且从0开始编址</p><p>C、动态地址重定位是在进程执行过程中完成的</p><p>D、静态地址重定位的完成过程必须有硬件支持</p><p>E、地址重定位又称为地址转换或地址映射</p><p><img src="https://img-blog.csdn.net/20180810103253145?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/2018080918133741?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180809181401596?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>10、</strong>下列关于紧缩技术的叙述中，哪些是正确的？</p><p>A、紧缩技术可以合并分散的小空闲区，以形成大的空闲区</p><p>B、完成紧缩会增加处理器的开销</p><p>C、紧缩技术不能解决内碎片问题</p><p>D、紧缩技术可用于可变分区存储管理方案</p><p>E、内存中任意一个进程都可以随时移动</p><p><img src="https://img-blog.csdn.net/20180810104312864?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>11、</strong>在采用页式存储管理方案的系统中，若进程处于就绪状态，则页表的起始地址保存在进程控制块PCB中。（T）</p><p><img src="https://img-blog.csdn.net/20180810101005836?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>12、</strong>采用页式存储管理方案不会产生碎片问题。（F）</p><p><strong>13、</strong>内存管理单元（MMU）是硬件机制，完成从逻辑地址到物理地址的转换工作。（T）</p><p><img src="https://img-blog.csdn.net/20180810105155473?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>14、</strong>页表由页表项组成，通过页表项可以得到逻辑页号对应的页框号，从而拼接出物理地址。（T）</p><p><img src="https://img-blog.csdn.net/2018081010594959?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810105532362?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>15、</strong>提出存储层次体系的主要依据是</p><p>A、虚拟存储技术</p><p>B、存储保护技术</p><p>C、多道程序设计技术</p><p>D、程序访问的局部性原理</p><p><strong>16、</strong>虚拟页式存储系统中页表的作用十分重要，页表由页表项组成，在页表项中标记出页面尚未读入内存的是</p><p>A、有效位</p><p>B、保护位</p><p>C、访问位</p><p>D、禁止缓存位</p><p><img src="https://img-blog.csdn.net/20180810111756173?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>17、</strong>在虚拟页式存储系统的各种页面置换算法中，LRU算法是指</p><p>A、先置换最早进入内存的页面</p><p>B、先置换近期最长时间没有被访问的页面</p><p>C、先置换近期内被访问次数最少的页面</p><p>D、先置换以后不会使用的页面</p><p><img src="https://img-blog.csdn.net/20180810112108750?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>18、</strong>在虚拟页式存储系统中，若页面尺寸为4K，页表项大小为4字节，则采用三级页表结构可以表示多大的虚拟地址空间？</p><p>A、</p><p><img src="https://img-blog.csdn.net/20180802150109655?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>B、</p><p><img src="https://img-blog.csdn.net/20180802150110472?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>C、</p><p><img src="https://img-blog.csdn.net/20180802150109826?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>D、</p><p><img src="https://img-blog.csdn.net/20180802150109835?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案：C</p><p><strong>19、</strong>在虚拟页式存储系统中，对缺页异常没有影响的因素是</p><p>A、页表在内存中的位置</p><p>B、页面置换算法</p><p>C、程序本身的编制方法</p><p>D、分配给进程的页框数目</p><p><img src="https://img-blog.csdn.net/20180810112749800?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>20、</strong>根据下列哪一因素引入了工作集模型？</p><p>A、系统效率下降</p><p>B、页面置换算法选择不合理</p><p>C、程序的局部性原理</p><p>D、分配给进程的页框数目太少</p><p><img src="https://img-blog.csdn.net/20180810112900895?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>21、</strong>下列关于工作集模型的叙述中，哪一个是错误的？</p><p>A、每个进程有一个工作集</p><p>B、工作集大小与缺页率无关</p><p>C、工作集的大小是可以调整的</p><p>D、工作集模型可以解决系统的颠簸（抖动）问题</p><p><img src="https://img-blog.csdn.net/20180810113103955?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>22、</strong>有一个虚拟页式存储系统，分配给某个进程3个页框（假设开始时，页框均为空），页面访问序列是：4，3，2，1，4，3，5，4，3，2，1，5。若采用最佳页面置换算法OPT，缺页次数为</p><p>A、7</p><p>B、8</p><p>C、9</p><p>D、10</p><p><img src="https://img-blog.csdn.net/20180810113204648?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>23、</strong>有一个进程要把128×256的数组置初值“0”，数组中的每个元素为一个整数。页面大小为每页256个整数，数组按行存放。系统分配给该进程一个页框，初始时为空。程序编制如下：</p><p></p><p>var A：array [1..128，1..256] of integer;</p><p>for j:= 1 to 256 do</p><p>for i:= 1 to 128 do</p><p>A[i, j]:= 0;</p><p>若页面置换算法采用先进先出算法(FIFO)，则该进程执行时会产生多少次缺页异常？</p><p>A、64 × 128</p><p>B、128 × 256</p><p>C、64 × 256</p><p>D、256 × 256</p><p><strong>24、</strong>下列关于存储管理的各种技术中，哪一项不需要硬件支持？</p><p>A、快表(TLB)</p><p>B、地址转换</p><p>C、交换技术</p><p>D、存储保护</p><p><img src="https://img-blog.csdn.net/20180810113531934?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810113606505?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810113628623?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810103253145?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810105155473?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810102513120?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810102651138?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810114151140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>25、</strong>下列哪一项不属于页错误(Page Fault)发生的原因？</p><p>A、所访问的页面在磁盘上</p><p>B、用户进程访问的地址对应的页表项的U/S位是S标志</p><p>C、虚拟地址落在地址空间中没有内容的区域</p><p>D、用户进程对一个页面执行了读操作</p><p><strong>26、</strong>在虚拟页式存储系统中，引入快表后，MMU将虚拟地址划分为虚页号和页内偏移，之后的主要工作包括：</p><p>①根据虚页号查找页表，得到对应的页表项</p><p></p><p>②根据虚页号查找快表TLB，得到对应的页框号</p><p></p><p>③根据页表项中的页框号与页内偏移形成物理地址</p><p></p><p>④MMU产生Page Fault，陷入操作系统，执行缺页异常处理程序</p><p></p><p>下列选项中，哪一项不是MMU的正确工作顺序？</p><p>A、②①③</p><p>B、②③</p><p>C、②①④③</p><p>D、②④①③</p><p><strong>27、</strong>下列哪些因素影响了虚存的容量？</p><p>A、磁盘空间大小</p><p>B、物理内存大小</p><p>C、数据存放的实际地址</p><p>D、计算机系统的寻址机制</p><p>E、快表的大小</p><p><strong>28、</strong>下列关于快表的叙述中，哪些是正确的？</p><p>A、快表的内容是页表的子集</p><p>B、对快表的查找是按内容并行完成的</p><p>C、引入快表可以加快地址转换速度</p><p>D、操作系统实现进程切换的时候会刷新TLB</p><p>E、快表保存在内存固定位置</p><p><img src="https://img-blog.csdn.net/20180810113531934?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810113628623?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>29、</strong>虚存是构建在计算机系统中的存储体系之上的，是操作系统分配给进程运行的地址空间。（T）</p><p><strong>30、</strong>在虚拟页式存储系统中，选择页面置换算法时应尽量注意减少或避免颠簸或抖动现象的发生。（T）</p><p><strong>31、</strong>当内存空闲页框数量不足时，操作系统实施清除策略。所谓清除策略是把正在运行进程所用的一些页框收回作为空闲页框。（T）</p><p><strong>32、</strong>Linux中为加快进程创建采用了写时复制技术，该技术的实现支持是在存储管理模块完成的。（T）</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统文件系统题库</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>UNIX系统中，把输入输出设备看做是</p><p>A、普通文件</p><p>B、目录文件</p><p>C、特殊文件</p><p>D、索引文件</p><p><img src="https://img-blog.csdn.net/20180813095855218?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>2、</strong>文件的逻辑结构是由下列哪一项决定的？</p><p>A、操作系统</p><p>B、磁盘容量</p><p>C、用户</p><p>D、文件属性</p><p><img src="https://img-blog.csdn.net/20180813095924134?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>3、</strong>文件系统实现文件的按名存取是通过下列哪一项工作完成的？</p><p>A、文件寻址</p><p>B、位示图查找</p><p>C、目录项分解</p><p>D、文件目录查找</p><p><strong>4、</strong>下列哪一项不是文件控制块中的内容？</p><p>A、口令</p><p>B、文件建立日期</p><p>C、文件在磁盘上的地址</p><p>D、文件在内存中的地址</p><p><img src="https://img-blog.csdn.net/20180810160645174?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>5、</strong>下列关于文件目录及实现的叙述中，哪一个是不正确的？</p><p>A、文件目录是文件控制块的有序集合</p><p>B、树形目录结构存储在磁盘上对应了一个目录文件</p><p>C、目录项分解法可以加快文件的目录检索速度</p><p>D、从当前目录开始查找文件可以提高文件的检索速度</p><p><img src="https://img-blog.csdn.net/20180810160824147?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810161121251?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180810161159584?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>6、</strong>某文件系统空间的最大容量为4TB(1T=240)，以磁盘块为基本分配单位，磁盘块大小为1KB。文件控制块(FCB)包含一个512B的索引表。如果索引表只采用直接索引结构，存放文件占用的磁盘块号。在该文件系统中，单个文件最大长度为多少块?</p><p>A、64</p><p>B、128</p><p>C、256</p><p>D、512</p><p><strong>7、</strong>下列哪一项不需要记录在用户打开文件表中？</p><p>A、文件描述符</p><p>B、读写指针</p><p>C、共享计数</p><p>D、系统打开文件表入口指针</p><p><strong>8、</strong>某文件系统把UNIX的三级索引结构改进为四级索引结构，假设物理块的大小为1KB，用4字节索引一个物理块号。主索引表含有10个4字节的物理地址块指针，其中前6个为直接索引，第7个为一级索引，第8个为二级索引，第9个为三级索引，第10个为四级索引。那么，该文件系统中一个文件最多可以有多少个文件块？</p><p>A、6+<img src="https://img-blog.csdn.net/20180802151420604?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>++<img src="https://img-blog.csdn.net/20180802151420622?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180802151420616?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>B、6+<img src="https://img-blog.csdn.net/20180802151421675?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/2018080215142168?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180802151421265?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180802151421748?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>C、6+<img src="https://img-blog.csdn.net/20180802151421524?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180802151421622?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180802151421846?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/2018080215142228?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>D、6+<img src="https://img-blog.csdn.net/20180802151422672?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180802151422116?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180802151422194?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+</p><p><strong>9、</strong>在实现文件系统时，可采用“目录项分解法”加快文件目录的检索速度。假设当前文件存放在磁盘上，物理块大小为1024字节，文件控制块(FCB)大小为128字节，其中文件名占用16字节。目录项分解后，符号部分占20字节（包括文件名和内部索引号），基本信息部分占112字节（包括文件索引号和其他信息）。假设某一目录文件共有254个文件控制块，则采用“目录项分解法”前，查找该目录文件的某一个文件控制块的平均访盘次数是</p><p>A、14.5</p><p>B、15.5</p><p>C、16.5</p><p>D、17.5</p><p><strong>10、</strong>针对文件dir1file1，在UNIX系统中进行目录检索的过程包括以下几个步骤：</p><p>① 在i节点区查找file1的i节点</p><p>② 在i节点区查找dir1的i节点</p><p>③ 在根目录文件中查找dir1的目录项</p><p>④ 在dir1目录文件中查找file1的目录项</p><p>下列哪一个步骤顺序是正确的？</p><p>A、②①③④</p><p>B、③①②④</p><p>C、③②④①</p><p>D、③④①②</p><p><strong>11、</strong>下列关于文件索引结构的叙述中，哪些是正确的？</p><p>A、采用索引结构，逻辑上连续的文件存放在连续的物理块中</p><p>B、索引结构的优点是访问速度快，文件长度可以动态改变</p><p>C、从文件控制块中可以找到索引表或索引表的地址</p><p>D、系统为每个文件建立一张索引表</p><p>E、采用索引结构会引入存储开销</p><p><strong>12、</strong>下列关于文件卷的叙述中，哪些是正确的？</p><p>A、同一文件卷使用同一份管理数据(元数据)</p><p>B、文件卷可以建立在磁盘分区上</p><p>C、UNIX的文件卷信息存放在超级数据块、空闲空间管理区</p><p>D、FAT文件系统的文件卷信息仅保存在文件分配表中</p><p>E、格式化是在一个逻辑分区上建立管理数据的过程</p><p><img src="https://img-blog.csdn.net/20180813114521259?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>13、</strong>成组链接法是文件系统中可以采用的文件的物理结构。（F）</p><p>（链接结构）</p><p><img src="https://img-blog.csdn.net/20180813114321698?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180813114430144?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>14、</strong>在文件系统中，文件的逻辑块与存储介质上物理块存放顺序一致的物理结构是索引结构。（F）</p><p><strong>15、</strong>引入了当前目录的概念可以加快目录检索的速度 。（T）</p><p><strong>16、</strong>Windows的FAT文件系统中，文件的物理结构采用的是链接结构。（T）</p><p><strong>17、</strong>下列关于FAT文件系统的叙述中，哪一个是不正确的？</p><p>A、FAT16文件系统支持Unicode编码（FAT32支持Unicode编码）</p><p>B、文件分配表FAT的作用之一是空闲簇的管理</p><p>C、FAT文件系统中，目录项即是文件控制块</p><p>D、FAT32中每一个文件对应两个或两个以上的目录项</p><p><img src="https://img-blog.csdn.net/20180813140113769?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>18、</strong>系统为了管理文件，设置了专门的数据结构文件控制块（FCB）。FCB是在执行哪一个系统调用时建立的？</p><p>A、open</p><p>B、seek</p><p>C、create</p><p>D、copy</p><p><strong>19、</strong>使用文件前要先打开文件。在执行完“打开”文件系统调用后，系统会返回给进程一个</p><p>A、文件长度</p><p>B、文件描述符</p><p>C、内存地址</p><p>D、文件打开方式</p><p><img src="https://img-blog.csdn.net/20180813140256108?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>20、</strong>下列哪一项不是打开文件时所做的工作？</p><p>A、填写文件控制块中的文件读写方式</p><p>B、检查文件名所对应的文件控制块是否已调入内存</p><p>C、填写用户打开文件表中的读写指针</p><p>D、检查操作的合法性</p><p><img src="https://img-blog.csdn.net/2018081314050765?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>21、</strong>下列关于磁盘结构及磁盘调度的叙述中，哪一条是不正确的？</p><p>A、磁盘的物理块号与磁盘地址可以相互转换</p><p>B、磁盘调度时，首先是移臂调度，然后是旋转调度</p><p>C、最短寻道时间优先（SSTF）调度算法可能导致饥饿现象</p><p>D、若读的扇区在磁盘最里道，则磁盘调度的时间最长</p><p><img src="https://img-blog.csdn.net/20180813140758451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>22、</strong>假设磁头在65号柱面上操作时，有其他访问请求到达，其柱面(磁道)号为85、46、114、16和116。当系统完成65号柱面(磁道)的操作后，若采用最短寻找时间优先(SSTF)磁盘调度算法，为完成这些请求，磁头需要移动的柱面(磁道)数是</p><p>A、181</p><p>B、149</p><p>C、159</p><p>D、139</p><p><img src="https://img-blog.csdn.net/20180813140758451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>23、</strong>下列哪一种磁盘驱动调度算法可能引起磁头臂频繁大幅度移动</p><p>A、先来先服务算法</p><p>B、最短寻道时间优先算法</p><p>C、扫描算法</p><p>D、旋转调度算法</p><p><strong>24、</strong></p><p>![@G09MQS_KCY4<a href="http://i1.chinesemooc.org/course/formula/201512/0fa3f0361005f71ce16237f669743f0d.png" target="_blank" rel="noopener">_OL)IPU@0F.png</a></p><p>A、①、②、③、④</p><p>B、②、①、④、③</p><p>C、①、②、④、③</p><p>D、②、①、③、④</p><p><strong>25、</strong>RAID技术是通过下列哪一种方法来提高文件系统性能的？</p><p>A、镜像</p><p>B、奇偶校验</p><p>C、数据分条</p><p>D、海明码校验</p><p><img src="https://img-blog.csdn.net/20180813141211708?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/2018081314194133?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180813142016349?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>26、</strong>设计文件系统时应尽量减少访问磁盘的次数，以提高文件系统的性能。下列各种措施中，哪些可以减少磁盘服务时间？</p><p>A、块高速缓存</p><p>B、磁盘的旋转调度</p><p>C、磁盘碎片整理</p><p>D、当前目录</p><p>E、内存映射文件</p><p><strong>27、</strong>在UNIX文件系统中，若文件F的权限是765，则表示：</p><p>A、文件的属主可以读写该文件</p><p>B、文件的同组用户可以读写该文件</p><p>C、文件的属主可以运行该文件</p><p>D、文件的其他用户可以运行该文件</p><p>E、文件的其他用户可以读写该文件</p><p><img src="https://img-blog.csdn.net/20180813141909923?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>28、</strong>文件系统的一致性就是指文件卷在磁盘上的管理数据是正确的。（T）</p><p><img src="https://img-blog.csdn.net/20180813142131120?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>29、</strong>假如在UNIX文件系统中，将i节点区分成几部分，均匀分布存放在磁盘上，建立文件时把该文件的i节点存放在离数据块最近的i节点区域。这一方案可以提高文件系统的性能。（T）</p><p><img src="https://img-blog.csdn.net/20180813145757873?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>30、</strong>若采用块高速缓存机制，读文件数据块时先从块高速缓存中查找该块是否存在，若不存在，则启动磁盘将数据块直接读入进程地址空间。（F）</p><p><img src="https://img-blog.csdn.net/20180813143521278?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>31、</strong>若采用块高速缓存机制，则进程在运行时打开文件并读入一些文件内容后，整个系统中有三处存储空间包含了这些文件信息。（T）</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构二叉树题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>一棵有512个结点的完全二叉树的高度为多少？（独根树高度为1）</p><p>解析</p><p><img src="http://i1.chinesemooc.org/course/formula/201510/4c1788ae29689fc9830465f9e6a2ce09.png" alt="21.png"></p><p>答案： 10</p><p><strong>2、</strong>请写出下面这棵二叉树的中序遍历</p><p><img src="http://i1.chinesemooc.org/course/formula/201709/245804597c063667ac3f1c6b39725afd.png" alt="Screen Shot 2017-09-05 at 23.56.59.png"></p><p>解析</p><p>左-根-右 left-root-right</p><p>答案： LXMECKPBQHDA</p><p><strong>3、</strong>下列关于二叉树性质的说法正确的有：</p><p>A、非空满二叉树的结点个数一定为奇数个。</p><blockquote><p>解析：非空满二叉树只有度为0或者度为2两种结点，而这两种结点的个数差为1，所以加起来必为奇数。</p><p><img src="https://img-blog.csdn.net/20180816102734291?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>n0 = 5个 n2 = 4个 n0 = n2 + 1</p></blockquote><p>B、非完全二叉树也可以用像完全二叉树那样使用顺序存储结构进行存储。</p><blockquote><p>解析：非完全二叉树无法知道每一层哪些位置缺了结点，不能像完全二叉树那样直接计算出两个儿子的编号，所以不能用顺序存储结构存储。</p></blockquote><p>C、当一棵完全二叉树是满二叉树时，叶子结点不一定集中在最下面一层。</p><blockquote><p>解析：只要倒数第二层的度都为0或者2，此棵完全二叉树即为满二叉树，最下面一层不一定要全满</p></blockquote><p>D、完全二叉树最多只有最下面的一层结点度数可以小于2。</p><blockquote><p>解析：倒数第二层也可以有度数为0的结点。</p><p><img src="https://img-blog.csdn.net/20180816105548554?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p>E、一棵非空二叉树的为空的外部结点数等于其结点数加1。</p><blockquote><p>解析：设度为0,1和2的结点数为<img src="https://img-blog.csdn.net/20180801144724543?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>，<img src="https://img-blog.csdn.net/20180801144723510?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>和<img src="https://img-blog.csdn.net/20180801144724162?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>，那么为空的外部结点数目等于2<img src="https://img-blog.csdn.net/20180801144723963?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180801144723967?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>=<img src="https://img-blog.csdn.net/20180801144723994?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180801144724989?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+<img src="https://img-blog.csdn.net/20180801144724504?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>+1，于是等于结点数加1。</p><p><img src="https://img-blog.csdn.net/20180816110930463?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>长方形为扩充的外部结点数 = 15个</p><p>圆形为原先的二叉树结点数 = 14个</p></blockquote><p>F、满二叉树的所有结点的度均为2。</p><blockquote><p>解析：结点度数还可以为0。</p></blockquote><p><strong>4、</strong>已知一棵树的前序遍历为ABDEGCF，中序遍历为DBGEACF，求这棵树的后序遍历。</p><p>解析</p><p><img src="http://i1.chinesemooc.org/course/formula/201510/517904ff3302c5da25a1170d5a38d904.png" alt="30.png"></p><p>答案： DGEBFCA</p><p><strong>5、</strong>下列关于二叉树遍历的说法正确的有:</p><p>A、只有空二叉树和一个根结点的二叉树这两种二叉树的前序和中序遍历的顺序恰好一样。</p><blockquote><p>解析：前序为中左右，而中序为左中右，所有结点都没有左子树后，两者恰好一样。所以所有结点左子树为空的二叉树也满足要求。</p></blockquote><p>B、所有结点左子树为空的二叉树的前序和中序遍历顺序恰好一样。</p><blockquote><p>解析：前序为中左右，而中序为左中右，所有结点都没有左子树后，两者恰好一样。</p></blockquote><p>C、所有结点右子树为空的二叉树的前序和中序遍历顺序恰好一样。</p><blockquote><p>解析： 前序为中左右，而中序为左中右，所有结点都没有右子树后，前序为中左，而中序为左中，两者不同。</p></blockquote><p>D、只有空二叉树和一个根结点的二叉树这两种二叉树的前序和后序遍历的顺序恰好一样。</p><blockquote><p>解析：前序为中左右，而后序为左右中，缺失左子树，前序为中右，而后序为右中；</p><p>缺失右子树，前序为中左，而后序为左中，都不一样。<strong>（下面的选项同理）</strong></p></blockquote><p>E、所有结点左子树为空的二叉树的前序和后序遍历顺序恰好一样。</p><blockquote><p>解析：前序为中左右，而后序为左右中，所以缺失左子树或者右子树都不能让两者一样。</p></blockquote><p>F、所有结点右子树为空的二叉树的前序和后序遍历顺序恰好一样。</p><blockquote><p>解析：前序为中左右，而后序为左右中，所以缺失左子树或者右子树都不能让两者一样。</p></blockquote><p>G、只有空二叉树和一个根结点的二叉树这两种二叉树的中序和后序遍历的顺序恰好一样。</p><blockquote><p>解析：中序为左中右，而后序为左右中，所有结点都没有右子树后，两者恰好一样。所以所有结点右子树为空的二叉树也满足要求。</p></blockquote><p>H、所有结点左子树为空的二叉树的中序和后序遍历顺序恰好一样。</p><blockquote><p>解析：中序为左中右，而后序为左右中，所有结点都没有右子树后，两者恰好一样。所以所有结点右子树为空的二叉树才满足要求。</p></blockquote><p>I、所有结点右子树为空的二叉树的中序和后序遍历顺序恰好一样。</p><blockquote><p>解析： 中序为左中右，而后序为左右中，所有结点都没有右子树后，两者恰好一样。</p></blockquote><p>J、存在一棵非空二叉树，它的前序、中序和后序遍历都是一样的。</p><blockquote><p>解析：只有一个根结点的二叉树满足要求。</p></blockquote><p><strong>6、</strong>下列关于二叉搜索树的说法正确的有</p><p>A、二叉搜索树按照中序遍历将各结点打印出将各结点打印出来，将得到按照由小到大的排列。</p><blockquote><p>解析：</p><p><img src="https://img-blog.csdn.net/20180816114746399?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p><img src="https://img-blog.csdn.net/20180816135722940?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>B、如果结点<strong>χ</strong>的左子树有右子树，则存在某个结点的值介于结点<strong>χ</strong>的值和<strong>χ</strong>左儿子的值之间，并且这个结点在x的左子树之中。</p><blockquote><p>解析：这样的结点就位于<strong>χ</strong>的左子树的右子树中。</p><p><img src="https://img-blog.csdn.net/20180816141035139?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p>C、当根结点没有左儿子时，根结点一定是值最小的结点。</p><blockquote><p>解析：右子树中的结点的值都大于根结点，所以根结点的值是最小的。</p></blockquote><p>D、二叉搜索树一定是满二叉树。</p><blockquote><p>解析：不一定。如果对于一个结点存在值比它大的结点，但不存在比它小的，这时它可能就只有一个儿子。</p></blockquote><p>E、二叉搜索树一定是完全二叉树。</p><blockquote><p>解析：不一定。按照从小到大的顺序依次插入一些值（数量超过1个），就可以让二叉搜索树变成一条链，这样显然不是完全二叉树。</p></blockquote><p>F、从根结点一直沿右儿子向下找不一定能找到树中值最大的结点。</p><blockquote><p>解析：右子树中的结点的值都大于根结点，所以根结点的值是最小的。</p><p><img src="https://img-blog.csdn.net/2018081614124829?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p><strong>7、</strong></p><p>从空二叉树开始，严格按照二叉搜索树的插入算法（不进行旋转平衡），逐个插入关键码构造出一棵二叉搜索树，以怎样的顺序插入关键码集合{14,32,47,6,9,12,78,63,29,81}可以使得树的深度最小？请依次写出插入到树中的元素，每两个元素之间用一个空格隔开。</p><p>解析</p><blockquote><p>通过[<img src="https://img-blog.csdn.net/20180801145505563?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>]=<strong>4</strong>可以得到树的最小层数。然后因为需要保证先插入的元素尽可能的小，所以可以使得右子树尽可能的满。构造出这样一棵二叉搜索树后，按照前序遍历可以得出答案。 如果有多组满足要求的方案，请使得你的答案中先插入的元素尽可能的小。</p><p><img src="https://img-blog.csdn.net/20180816143019518?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://img-blog.csdn.net/20180816142708292?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案： 12 6 9 47 29 14 32 78 63 81</p></blockquote><p><strong>8、</strong>下列关于堆的说法正确的有:</p><p>A、堆一定是满二叉树。</p><blockquote><p>解析：有些堆的倒数第二层有部分结点只有一个儿子。</p><p><img src="https://img-blog.csdn.net/20180816144107870?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p>B、最小堆中，最下面一层最靠右的结点一定是权值最大的结点。</p><blockquote><p>解析：不一定。最小堆只保证了每个结点都比它的两个儿子都小，所以它左儿子的值可能比右儿子的大，所以最大的结点不一定靠右。</p></blockquote><p>C、堆是实现优先队列的惟一方法。</p><blockquote><p>解析：堆只是实现优先队列的一种方法。用普通的队列也可以实现优先队列，只是效率比较低。</p></blockquote><p>D、堆一定是完全二叉树。</p><blockquote><p>解析：定义如此。</p><p><img src="https://img-blog.csdn.net/20180816144359119?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p>E、最小堆中，某个结点左子树中最大的结点可能比右子树中最小的结点小。</p><blockquote><p>解析：堆中一个结点的左儿子和右儿子并没有严格的大小关系，所以存在这种情况。</p></blockquote><p>F、使用筛选法建堆要比将元素一个一个插入堆来建堆效率高。</p><blockquote><p>解析：筛选法建堆的时间复杂度为<strong>O**</strong>(n)<strong>，而一个一个插入建堆时间复杂度为</strong>O<strong>**(nlogn)</strong>。其中，<strong>n</strong>为堆中元素个数。</p></blockquote><p><strong>9、</strong>下列关于Huffman树和Huffman编码的说法正确的有:</p><p>A、Huffman树一定是满二叉树。</p><blockquote><p>解析：在建立的过程中，每次都选取两棵子树进行合并，所以所有结点要么有两个儿子，要么没有儿子。</p><p><img src="https://img-blog.csdn.net/20180816145737263?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p>B、Huffman编码是一种前缀编码。</p><blockquote><p>解析：Huffman树中，所有需要编码的内容都在叶结点中，所以任何内容的编码都不会是其它内容编码的前缀。</p></blockquote><p>C、Huffman树一定是完全二叉树。</p><blockquote><p>解析：取一棵是完全二叉树的Huffman树翻转过来，这棵树依然是Huffman树，但是已经不再是完全二叉树了。</p></blockquote><p>D、Huffman编码中所有编码都是等长的。</p><blockquote><p>解析：Huffman树的叶结点并不一定在同一层，所以Huffman编码不等长。</p></blockquote><p>E、对于同样的一组权值两两不同的内容可以得到不同的Huffman编码方案。</p><blockquote><p>解析：把某一个结点往左子树编码0，往右子树编码1反过来就可以得到另外一组编码方案。</p></blockquote><p>F、使用频率越高的字母，Huffman编码越长。</p><blockquote><p>解析：频率越高，Huffman编码应该越短，这样才能提高编码效率。</p></blockquote><p><strong>10、</strong>请阅读下面一段代码</p><p><img src="http://i1.chinesemooc.org/course/formula/201510/60ef1cddc8d526c8b7a178b20ac10fda.png" alt="14.png"></p><p>若此段代码的作用是用来进行<strong>前序遍历</strong>，那么应该在几号访问点进行访问？（只需要填写数字）</p><p><img src="http://www.chinesemooc.org/attachment/homework/pic/20151022/2367/38203181445485257.png" alt></p><p>解析</p><p>使用深搜算法进行前序遍历，根左右，每达到一个结点就应该进行访问。</p><p>答案： 1</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构内排序题库</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%86%85%E6%8E%92%E5%BA%8F%E9%A2%98%E5%BA%93/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%86%85%E6%8E%92%E5%BA%8F%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>已知一组元素的排序码为(46，74，16，53，14，26，40，38，86，65，27，34)，利用直接插入排序的方法（第一个数字不用插入）,写出第四次向前面有序表插入一个元素后的排列结果。</p><blockquote><p>解析</p><p>未插入元素前，排列结果为46 74 16 53 14 26 40 38 86 65 27 34</p><p>第一次插入74，结果为 46 74 16 53 14 26 40 38 86 65 27 34</p><p>第二次插入16，结果为 16 46 74 53 14 26 40 38 86 65 27 34</p><p>第三次插入53，结果为 16 46 53 74 14 26 40 38 86 65 27 34</p><p>第四次插入14，结果为 14 16 46 53 74 26 40 38 86 65 27 34</p><p>答案： 14 16 46 53 74 26 40 38 86 65 27 34</p></blockquote><p><strong>2、</strong>下列排序方法的比较次数与记录的初始排列状态无关的是：</p><p>A、直接选择排序</p><p>B、直接插入排序</p><p>C、冒泡排序</p><p>D、快速排序</p><blockquote><p>解析</p><p>直接选择排序不管记录初始排列如何，第i趟排序中选出最小关键字的记录都需要比较n-i次，选最小关键字一共需要比较</p><p>n-1+n-2+…+1=n(n-1)/2 次，还有比较是否需要交换关键字，一共n-1次</p></blockquote><p><strong>3、</strong>某整型数组Ａ的１０个元素值依次为6,2,9,7,3,8,4,5,0,1,用快速排序方法（课程中介绍的快速排序实现方式），取第一个元素值６作为分割数，将Ａ中元素由小到大排序，写出快速排序第一次分隔后Ａ中的结果()。</p><blockquote><p>解析</p><p>选择轴值并存储轴值;</p><p>最后一个元素放到轴值位置;</p><p>初始化下标 i, j，分别指向头尾;</p><p>i 递增直到遇到比轴值大的元素，将此元素覆盖到j的位置；j 递减直到遇到比轴值小的元素，将此元素覆盖到 i 的位置；</p><p>重复上一步直到 i==j，将轴值放到 i 的位置，完毕。</p><p><img src="https://img-blog.csdn.net/20180817151514441?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>答案： 1 2 0 5 3 4 6 8 7 9</p><p>扩展一个例子：</p><p><img src="https://img-blog.csdn.net/20180817151559276?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p><strong>4、</strong>在对一组记录（50，40，95，20，15，70，60，45，80）进行从小到大冒泡排序时，第一趟需进行相邻记录的交换的次数为（ ），在整个排序过程中共需进行（ ）趟才可完成。</p><blockquote><p>解析</p><p>参考上课的例子：</p><p><img src="https://img-blog.csdn.net/20180817153557886?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>从最后两个元素开始</p><p><img src="https://img-blog.csdn.net/20180817154909257?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>第一趟需要交换45和60，45和70，15和20，15和95，15和40，15和50，所以共6次，</p><p>而交换7趟过后，就已经NoSwap==true了，故答案为6 7</p><p>答案： 6 7</p></blockquote><p><strong>5、</strong>需要对1000个大型的记录进行排序，记录本身存储在外存中，在内存中只保存了所有记录的排序码。排序码之间的比较非常快，但是移动代价很大，因为一旦移动一个排序码，相应的外存中的记录也要移动，将涉及上百个磁盘块的移动，应该使用何种排序方法（）</p><p>A、直接选择排序</p><p>B、堆排序</p><p>C、快速排序</p><p>D、插入排序</p><blockquote><p>解析</p><p>应该选择直接选择排序，此排序法可以达到尽量少的移动量，虽然比较次数达到N^2,但是相对于外存的处理时间来说，不是关键因素。</p></blockquote><p><strong>6、</strong>已知一组元素的排序码为(67, 34, 56, 12, 88, 3, 15, 36, 27, 98, 11, 55)，利用自顶向下划分的非优化归并排序方法（划分到小于等于2个元素），写出第二趟二路归并排序后的结果()。中间用一个空格隔开。</p><blockquote><p>解析</p><p>分组结果为（67）（ 34 56）（ 12 ）（88 3）（ 15 ）（36 27）（ 98 ）（11 55），第一趟二路归并结果应该是（34 56 67 ）（3 12 88）（ 15 27 36 ）（11 55 98），第二趟二路归并结果应该是（3 12 34 56 67 88）（ 11 15 27 36 55 98），即答案为3 12 34 56 67 88 11 15 27 36 55 98</p><p>答案： 3 12 34 56 67 88 11 15 27 36 55 98</p></blockquote><p><strong>7、</strong>排序算法大都是基于数组实现的，大部分的算法也能用链表来实现，但有些特殊的算法不适合线性链表存储，不适合（使算法复杂度增大）链式存储的算法有：</p><p>A、堆排序</p><p>B、shell排序</p><p>C、直接选择排序</p><p>D、插入排序</p><p>E、归并排序</p><p>F、快速排序</p><blockquote><p>解析</p><p>堆排序：因为需要随机访问。</p><p>shell排序：它是采用增量序列{2k,2k-1,…,2,1}，也就是说对每隔n个（n为增量序列的某个数）数字进行排序，这种方法过于依赖数据的位置，用链式存储，实在是很不方便。</p><p>直接选择排序：用一个指针维护已排好序的数组末尾（也就是乱序数组开头）就可以了。</p><p>插入排序：不需要随机访问，是顺序访问并且移动的，而且移动操作比较多，所以用链表比较合适</p><p>归并排序：不需要随机访问，是顺序访问并且合并的，而且移动操作比较多，所以用链表比较合适</p><p>快速排序：不需要随机访问，是顺序访问并且移动的，而且移动操作比较多，所以用链表比较合适</p></blockquote><p><strong>8、</strong>对初始状态为递增的表按递增顺序排序，最省时间的是（ ）算法</p><p>A、插入排序</p><p>B、堆排序</p><p>C、快速排序</p><p>D、归并排序</p><blockquote><p>显示解析</p><p>如果初始状态递增，插入排序不需要交换，只需要n-1次比较，是最少时间代价的。而堆排序需要建堆，归并排序需要分组排序再合并，都需要数据的移动时间。而快速排序需要的比较次数太多，最小时间代价为Θ(nlog n)</p></blockquote><p><strong>9、</strong>下面的排序算法哪些是稳定的()。</p><p>A、插入排序</p><p>B、冒泡排序</p><p>C、归并排序</p><p>D、桶式排序</p><p>E、shell排序</p><p>F、选择排序</p><p>G、堆排序</p><p>H、快速排序</p><p><strong>10、</strong>假设数组长度为n (n&gt;=20)，基数为r (r&gt;=10)，排序码个数为d (d&gt;=3)，则采用顺序存储的基数排序的空间复杂度至少为 Θ(<strong>____</strong>)</p><p>A、n+r</p><p>B、n</p><blockquote><p>解析：</p><p><img src="https://img-blog.csdn.net/20180820095152561?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>该例子中，数组长度为10000，基数为10：0 1 2 3 4 5 6 7 8 9，排序码个数为4：个十百千</p></blockquote><p><strong>11、</strong>对于序列{E，A，S，Y，Q，U，E，S，T，I，O，N}，以{6，3，1}为增量采用Shell排序。头两趟{6，3}增量排序后，关键字的累积比较次数为：</p><p>A、16</p><p>B、17</p><blockquote><p>解析：</p><p>第一趟比较的时候，E和E比较，A和S比较，S和T比较，Y和I比较后交换，Q和O比较后交换，U和N比较后交换，结果为是EASIONESTYQU。 然后EIEY分为一组，用插入排序需要比较IE EI EE YI，AOSQ分为一组，比较OA SO QS QO，SNTU分为一组，比较NS TS UT。第一趟比较次数为6，第二趟比较次数为11。</p><p><img src="https://img-blog.csdn.net/20180820103405923?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p><strong>12、</strong>下面是图的拓扑排序的是？(多选)</p><p><img src="http://i1.chinesemooc.org/course/formula/201610/eb69927aaf8baae83211ee3fadf836e7.png" alt></p><p>A、2 8 0 7 1 3 5 6 4 9 10 11 12</p><p>B、2 8 7 0 6 9 11 12 10 1 3 5 4</p><p>C、8 2 7 3 0 6 1 5 4 9 10 11 12</p><p>D、8 2 7 0 6 9 10 11 12 1 3 5 4</p><blockquote><p>解析：</p><p>每次删除入度为0的节点，及这个节点的所有出边。均是一条拓扑排序的结果。</p><p><img src="https://img-blog.csdn.net/20180820105345122?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5ZHlkMTEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></blockquote><p><strong>13、</strong>在图书馆里计算机类书籍区一共有12列书架，书架上的书本来都是按照编目号排列好的，其中有些书被读者放错了地方，但通常不会超过一个书架。来将这些书重新放回正确位置，应该使用何种排序方法：</p><p>A、插入排序</p><p>B、归并排序</p><p>C、快速排序</p><p>D、直接选择排序</p><p>E、堆排序</p><blockquote><p>解析：</p><p>既然偏移的位置并不是很远，而且大部分有序，那么可以选择插入排序。</p></blockquote><p><strong>14、</strong>15个记录的冒泡排序算法所需最大交换次数为<strong>__</strong>，最小交换次数为<strong>__</strong>。</p><blockquote><p>解析</p><p>n个记录的冒泡排序算法的最大交换次数为n(n-1)/2,最小交换次数为0</p><p>答案：105和0</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题库 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成乘法器和除法器题库</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%98%E6%B3%95%E5%99%A8%E5%92%8C%E9%99%A4%E6%B3%95%E5%99%A8%E9%A2%98%E5%BA%93/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B9%98%E6%B3%95%E5%99%A8%E5%92%8C%E9%99%A4%E6%B3%95%E5%99%A8%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、</strong>对于第一版乘法器，当乘数寄存器最低位为1时，在该次循环过程中，需要将乘数寄存器向哪个方向移动，需要将被乘数寄存器向哪个方向移动？</p><p><strong>A、右、左</strong></p><p>B、不移动，左</p><p>C、不移动，右</p><p>D、右、右</p><p>E、左、左</p><p>F、右，不移动</p><p><strong>2、</strong>对于第一版乘法器，在每次循环的过程中，需要将被乘数寄存器的内容与乘积寄存器中的内容相加，并将结果放入乘积寄存器的条件是：</p><p><strong>A、乘数寄存器的最低位为1</strong></p><p>B、乘数寄存器的最低位为0</p><p>C、被乘数寄存器的最低位为1</p><p>D、被乘数寄存器的最低位为0</p><p>E、乘积寄存器的最低位为1</p><p><strong>3、</strong>对于32-bit的第一版乘法器，每次循环都需要判断的条件是哪几个？</p><p><strong>A、乘数寄存器的最低位是否为0</strong></p><p><strong>B、是否循环了32次</strong></p><p>C、</p><p>被乘数寄存器的最低位是否为0</p><p>D、</p><p>是否循环了33次</p><p>E、</p><p>是否循环了31次</p><p><strong>4、</strong>以4-bit的第一版乘法器为例，对于二进制数00100011，当第2次循环结束时，被乘数寄存器、乘数寄存器和乘积寄存器的值分别是？</p><p><strong>A、00001000，0000，00000110</strong></p><p>B、00001000，0001，00000110</p><p>C、00000100，0000，00000110</p><p>D、00000100，0000，00000010</p><p><strong>5、</strong>对于32-bit的第一版乘法器，需要包含以下哪些组成部分？</p><p><strong>A、64位ALU</strong></p><p><strong>B、32位的乘数寄存器</strong></p><p><strong>C、64位的被乘数寄存器</strong></p><p><strong>D、64位的乘积寄存器</strong></p><p>E、32位ALU</p><p>F、32位的被乘数寄存器</p><p><strong>6、</strong>对于第一版乘法器，下列哪些属于对其进行面积优化的措施？</p><p><strong>A、将加法运算和两个移位同时进行</strong></p><p><strong>B、将加法器和被乘数寄存器位宽减半优化面积</strong></p><p><strong>C、64-bit加法器缩小为32-bit</strong></p><p><strong>D、取消乘数寄存器</strong></p><p><strong>E、乘积寄存器需支持右移</strong></p><p><strong>7、</strong>对于第一版乘法器，控制逻辑的作用是哪些？</p><p><strong>A、控制何时对被乘数寄存器进行移位</strong></p><p><strong>B、控制何时对乘数寄存器进行移位</strong></p><p><strong>C、控制何时将新值写入积寄存器</strong></p><p>D、控制何时将乘积寄存器进行移位</p><p><strong>8、</strong>对于本课中讲授的第二版乘法器，在对乘法器进行面积优化后，一个32-bit乘法器需要包含以下哪些部分？</p><p><strong>A、32位ALU</strong></p><p><strong>B、32位的被乘数寄存器</strong></p><p><strong>C、64位的乘积寄存器</strong></p><p>D、32位的乘数寄存器</p><p>E、64位ALU</p><p>F、32位的乘积寄存器</p><p><strong>9、</strong>对于第一版除法器，在一次循环中当余数寄存器大于0时，需要将商寄存器向哪个方向移动，需要将除数寄存器向哪个方向移动？</p><p><strong>A、左、右</strong></p><p>B、不移动，左</p><p>C、不移动，右</p><p>D、右、右</p><p>E、左、左</p><p>F、右，不移动</p><p><strong>10、</strong>对于第一版除法器，在每次循环的过程中，需要左移商寄存器，并将其最低位设置为1的条件是：</p><p><strong>A、余数大于等于0</strong></p><p>B、余数小于0</p><p>C、除数寄存器的最低位为1</p><p>D、除数寄存器的最低位为0</p><p><strong>11、</strong>一个32-bit除法器，对于第一种除法算法，每次迭代时都需要判断的条件是哪几个？</p><p><strong>A、余数寄存器是否小于0</strong></p><p><strong>B、是否完成了重复了33次循环</strong></p><p>C、除数寄存器是否小于0</p><p>D、是否重复了31次循环</p><p>E、是否重复了32次循环</p><p><strong>12、</strong>对于32-bit的第一版除法器，需要包含以下哪些组成部分？</p><p><strong>A、64位ALU</strong></p><p><strong>B、32位的商寄存器</strong></p><p><strong>C、64位的余数寄存器</strong></p><p><strong>D、64位的除数寄存器</strong></p><p>E、32位ALU</p><p>F、32位的除数寄存器</p><p><strong>13、</strong>以4-bit的第一版除法器为例，对于二进制数0111÷0010，当第2次循环结束时，商寄存器、除数寄存器和余数寄存器的值是？</p><p><strong>A、0000，00001000，00000111</strong></p><p>B、0001，00001000，00000111</p><p>C、0000， 00001000，11110111</p><p>D、0000，00010000，00000111</p><p><strong>14、</strong>对于第二版除法器，在对除法器进行面积优化后，一个32-bit除法器需要包含以下哪些组成部分？</p><p><strong>A、32位ALU</strong></p><p><strong>B、32除数寄存器</strong></p><p><strong>C、64位余数寄存器</strong></p><p>D、64位ALU</p><p>E、32位商寄存器</p><p>F、32位余数寄存器</p><p><strong>15、</strong>对于第二种除法算法，在对除法器进行面积优化后，商的结果放置在哪里？</p><p><strong>A、余数寄存器的低32位</strong></p><p>B、余数寄存器的高32位</p><p>C、除数寄存器的低32位</p><p>D、除数寄存器的高32位</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
            <tag> 题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成：第二次互评作业： cache性能评测与分析</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%EF%BC%9A%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BA%92%E8%AF%84%E4%BD%9C%E4%B8%9A%EF%BC%9A%20cache%E6%80%A7%E8%83%BD%E8%AF%84%E6%B5%8B%E4%B8%8E%E5%88%86%E6%9E%90/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%EF%BC%9A%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BA%92%E8%AF%84%E4%BD%9C%E4%B8%9A%EF%BC%9A%20cache%E6%80%A7%E8%83%BD%E8%AF%84%E6%B5%8B%E4%B8%8E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="问题1：请说明程序实现的功能。-5分"><a href="#问题1：请说明程序实现的功能。-5分" class="headerlink" title="问题1：请说明程序实现的功能。(5分)"></a>问题1：请说明程序实现的功能。(5分)</h2><p>（提示：可以利用“Math”编辑输入数学公式，建议提交之前用Previe查看输入效果）<br>程序结束之后，array中一共有28个word连续储存于起始地址为array的起始地址的内存中，其中：<br>array[0]=array[1]=array[2]=1;<br>array[n]=array[n-1]+array[n-2]+array<a href="n&gt;=3">n-3</a>。</p><h2 id="问题2：分析程序的访存行为，仅考虑数据访存。（5分）"><a href="#问题2：分析程序的访存行为，仅考虑数据访存。（5分）" class="headerlink" title="问题2：分析程序的访存行为，仅考虑数据访存。（5分）"></a>问题2：分析程序的访存行为，仅考虑数据访存。（5分）</h2><p>（提示：访存行为包括程序一共发生了多少次访存操作，每次访存操作的地址之间有什么样的关系等）<br>每次loop中存在lw指令3条，sw指令一条，访存4次；因此25次循环共访存100次。</p><p>每次循环的3次lw指令访问与$t0所保存地址offset为0，4，8的位置，为内存上连续存储的3个word；sw指令访问与当前$t0所保存地址offset为12的位置，与同一循环中lw指令所访问的地址连续。因此同一loop的4次访存操作所涉及的地址均为连续的地址。</p><h2 id="问题3：根据MARS内置的Data-Cache-Simulation-Tool，构建一个容量为8字节的cache，要求块大小为4字节（one-word），替换策略为LRU，组策略为直接映射。运行上述MIPS程序，得到cache命中率为多少？（5分）"><a href="#问题3：根据MARS内置的Data-Cache-Simulation-Tool，构建一个容量为8字节的cache，要求块大小为4字节（one-word），替换策略为LRU，组策略为直接映射。运行上述MIPS程序，得到cache命中率为多少？（5分）" class="headerlink" title="问题3：根据MARS内置的Data Cache Simulation Tool，构建一个容量为8字节的cache，要求块大小为4字节（one word），替换策略为LRU，组策略为直接映射。运行上述MIPS程序，得到cache命中率为多少？（5分）"></a>问题3：根据MARS内置的Data Cache Simulation Tool，构建一个容量为8字节的cache，要求块大小为4字节（one word），替换策略为LRU，组策略为直接映射。运行上述MIPS程序，得到cache命中率为多少？（5分）</h2><p>Cache Hit Rate=24%</p><h2 id="问题4：结合程序的访存行为，详细分析问题3中cache-miss的原因。（10分）"><a href="#问题4：结合程序的访存行为，详细分析问题3中cache-miss的原因。（10分）" class="headerlink" title="问题4：结合程序的访存行为，详细分析问题3中cache miss的原因。（10分）"></a>问题4：结合程序的访存行为，详细分析问题3中cache miss的原因。（10分）</h2><p>cache size=8，block size=4，所以一共8/4=2，2个block。<br>组策略为直接映射，所以：</p><p>设第一次访存的顺序为(0,1,2,3),第二次为(1,2,3,4),第三次为(2,3,4,5),cache中为(void,void)，则：</p><p>Round1(0,1,2,3):<br>(0,void)-&gt;(0,1)-&gt;(2,1)-&gt;(2,3) | hit = 0 , miss=4;<br>Round2(1,2,3,4):<br>(2,1)-&gt;(2,1)-&gt;(2,3)-&gt;(4,3) | hit =1 , miss = 3;<br>Round3(2,3,4,5):<br>(2,3)-&gt;(2,3)-&gt;(4,3)-&gt;(5,3) | hit =1 , miss = 3;</p><p>Round4~Round25会复现Round2，Round3的操作，因此loop25次之后，hit count=24， miss count=76.<br>Cache Hit Rate=24%</p><h2 id="问题5：根据MARS内置的Data-Cache-Simulation-Tool，构建一个容量为8字节的cache，要求块大小为4字节（one-word），替换策略为LRU，组策略为全相联。运行上述MIPS程序，得到cache命中率为多少？（5分）"><a href="#问题5：根据MARS内置的Data-Cache-Simulation-Tool，构建一个容量为8字节的cache，要求块大小为4字节（one-word），替换策略为LRU，组策略为全相联。运行上述MIPS程序，得到cache命中率为多少？（5分）" class="headerlink" title="问题5：根据MARS内置的Data Cache Simulation Tool，构建一个容量为8字节的cache，要求块大小为4字节（one word），替换策略为LRU，组策略为全相联。运行上述MIPS程序，得到cache命中率为多少？（5分）"></a>问题5：根据MARS内置的Data Cache Simulation Tool，构建一个容量为8字节的cache，要求块大小为4字节（one word），替换策略为LRU，组策略为全相联。运行上述MIPS程序，得到cache命中率为多少？（5分）</h2><p>Cache Hit Rate=0%<br>提示</p><h2 id="问题6：结合程序的访存行为，详细分析问题5中cache-miss的原因。（10分）"><a href="#问题6：结合程序的访存行为，详细分析问题5中cache-miss的原因。（10分）" class="headerlink" title="问题6：结合程序的访存行为，详细分析问题5中cache miss的原因。（10分）"></a>问题6：结合程序的访存行为，详细分析问题5中cache miss的原因。（10分）</h2><p>cache size=8，block size=4，所以一共8/4=2，2个block。<br>组策略为全相联，所以：</p><p>设第一次访存的顺序为(0,1,2,3),第二次为(1,2,3,4),第三次为(2,3,4,5),cache中为(void,void)，则：</p><p>Round1(0,1,2,3):<br>(0,void)-&gt;(0,1)-&gt;(2,1)-&gt;(2,3) | hit = 0 , miss=4;<br>Round2(1,2,3,4):<br>(1,3)-&gt;(1,2)-&gt;(3,2)-&gt;(3,4) | hit =0 , miss = 4;<br>Round3(2,3,4,5):<br>(2,4)-&gt;(2,3)-&gt;(4,3)-&gt;(4,5) | hit =0 , miss = 4;</p><p>Round4~Round25会复现Round2，Round3的操作，因此loop25次之后，hit count=0， miss count=100.<br>Cache Hit Rate=0%</p><h2 id="问题7：保持其他参数不变，通过增加block数量的方式将cache的容量扩大为16个字节，评测不同组策略下cache命中率的变化，并分析原因？进一步扩大cache容量，cache命中率会如何变化？（10分）"><a href="#问题7：保持其他参数不变，通过增加block数量的方式将cache的容量扩大为16个字节，评测不同组策略下cache命中率的变化，并分析原因？进一步扩大cache容量，cache命中率会如何变化？（10分）" class="headerlink" title="问题7：保持其他参数不变，通过增加block数量的方式将cache的容量扩大为16个字节，评测不同组策略下cache命中率的变化，并分析原因？进一步扩大cache容量，cache命中率会如何变化？（10分）"></a>问题7：保持其他参数不变，通过增加block数量的方式将cache的容量扩大为16个字节，评测不同组策略下cache命中率的变化，并分析原因？进一步扩大cache容量，cache命中率会如何变化？（10分）</h2><p>16字节下不同组策略均为72%，继续扩大命中率不变</p><p>cache size=16，block size=4，所以一共16/4=2，4个block。<br>cache中始终能保存连续4个地址的数据<br>后续循环中的前三次均能hit，第四次为义务miss<br>Cache Hit Rate=3*24/100=72%<br>当block增大时始终无法避免义务失效，因此Hit Rate保持不变。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">  .data</span><br><span class="line">bletter:.asciiz </span><br><span class="line"><span class="string">"Alpha "</span>,<span class="string">"Bravo "</span>,<span class="string">"China "</span>,<span class="string">"Delta "</span>,<span class="string">"Echo "</span>,<span class="string">"Foxtrot "</span>,<span class="string">"Golf "</span>,<span class="string">"Hotel "</span>,<span class="string">"India "</span>,</span><br><span class="line"><span class="string">"Juliet "</span>,<span class="string">"Kilo "</span>,<span class="string">"Lima "</span>,<span class="string">"Mary "</span>,<span class="string">"November "</span>,<span class="string">"Oscar "</span>,<span class="string">"Paper "</span>,<span class="string">"Quebec "</span>,<span class="string">"Research "</span>,</span><br><span class="line"><span class="string">"Sierra "</span>,<span class="string">"Tango "</span>,<span class="string">"Uniform "</span>,<span class="string">"Victor "</span>,<span class="string">"Whisky "</span>,<span class="string">"X-ray "</span>,<span class="string">"Yankee "</span>,<span class="string">"Zulu "</span></span><br><span class="line">bltr_offset: .word</span><br><span class="line"><span class="number">0</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">34</span>,<span class="number">43</span>,<span class="number">49</span>,<span class="number">56</span>,<span class="number">63</span>,<span class="number">71</span>,<span class="number">77</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">106</span>,<span class="number">113</span>,<span class="number">121</span>,<span class="number">131</span>,<span class="number">139</span>,<span class="number">146</span>,<span class="number">155</span>,<span class="number">163</span>,<span class="number">171</span>,<span class="number">178</span>,<span class="number">186</span></span><br><span class="line">number: .asciiz </span><br><span class="line"><span class="string">"zero "</span>,<span class="string">"First "</span>,<span class="string">"Second "</span>,<span class="string">"Third "</span>,<span class="string">"Fourth "</span>,<span class="string">"Fifth "</span>,<span class="string">"Sixth "</span>,<span class="string">"Seventh "</span>,<span class="string">"Eighth "</span>,<span class="string">"Ninth "</span></span><br><span class="line">num_offset: .word</span><br><span class="line"><span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">36</span>,<span class="number">43</span>,<span class="number">50</span>,<span class="number">59</span>,<span class="number">67</span></span><br><span class="line">sletter:.asciiz </span><br><span class="line"><span class="string">"alpha "</span>,<span class="string">"bravo "</span>,<span class="string">"china "</span>,<span class="string">"delta "</span>,<span class="string">"echo "</span>,<span class="string">"foxtrot "</span>,<span class="string">"golf "</span>,<span class="string">"hotel "</span>,<span class="string">"india "</span>,</span><br><span class="line"><span class="string">"juliet "</span>,<span class="string">"kilo "</span>,<span class="string">"lima "</span>,<span class="string">"mary "</span>,<span class="string">"november "</span>,<span class="string">"oscar "</span>,<span class="string">"paper "</span>,<span class="string">"quebec "</span>,<span class="string">"research "</span>,</span><br><span class="line"><span class="string">"sierra "</span>,<span class="string">"tango "</span>,<span class="string">"uniform "</span>,<span class="string">"victor "</span>,<span class="string">"whisky "</span>,<span class="string">"x-ray "</span>,<span class="string">"yankee "</span>,<span class="string">"zulu "</span></span><br><span class="line">sltr_offset:.word</span><br><span class="line"><span class="number">0</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">34</span>,<span class="number">43</span>,<span class="number">49</span>,<span class="number">56</span>,<span class="number">63</span>,<span class="number">71</span>,<span class="number">77</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">106</span>,<span class="number">113</span>,<span class="number">121</span>,<span class="number">131</span>,<span class="number">139</span>,<span class="number">146</span>,<span class="number">155</span>,<span class="number">163</span>,<span class="number">171</span>,<span class="number">178</span>,<span class="number">186</span></span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">.globl main</span><br><span class="line">main:li $v0, 12      #read character</span><br><span class="line">syscall         #load argument values</span><br><span class="line">sub $t0,$v0,63  #"?"</span><br><span class="line">beqz $t0,exit</span><br><span class="line">sub $t0,$v0,48  # &lt; '0'</span><br><span class="line">bltz $t0,other</span><br><span class="line"></span><br><span class="line">sub $t1,$t0,10  #'0'&lt;= val &lt;= '9'</span><br><span class="line">bltz $t1,num</span><br><span class="line"></span><br><span class="line">sub $t1,$t0,17  #'9' &lt; val &lt; 'A'</span><br><span class="line">bltz $t1,other</span><br><span class="line">sub $t2,$t1,26  #'A' &lt; val &lt; 'Z'</span><br><span class="line">bltz $t2,bltr</span><br><span class="line"></span><br><span class="line">sub $t3,$t2,6   #'Z' &lt; val &lt; 'a'</span><br><span class="line">bltz $t3,other</span><br><span class="line">sub $t3,$t2,32  #'a' &lt; val &lt; 'z'</span><br><span class="line">bltz $t3,sltr</span><br><span class="line"></span><br><span class="line">num:add $t1,$t1,<span class="number">10</span></span><br><span class="line">sll $t1,$t1,2   # ,居然也算一位</span><br><span class="line">la $s0,num_offset</span><br><span class="line">add $s0,$s0,$t1</span><br><span class="line">lw $s1,($s0)</span><br><span class="line">la $a0,number</span><br><span class="line">add $a0,$a0,$s1</span><br><span class="line">li $v0,4        #print string</span><br><span class="line">syscall</span><br><span class="line">j main</span><br><span class="line"> </span><br><span class="line">bltr:sll $t1,$t1,<span class="number">2</span></span><br><span class="line">la $s0,bltr_offset</span><br><span class="line">add $s0,$s0,$t1</span><br><span class="line">lw $s1,($s0)</span><br><span class="line">la $a0,bletter</span><br><span class="line">add $a0,$a0,$s1</span><br><span class="line">li $v0,<span class="number">4</span></span><br><span class="line">syscall</span><br><span class="line">j main</span><br><span class="line"> </span><br><span class="line">sltr:add $t3,$t3,<span class="number">26</span></span><br><span class="line">sll $t3,$t3,<span class="number">2</span></span><br><span class="line">la $s0,sltr_offset</span><br><span class="line">add $s0,$s0,$t3</span><br><span class="line">lw $s1,($s0)</span><br><span class="line">la $a0,sletter</span><br><span class="line">add $a0,$a0,$s1</span><br><span class="line">li $v0,<span class="number">4</span></span><br><span class="line">syscall</span><br><span class="line">j main</span><br><span class="line"></span><br><span class="line">other:li $a0,<span class="number">42</span></span><br><span class="line">li $v0,<span class="number">11</span></span><br><span class="line">syscall</span><br><span class="line">j main</span><br><span class="line"></span><br><span class="line">exit:li $v0,<span class="number">10</span></span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成：第一次互评作业：MIPS汇编程序设计</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%EF%BC%9A%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BA%92%E8%AF%84%E4%BD%9C%E4%B8%9A%EF%BC%9AMIPS%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%EF%BC%9A%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BA%92%E8%AF%84%E4%BD%9C%E4%B8%9A%EF%BC%9AMIPS%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="第一题：用系统功能调用实现简单输入输出"><a href="#第一题：用系统功能调用实现简单输入输出" class="headerlink" title="第一题：用系统功能调用实现简单输入输出"></a><strong>第一题：用系统功能调用实现简单输入输出</strong></h3><p>利用系统功能调用从键盘输入，转换后在屏幕上显示，具体要求如下：</p><ol><li>如果输入的是字母（A~Z，区分大小写）或数字（0~9），则将其转换成对应的英文单词后在屏幕上显示，对应关系见下表</li><li>若输入的不是字母或数字，则在屏幕上输出字符“*”</li><li>每输入一个字符，即时转换并在屏幕上显示</li><li>支持反复输入，直到按“?”键结束程序</li></ol><table><thead><tr><th style="text-align:center">字母</th><th style="text-align:center">单词</th><th style="text-align:center">字母</th><th style="text-align:center">单词</th><th style="text-align:center">数字</th><th style="text-align:center">单词</th><th style="text-align:center">字母</th><th style="text-align:center">单词</th><th style="text-align:center">字母</th><th style="text-align:center">单词</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">Alpha</td><td style="text-align:center">N</td><td style="text-align:center">November</td><td style="text-align:center">1</td><td style="text-align:center">First</td><td style="text-align:center">a</td><td style="text-align:center">alpha</td><td style="text-align:center">n</td><td style="text-align:center">november</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">Bravo</td><td style="text-align:center">O</td><td style="text-align:center">Oscar</td><td style="text-align:center">2</td><td style="text-align:center">Second</td><td style="text-align:center">b</td><td style="text-align:center">bravo</td><td style="text-align:center">o</td><td style="text-align:center">oscar</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">China</td><td style="text-align:center">P</td><td style="text-align:center">Paper</td><td style="text-align:center">3</td><td style="text-align:center">Third</td><td style="text-align:center">c</td><td style="text-align:center">china</td><td style="text-align:center">p</td><td style="text-align:center">paper</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">Delta</td><td style="text-align:center">Q</td><td style="text-align:center">Quebec</td><td style="text-align:center">4</td><td style="text-align:center">Fourth</td><td style="text-align:center">d</td><td style="text-align:center">delta</td><td style="text-align:center">q</td><td style="text-align:center">quebec</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">Echo</td><td style="text-align:center">R</td><td style="text-align:center">Research</td><td style="text-align:center">5</td><td style="text-align:center">Fifth</td><td style="text-align:center">e</td><td style="text-align:center">echo</td><td style="text-align:center">r</td><td style="text-align:center">research</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">Foxtrot</td><td style="text-align:center">S</td><td style="text-align:center">Sierra</td><td style="text-align:center">6</td><td style="text-align:center">Sixth</td><td style="text-align:center">f</td><td style="text-align:center">foxtrot</td><td style="text-align:center">s</td><td style="text-align:center">sierra</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">Golf</td><td style="text-align:center">T</td><td style="text-align:center">Tango</td><td style="text-align:center">7</td><td style="text-align:center">Seventh</td><td style="text-align:center">g</td><td style="text-align:center">golf</td><td style="text-align:center">t</td><td style="text-align:center">tango</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">Hotel</td><td style="text-align:center">U</td><td style="text-align:center">Uniform</td><td style="text-align:center">8</td><td style="text-align:center">Eighth</td><td style="text-align:center">h</td><td style="text-align:center">hotel</td><td style="text-align:center">u</td><td style="text-align:center">uniform</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">India</td><td style="text-align:center">V</td><td style="text-align:center">Victor</td><td style="text-align:center">9</td><td style="text-align:center">Ninth</td><td style="text-align:center">i</td><td style="text-align:center">india</td><td style="text-align:center">v</td><td style="text-align:center">victor</td></tr><tr><td style="text-align:center">J</td><td style="text-align:center">Juliet</td><td style="text-align:center">W</td><td style="text-align:center">Whisky</td><td style="text-align:center">0</td><td style="text-align:center">zero</td><td style="text-align:center">j</td><td style="text-align:center">juliet</td><td style="text-align:center">w</td><td style="text-align:center">whisky</td></tr><tr><td style="text-align:center">K</td><td style="text-align:center">Kilo</td><td style="text-align:center">X</td><td style="text-align:center">X-ray</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">k</td><td style="text-align:center">kilo</td><td style="text-align:center">x</td><td style="text-align:center">x-ray</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">Lima</td><td style="text-align:center">Y</td><td style="text-align:center">Yankee</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">l</td><td style="text-align:center">lima</td><td style="text-align:center">y</td><td style="text-align:center">yankee</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">Mary</td><td style="text-align:center">Z</td><td style="text-align:center">Zulu</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">m</td><td style="text-align:center">mary</td><td style="text-align:center">z</td><td style="text-align:center">zulu</td></tr></tbody></table><h4 id="第一题代码："><a href="#第一题代码：" class="headerlink" title="第一题代码："></a><strong>第一题代码：</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">            .data</span><br><span class="line">u_word:     .asciiz</span><br><span class="line">            &quot;Alpha &quot;,&quot;Bravo &quot;,&quot;China &quot;,&quot;Delta &quot;,&quot;Echo &quot;,&quot;Foxtrot &quot;,</span><br><span class="line">            &quot;Golf &quot;,&quot;Hotel &quot;,&quot;India &quot;,&quot;Juliet &quot;,&quot;Kilo &quot;,&quot;Lima &quot;,</span><br><span class="line">            &quot;Mary &quot;,&quot;November &quot;,&quot;Oscar &quot;,&quot;Paper &quot;,&quot;Quebec &quot;,&quot;Research &quot;,</span><br><span class="line">            &quot;Sierra &quot;,&quot;Tango &quot;,&quot;Uniform &quot;,&quot;Victor &quot;,&quot;Whisky &quot;,&quot;X-ray &quot;,</span><br><span class="line">            &quot;Yankee &quot;,&quot;Zulu &quot;</span><br><span class="line">uw_offset:  .word</span><br><span class="line">            0,7,14,21,28,34,43,49,56,63,71,</span><br><span class="line">            77,83,89,99,106,113,121,131,</span><br><span class="line">            139,146,155,163,171,178,186</span><br><span class="line">l_word:     .asciiz</span><br><span class="line">            &quot;alpha &quot;,&quot;bravo &quot;,&quot;china &quot;,&quot;delta &quot;,&quot;echo &quot;,&quot;foxtrot &quot;,</span><br><span class="line">            &quot;golf &quot;,&quot;hotel &quot;,&quot;india &quot;,&quot;juliet &quot;,&quot;kilo &quot;,&quot;lima &quot;,</span><br><span class="line">            &quot;mary &quot;,&quot;november &quot;,&quot;oscar &quot;,&quot;paper &quot;,&quot;quebec &quot;,&quot;research &quot;,</span><br><span class="line">            &quot;sierra &quot;,&quot;tango &quot;,&quot;uniform &quot;,&quot;victor &quot;,&quot;whisky &quot;,&quot;x-ray &quot;,</span><br><span class="line">            &quot;yankee &quot;,&quot;zulu &quot;</span><br><span class="line">lw_offset:  .word</span><br><span class="line">            0,7,14,21,28,34,43,49,56,63,71,</span><br><span class="line">            77,83,89,99,106,113,121,131,</span><br><span class="line">            139,146,155,163,171,178,186</span><br><span class="line">number:     .asciiz</span><br><span class="line">            &quot;zero &quot;, &quot;First &quot;, &quot;Second &quot;, &quot;Third &quot;, &quot;Fourth &quot;,</span><br><span class="line">            &quot;Fifth &quot;, &quot;Sixth &quot;, &quot;Seventh &quot;,&quot;Eighth &quot;,&quot;Ninth &quot;</span><br><span class="line">n_offset:   .word</span><br><span class="line">            0,6,13,21,28,36,43,50,59,67</span><br><span class="line"></span><br><span class="line">            .text</span><br><span class="line">            .globl main</span><br><span class="line">main:       li $v0, 12 # read character</span><br><span class="line">            syscall</span><br><span class="line">            sub $t1, $v0, 63 # &apos;?&apos;</span><br><span class="line">            beqz $t1, exit</span><br><span class="line">            sub $t1, $v0, 48 # &apos;0&apos;</span><br><span class="line">            slt $s0, $t1, $0 # if t1 &lt; 0 then s0 = 1</span><br><span class="line">            bnez $s0, others</span><br><span class="line"></span><br><span class="line">            # is number?</span><br><span class="line">            sub $t2, $t1, 10 # number</span><br><span class="line">            slt $s1, $t2, $0 # if t2 &lt; 0 then s1 = 1</span><br><span class="line">            bnez $s1, getnum</span><br><span class="line"></span><br><span class="line">            # is capital?</span><br><span class="line">            sub $t2, $v0, 91</span><br><span class="line">            slt $s3, $t2, $0 # if v0 &lt;= &apos;Z&apos; then s3 = 1</span><br><span class="line">            sub $t3, $v0, 64 </span><br><span class="line">            sgt $s4, $t3, $0 # if v0 &gt;=&apos;A&apos; then s4 = 1</span><br><span class="line">            and $s0, $s3, $s4 # if s3 == 1 &amp;&amp; s4 == 1 </span><br><span class="line">            bnez $s0, getuword</span><br><span class="line"></span><br><span class="line">            # is lower case?</span><br><span class="line">            sub $t2, $v0, 123</span><br><span class="line">            slt $s3, $t2, $0 # if v0 &lt;= &apos;z&apos; then s3 = 1</span><br><span class="line">            sub $t3, $v0, 96 </span><br><span class="line">            sgt $s4, $t3, $0 # if v0 &gt;= &apos;a&apos; then s4 = 1</span><br><span class="line">            and $s0, $s3, $s4</span><br><span class="line">            bnez $s0, getlword</span><br><span class="line">            j others</span><br><span class="line"></span><br><span class="line">getnum:     add $t2, $t2, 10</span><br><span class="line">            sll $t2, $t2, 2</span><br><span class="line">            la $s0, n_offset</span><br><span class="line">            add $s0, $s0, $t2</span><br><span class="line">            lw $s1, ($s0)</span><br><span class="line">            la $a0, number</span><br><span class="line">            add $a0, $a0, $s1</span><br><span class="line">            li $v0, 4</span><br><span class="line">            syscall</span><br><span class="line">            j main</span><br><span class="line"></span><br><span class="line">            # upper case word</span><br><span class="line">getuword:   sub $t3, $t3, 1</span><br><span class="line">            sll $t3, $t3, 2</span><br><span class="line">            la $s0, uw_offset</span><br><span class="line">            add $s0, $s0, $t3</span><br><span class="line">            lw $s1, ($s0)</span><br><span class="line">            la $a0, u_word</span><br><span class="line">            add $a0, $s1, $a0</span><br><span class="line">            li $v0, 4</span><br><span class="line">            syscall</span><br><span class="line">            j main</span><br><span class="line"></span><br><span class="line">            # lower case word</span><br><span class="line">getlword:   sub $t3, $t3, 1</span><br><span class="line">            sll $t3, $t3, 2</span><br><span class="line">            la $s0, lw_offset</span><br><span class="line">            add $s0, $s0, $t3</span><br><span class="line">            lw $s1, ($s0)</span><br><span class="line">            la $a0, l_word</span><br><span class="line">            add $a0, $s1, $a0</span><br><span class="line">            li $v0, 4</span><br><span class="line">            syscall</span><br><span class="line">            j main</span><br><span class="line"></span><br><span class="line">others:     and $a0, $0, $0</span><br><span class="line">            add $a0, $a0, 42 # &apos;*&apos;</span><br><span class="line">            li $v0, 11 # print character</span><br><span class="line">            syscall</span><br><span class="line">            j main</span><br><span class="line"></span><br><span class="line">exit:       li $v0, 10 # exit</span><br><span class="line">            syscall</span><br></pre></td></tr></table></figure><h3 id="第二题：字符串查找比较"><a href="#第二题：字符串查找比较" class="headerlink" title="第二题：字符串查找比较"></a><strong>第二题：字符串查找比较</strong></h3><p>利用系统功能调用从键盘输入一个字符串，然后输入单个字符，查找该字符串中是否有该字符（区分大小写）。具体要求如下：</p><ol><li>如果找到，则在屏幕上显示：“Success! Location: X”，其中，X为该字符在字符串中第一次出现的位置</li><li>如果没找到，则在屏幕上显示：“Fail!”</li><li>输入一个字符串后，可以反复输入希望查询的字符，直到按“?”键结束程序</li><li>每个输入字符独占一行，输出查找结果独占一行，位置编码从1开始</li></ol><p>提示：为避免歧义，字符串内不包含“?”符号<br>格式示例如下：</p><p><strong>abcdefgh</strong><br><strong>a</strong><br><strong>Success! Location: 1</strong><br><strong>x</strong><br><strong>Fail!</strong></p><h4 id="第二题代码："><a href="#第二题代码：" class="headerlink" title="第二题代码："></a><strong>第二题代码：</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">            .data</span><br><span class="line">msg_s:      .asciiz &quot;\r\nSuccess! Location: &quot;</span><br><span class="line">msg_f:      .asciiz &quot;\r\nFail!\r\n&quot;</span><br><span class="line">s_end:      .asciiz &quot;\r\n&quot;</span><br><span class="line">buf:        .space 100</span><br><span class="line"></span><br><span class="line">            .text</span><br><span class="line">            .globl main</span><br><span class="line">main:       la $a0, buf # address of input buffer</span><br><span class="line">            la $a1, 100 # maximum number of characters to read</span><br><span class="line">            li $v0, 8 # read string</span><br><span class="line">            syscall</span><br><span class="line"></span><br><span class="line">inputchar:  li $v0, 12 # read character</span><br><span class="line">            syscall</span><br><span class="line">            addi $t7, $0, 63 # &apos;?&apos;</span><br><span class="line">            sub $t6, $t7, $v0</span><br><span class="line">            beq $t6, $0, exit</span><br><span class="line">            add $t0, $0, $0</span><br><span class="line">            la $s1, buf</span><br><span class="line"></span><br><span class="line">find_loop:  lb $s0, 0($s1)</span><br><span class="line">            sub $t1, $v0, $s0</span><br><span class="line">            beq $t1, $0, success</span><br><span class="line">            addi $t0, $t0, 1</span><br><span class="line">            slt $t3, $t0, $a1</span><br><span class="line">            beq $t3, $0, fail</span><br><span class="line">            addi $s1 $s1, 1</span><br><span class="line">            j find_loop</span><br><span class="line"></span><br><span class="line">success:    la $a0, msg_s</span><br><span class="line">            li $v0, 4 # print string</span><br><span class="line">            syscall</span><br><span class="line">            addi $a0, $t0, 1</span><br><span class="line">            li $v0, 1 # print integer</span><br><span class="line">            syscall</span><br><span class="line">            la $a0, s_end</span><br><span class="line">            li $v0, 4</span><br><span class="line">            syscall</span><br><span class="line">            j inputchar</span><br><span class="line"></span><br><span class="line">fail:       la $a0, msg_f</span><br><span class="line">            li $v0, 4</span><br><span class="line">            syscall</span><br><span class="line">            j inputchar</span><br><span class="line"></span><br><span class="line">exit:       li $v0, 10</span><br><span class="line">            syscall</span><br></pre></td></tr></table></figure><p>[</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HexoEditor编写MarkDown自动上传替换七牛外链</title>
      <link href="/HexoEditor%E7%BC%96%E5%86%99MarkDown%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E6%9B%BF%E6%8D%A2%E4%B8%83%E7%89%9B%E5%A4%96%E9%93%BE/"/>
      <url>/HexoEditor%E7%BC%96%E5%86%99MarkDown%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E6%9B%BF%E6%8D%A2%E4%B8%83%E7%89%9B%E5%A4%96%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>继之前介绍的如何搭建个人博客，如何完善博客各种功能，今天来介绍一下配合Hexo框架和Next主题来写文章的利器——HexoEditor。以及用七牛云保存图片，并用外链的方式在Hexo文章中显示图片。</p><hr><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><p>os: Windows</p></blockquote><hr><h1 id="HexoEditor"><a href="#HexoEditor" class="headerlink" title="HexoEditor"></a>HexoEditor</h1><p>HexoEditor是一款配和Hexo框架和Next主题，写Markdown文章的编辑器。废话不多说，先上GitHub地址。</p><p><a href="https://github.com/zhuzhuyule/HexoEditor/blob/master/doc/cn/README.md" target="_blank" rel="noopener">GitHub</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装的话可以看<a href="http://zqily.com安装" target="_blank" rel="noopener">这里</a>，我有介绍过。</p><h2 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h2><p>在HexoEditor的根目录（根目录下有app,doc,icons等文件夹）下面，打开<code>Git Bash</code>，执行命令：</p><blockquote><p>npm start</p></blockquote><p>等一会儿就会出现HexoEditor编辑器。点击左下角会出现菜单栏。</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618052712819.png" alt></p><p>如果要写博文，就新建Post。</p><p>新建的文章会根据<code>/yoursite/scaffolds/post.md</code>模板自动生成一些内容，其实也就是这个文件的内容，如果想修改模板，就直接修改这个就行了。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>写文章的话，左边写，右边就会实时显示样式。没什么好讲的，所以重点讲一讲这个设置里面的图片设置（以七牛云为例）。</p><p>为什么要重点讲这个图片设置？<br>写文章的时候，图片有两种方式展现在页面上，一种是从本地读取，一种是从一个外链上读取。<br>本地读取的话，图片都保存在Coding上面，很占用空间，速度也不快。<br>所以一般选择将图片保存在七牛云或者别的地方，然后通过外链调用。</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618053310449.png" alt></p><ul><li>默认资源库：把你放在文章里面的图片存到这个目录下，可以在任意位置。</li><li>云图类型：七牛云、腾通自己选。</li><li>Access Key：从你七牛云或者百度云获取。</li><li>Secret Key：同上。</li><li>下面两个在填完上面两个Key之后会自动生成。</li></ul><h3 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h3><p>要使用七牛云，当然是先注册一个啦，<a href="https://portal.qiniu.com/signup?code=3l9qmvo8g6uz6" target="_blank" rel="noopener">点击进入注册页面</a>。实话实说，这是我的邀请链接，可以帮我增加每个月的下载流量。</p><p>注册好了之后，找到对象存储-&gt;立即添加。</p><p><img src="http://dugblog.coding.me/%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E4%BF%9D%E5%AD%98Hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E6%98%BE%E7%A4%BA%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD/20180618054842730.png" alt></p><p>很好，会提示你实名验证，那就只有老老实实的实名验证啦~验证时间大概是两到三天，可以先收藏着我的文章，验证好了再来看~XD</p><p>验证好了之后，填好创建信息，确定创建。然后点击右上角个人面板，密钥管理</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618055558859.png" alt></p><p>可以看到两个Key的值</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618055634989.png" alt></p><p>这两个值就是刚刚HexoEditor的图片设置里面要填的。</p><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use?"></a>How to use?</h2><p>怎么用这个图床功能呢？</p><p>用HexoEditor写文章的时候，将你的图片直接复制，或者写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](图片绝对路径)</span><br></pre></td></tr></table></figure><p>然后右键，上传七牛云，接下来就是I have a HexoEditor, I have a qiniu, Bang! 你会发现</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618060123794.png" alt></p><p>这样的路径图片会变成一个外链图片</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180620092749904.png" alt></p><p>打完收工！</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法说明 (简体中文版)</title>
      <link href="/Markdown%20%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%20(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E7%89%88)/"/>
      <url>/Markdown%20%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%20(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E7%89%88)/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-语法说明-简体中文版-点击查看快速入门"><a href="#Markdown-语法说明-简体中文版-点击查看快速入门" class="headerlink" title="Markdown 语法说明 (简体中文版) / (点击查看快速入门)"></a>Markdown 语法说明 (简体中文版) / (<a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="noopener">点击查看快速入门</a>)</h1><ul><li><a href="http://wowubuntu.com/markdown/index.html#overview" target="_blank" rel="noopener">概述</a><ul><li><a href="http://wowubuntu.com/markdown/index.html#philosophy" target="_blank" rel="noopener">宗旨</a></li><li><a href="http://wowubuntu.com/markdown/index.html#html" target="_blank" rel="noopener">兼容 HTML</a></li><li><a href="http://wowubuntu.com/markdown/index.html#autoescape" target="_blank" rel="noopener">特殊字符自动转换</a></li></ul></li><li><a href="http://wowubuntu.com/markdown/index.html#block" target="_blank" rel="noopener">区块元素</a><ul><li><a href="http://wowubuntu.com/markdown/index.html#p" target="_blank" rel="noopener">段落和换行</a></li><li><a href="http://wowubuntu.com/markdown/index.html#header" target="_blank" rel="noopener">标题</a></li><li><a href="http://wowubuntu.com/markdown/index.html#blockquote" target="_blank" rel="noopener">区块引用</a></li><li><a href="http://wowubuntu.com/markdown/index.html#list" target="_blank" rel="noopener">列表</a></li><li><a href="http://wowubuntu.com/markdown/index.html#precode" target="_blank" rel="noopener">代码区块</a></li><li><a href="http://wowubuntu.com/markdown/index.html#hr" target="_blank" rel="noopener">分隔线</a></li></ul></li><li><a href="http://wowubuntu.com/markdown/index.html#span" target="_blank" rel="noopener">区段元素</a><ul><li><a href="http://wowubuntu.com/markdown/index.html#link" target="_blank" rel="noopener">链接</a></li><li><a href="http://wowubuntu.com/markdown/index.html#em" target="_blank" rel="noopener">强调</a></li><li><a href="http://wowubuntu.com/markdown/index.html#code" target="_blank" rel="noopener">代码</a></li><li><a href="http://wowubuntu.com/markdown/index.html#img" target="_blank" rel="noopener">图片</a></li></ul></li><li><a href="http://wowubuntu.com/markdown/index.html#misc" target="_blank" rel="noopener">其它</a><ul><li><a href="http://wowubuntu.com/markdown/index.html#backslash" target="_blank" rel="noopener">反斜杠</a></li><li><a href="http://wowubuntu.com/markdown/index.html#autolink" target="_blank" rel="noopener">自动链接</a></li></ul></li><li><a href="http://wowubuntu.com/markdown/index.html#acknowledgement" target="_blank" rel="noopener">感谢</a></li><li><a href="http://wowubuntu.com/markdown/index.html#editor" target="_blank" rel="noopener">Markdown 免费编辑器</a></li></ul><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="noopener">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="noopener">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/" target="_blank" rel="noopener">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的_书写_语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想_不是<em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种</em>发布<em>的格式，Markdown 是一种</em>书写_的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>、</code>、<code>、</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code></code> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        Foo</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">这是另一个普通段落。</span><br></pre></td></tr></table></figure><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>、</code>、<code>可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的</code> 或 <code></code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&lt;</code> 和 <code>&amp;</code>。</p><p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;q=larry+bird</span><br></pre></td></tr></table></figure><p>你必须要把网址转换写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;q=larry+bird</span><br></pre></td></tr></table></figure><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;</code>;。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">©</span><br></pre></td></tr></table></figure><p>Markdown 会保留它不动。而若你写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT&amp;T</span><br></pre></td></tr></table></figure><p>Markdown 就会将它转为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT&amp;T</span><br></pre></td></tr></table></figure><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="http://wowubuntu.com/markdown/index.html#html" target="_blank" rel="noopener">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 &lt; 5</span><br></pre></td></tr></table></figure><p>Markdown 将会把它转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 &lt; 5</span><br></pre></td></tr></table></figure><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都_一定_会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><hr><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code></code> 标签。</p><p>如果你_确实_想要依赖 Markdown 来插入 <code></code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>，但是简单地「每个换行都转换为</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="http://wowubuntu.com/markdown/index.html#blockquote" target="_blank" rel="noopener">区块引用</a> 和多段落的 <a href="http://wowubuntu.com/markdown/index.html#list" target="_blank" rel="noopener">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a> 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line"></span><br><span class="line">## 这是 H2</span><br><span class="line"></span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></table></figure><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ######</span><br></pre></td></tr></table></figure><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">&gt; id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back to the first level.</span><br></pre></td></tr></table></figure><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ## 这是一个标题。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1\.   这是第一行列表项。</span><br><span class="line">&gt; 2\.   这是第二行列表项。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 给出一些例子代码：</span><br><span class="line">&gt; </span><br><span class="line">&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</span><br></pre></td></tr></table></figure><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></table></figure><p>也等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></table></figure><p>有序列表则使用数字接着一个英文句点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1\.  Bird</span><br><span class="line">2\.  McHale</span><br><span class="line">3\.  Parish</span><br></pre></td></tr></table></figure><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Bird</span><br><span class="line">McHale</span><br><span class="line">Parish</span><br></pre></td></tr></table></figure><p>如果你的列表标记写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1\.  Bird</span><br><span class="line">1\.  McHale</span><br><span class="line">1\.  Parish</span><br></pre></td></tr></table></figure><p>或甚至是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3\. Bird</span><br><span class="line">1\. McHale</span><br><span class="line">8\. Parish</span><br></pre></td></tr></table></figure><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>但是如果你懒，那也行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code></code> 标签包起来，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*   Bird</span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Bird</span><br><span class="line">Magic</span><br></pre></td></tr></table></figure><p>但是这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   Bird</span><br><span class="line"></span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Bird</span><br><span class="line">Magic</span><br></pre></td></tr></table></figure><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1\.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2\.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You&apos;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></table></figure><p>如果要放代码区块的话，该区块就需要缩进_两次_，也就是 8 个空格或是 2 个制表符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></table></figure><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>和</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure><p>Markdown 会转换成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">这是一个代码区块。</span><br></pre></td></tr></table></figure><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Here is an example of AppleScript:</span><br><span class="line"></span><br><span class="line">    tell application &quot;Foo&quot;</span><br><span class="line">        beep</span><br><span class="line">    end tell</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Here is an example of AppleScript:</span><br><span class="line"></span><br><span class="line">tell application &quot;Foo&quot;</span><br><span class="line">    beep</span><br><span class="line">end tell</span><br></pre></td></tr></table></figure><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">© 2004 Foo Corporation</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">    &amp;copy; 2004 Foo Corporation</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><hr><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure><p>会产生：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is </span><br><span class="line">an example inline link.</span><br><span class="line"></span><br><span class="line">This link has no</span><br><span class="line">title attribute.</span><br></pre></td></tr></table></figure><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">See my [About](/about/) page for details.</span><br></pre></td></tr></table></figure><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [an example][id] reference-style link.</span><br></pre></td></tr></table></figure><p>你也可以选择性地在两个方括号中间加上一个空格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [an example] [id] reference-style link.</span><br></pre></td></tr></table></figure><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id]: http://example.com/  &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[foo]: http://example.com/  &quot;Optional Title Here&quot;</span><br><span class="line">[foo]: http://example.com/  &apos;Optional Title Here&apos;</span><br><span class="line">[foo]: http://example.com/  (Optional Title Here)</span><br></pre></td></tr></table></figure><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用尖括号包起来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id]:   &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[id]: http://example.com/longish/path/to/resource/here</span><br><span class="line">    &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并_不_区分大小写，因此下面两个链接是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[link text][a]</span><br><span class="line">[link text][A]</span><br></pre></td></tr></table></figure><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google][]</span><br></pre></td></tr></table></figure><p>然后定义链接内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google]: http://google.com/</span><br></pre></td></tr></table></figure><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Visit [Daring Fireball][] for more information.</span><br></pre></td></tr></table></figure><p>然后接着定义链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Daring Fireball]: http://daringfireball.net/</span><br></pre></td></tr></table></figure><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google] [1] than from</span><br><span class="line">[Yahoo] [2] or [MSN] [3].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure><p>如果改成用链接名称的方式写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google][] than from</span><br><span class="line">[Yahoo][] or [MSN][].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure><p>上面两种写法都会产生下面的 HTML。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from Google than from</span><br><span class="line">Yahoo</span><br><span class="line">or MSN.</span><br></pre></td></tr></table></figure><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)</span><br><span class="line">than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or</span><br><span class="line">[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</span><br></pre></td></tr></table></figure><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>标签包围，用两个 `*` 或 `_` 包起来的话，则会被转成</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br></pre></td></tr></table></figure><p>会转成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">single asterisks</span><br><span class="line"></span><br><span class="line">single underscores</span><br><span class="line"></span><br><span class="line">double asterisks</span><br><span class="line"></span><br><span class="line">double underscores</span><br></pre></td></tr></table></figure><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">un*frigging*believable</span><br></pre></td></tr></table></figure><p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*this text is surrounded by literal asterisks\*</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>Use the <code>printf()</code> function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">会产生：</span><br></pre></td></tr></table></figure><p>Use the printf() function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</span><br></pre></td></tr></table></figure><p><code>There is a literal backtick (`) here.</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这段语法会产生：</span><br></pre></td></tr></table></figure><p>There is a literal backtick (`) here.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</span><br></pre></td></tr></table></figure><p>A single backtick in a code span: <code>`</code></p><p>A backtick-delimited string in a code span: <code>`foo`</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">会产生：</span><br></pre></td></tr></table></figure><p>A single backtick in a code span: `</p><p>A backtick-delimited string in a code span: <code>foo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在代码区段内，`&amp;` 和尖括号**都**会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</span><br></pre></td></tr></table></figure><p>Please don’t use any <code></code> tags.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">转为：</span><br></pre></td></tr></table></figure><p>Please don’t use any <blink> tags.</blink></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">你也可以这样写：</span><br></pre></td></tr></table></figure><p><code>—</code> is the decimal-encoded equivalent of <code>—</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">以产生：</span><br></pre></td></tr></table></figure><p>&#8212; is the decimal-encoded<br>equivalent of &mdash;.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 图片</span><br><span class="line"></span><br><span class="line">很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</span><br><span class="line"></span><br><span class="line">Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： _行内式_和_参考式_。</span><br><span class="line"></span><br><span class="line">行内式的图片语法看起来像是：</span><br></pre></td></tr></table></figure><p><img src="/path/to/img.jpg" alt="Alt text"></p><p><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">详细叙述如下：</span><br><span class="line"></span><br><span class="line">*   一个惊叹号 `!`</span><br><span class="line">*   接着一个方括号，里面放上图片的替代文字</span><br><span class="line">*   接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &apos;title&apos; 文字。</span><br><span class="line"></span><br><span class="line">参考式的图片语法则长得像这样：</span><br></pre></td></tr></table></figure><p><img src="url/to/image" alt="Alt text" title="Optional title attribute"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `` 标签。</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">## 其它</span><br><span class="line"></span><br><span class="line">### 自动链接</span><br><span class="line"></span><br><span class="line">Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 会转为：</span><br></pre></td></tr></table></figure><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 会转成：</span><br></pre></td></tr></table></figure><p>address@exa<br>mple.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在浏览器里面，这段字串（其实是 `address@example.com`）会变成一个可以点击的「address@example.com」链接。</span><br><span class="line"></span><br><span class="line">（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</span><br><span class="line"></span><br><span class="line">### 反斜杠</span><br><span class="line"></span><br><span class="line">Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `` 标签），你可以在星号的前面加上反斜杠：</span><br></pre></td></tr></table></figure><p>*literal asterisks*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</span><br></pre></td></tr></table></figure><p>\   反斜线<br>`   反引号</p><ul><li>星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<h1 id="井字号"><a href="#井字号" class="headerlink" title="井字号"></a>井字号</h1></li></ul><ul><li>加号</li></ul><ul><li>减号<br>.   英文句点<br>!   惊叹号</li></ul><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
